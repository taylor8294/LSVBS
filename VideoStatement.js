// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/core-js/internals/global.js":[function(require,module,exports) {
var global = arguments[3];
var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line no-undef
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func
  Function('return this')();

},{}],"node_modules/core-js/internals/fails.js":[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

},{}],"node_modules/core-js/internals/descriptors.js":[function(require,module,exports) {
var fails = require('../internals/fails');

// Thank's IE8 for his funny defineProperty
module.exports = !fails(function () {
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});

},{"../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/internals/object-property-is-enumerable.js":[function(require,module,exports) {
'use strict';
var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;

},{}],"node_modules/core-js/internals/create-property-descriptor.js":[function(require,module,exports) {
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],"node_modules/core-js/internals/classof-raw.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],"node_modules/core-js/internals/indexed-object.js":[function(require,module,exports) {
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');

var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;

},{"../internals/fails":"node_modules/core-js/internals/fails.js","../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js"}],"node_modules/core-js/internals/require-object-coercible.js":[function(require,module,exports) {
// `RequireObjectCoercible` abstract operation
// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};

},{}],"node_modules/core-js/internals/to-indexed-object.js":[function(require,module,exports) {
// toObject with fallback for non-array-like ES3 strings
var IndexedObject = require('../internals/indexed-object');
var requireObjectCoercible = require('../internals/require-object-coercible');

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};

},{"../internals/indexed-object":"node_modules/core-js/internals/indexed-object.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js"}],"node_modules/core-js/internals/is-object.js":[function(require,module,exports) {
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],"node_modules/core-js/internals/to-primitive.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');

// `ToPrimitive` abstract operation
// https://tc39.github.io/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (input, PREFERRED_STRING) {
  if (!isObject(input)) return input;
  var fn, val;
  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js"}],"node_modules/core-js/internals/has.js":[function(require,module,exports) {
var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],"node_modules/core-js/internals/document-create-element.js":[function(require,module,exports) {

var global = require('../internals/global');
var isObject = require('../internals/is-object');

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/is-object":"node_modules/core-js/internals/is-object.js"}],"node_modules/core-js/internals/ie8-dom-define.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var createElement = require('../internals/document-create-element');

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/document-create-element":"node_modules/core-js/internals/document-create-element.js"}],"node_modules/core-js/internals/object-get-own-property-descriptor.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var toIndexedObject = require('../internals/to-indexed-object');
var toPrimitive = require('../internals/to-primitive');
var has = require('../internals/has');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');

var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-property-is-enumerable":"node_modules/core-js/internals/object-property-is-enumerable.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js","../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/ie8-dom-define":"node_modules/core-js/internals/ie8-dom-define.js"}],"node_modules/core-js/internals/an-object.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js"}],"node_modules/core-js/internals/object-define-property.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');

var nativeDefineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/ie8-dom-define":"node_modules/core-js/internals/ie8-dom-define.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js"}],"node_modules/core-js/internals/create-non-enumerable-property.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js"}],"node_modules/core-js/internals/set-global.js":[function(require,module,exports) {

var global = require('../internals/global');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

module.exports = function (key, value) {
  try {
    createNonEnumerableProperty(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js"}],"node_modules/core-js/internals/shared-store.js":[function(require,module,exports) {

var global = require('../internals/global');
var setGlobal = require('../internals/set-global');

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/set-global":"node_modules/core-js/internals/set-global.js"}],"node_modules/core-js/internals/inspect-source.js":[function(require,module,exports) {
var store = require('../internals/shared-store');

var functionToString = Function.toString;

// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
if (typeof store.inspectSource != 'function') {
  store.inspectSource = function (it) {
    return functionToString.call(it);
  };
}

module.exports = store.inspectSource;

},{"../internals/shared-store":"node_modules/core-js/internals/shared-store.js"}],"node_modules/core-js/internals/native-weak-map.js":[function(require,module,exports) {

var global = require('../internals/global');
var inspectSource = require('../internals/inspect-source');

var WeakMap = global.WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/inspect-source":"node_modules/core-js/internals/inspect-source.js"}],"node_modules/core-js/internals/is-pure.js":[function(require,module,exports) {
module.exports = false;

},{}],"node_modules/core-js/internals/shared.js":[function(require,module,exports) {
var IS_PURE = require('../internals/is-pure');
var store = require('../internals/shared-store');

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.6.4',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});

},{"../internals/is-pure":"node_modules/core-js/internals/is-pure.js","../internals/shared-store":"node_modules/core-js/internals/shared-store.js"}],"node_modules/core-js/internals/uid.js":[function(require,module,exports) {
var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};

},{}],"node_modules/core-js/internals/shared-key.js":[function(require,module,exports) {
var shared = require('../internals/shared');
var uid = require('../internals/uid');

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};

},{"../internals/shared":"node_modules/core-js/internals/shared.js","../internals/uid":"node_modules/core-js/internals/uid.js"}],"node_modules/core-js/internals/hidden-keys.js":[function(require,module,exports) {
module.exports = {};

},{}],"node_modules/core-js/internals/internal-state.js":[function(require,module,exports) {

var NATIVE_WEAK_MAP = require('../internals/native-weak-map');
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var objectHas = require('../internals/has');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');

var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = new WeakMap();
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};

},{"../internals/native-weak-map":"node_modules/core-js/internals/native-weak-map.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/shared-key":"node_modules/core-js/internals/shared-key.js","../internals/hidden-keys":"node_modules/core-js/internals/hidden-keys.js"}],"node_modules/core-js/internals/redefine.js":[function(require,module,exports) {

var global = require('../internals/global');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var has = require('../internals/has');
var setGlobal = require('../internals/set-global');
var inspectSource = require('../internals/inspect-source');
var InternalStateModule = require('../internals/internal-state');

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
});

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/set-global":"node_modules/core-js/internals/set-global.js","../internals/inspect-source":"node_modules/core-js/internals/inspect-source.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js"}],"node_modules/core-js/internals/path.js":[function(require,module,exports) {

var global = require('../internals/global');

module.exports = global;

},{"../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/internals/get-built-in.js":[function(require,module,exports) {

var path = require('../internals/path');
var global = require('../internals/global');

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};

},{"../internals/path":"node_modules/core-js/internals/path.js","../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/internals/to-integer.js":[function(require,module,exports) {
var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.github.io/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};

},{}],"node_modules/core-js/internals/to-length.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.github.io/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

},{"../internals/to-integer":"node_modules/core-js/internals/to-integer.js"}],"node_modules/core-js/internals/to-absolute-index.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

},{"../internals/to-integer":"node_modules/core-js/internals/to-integer.js"}],"node_modules/core-js/internals/array-includes.js":[function(require,module,exports) {
var toIndexedObject = require('../internals/to-indexed-object');
var toLength = require('../internals/to-length');
var toAbsoluteIndex = require('../internals/to-absolute-index');

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};

},{"../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/to-absolute-index":"node_modules/core-js/internals/to-absolute-index.js"}],"node_modules/core-js/internals/object-keys-internal.js":[function(require,module,exports) {
var has = require('../internals/has');
var toIndexedObject = require('../internals/to-indexed-object');
var indexOf = require('../internals/array-includes').indexOf;
var hiddenKeys = require('../internals/hidden-keys');

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }
  return result;
};

},{"../internals/has":"node_modules/core-js/internals/has.js","../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/array-includes":"node_modules/core-js/internals/array-includes.js","../internals/hidden-keys":"node_modules/core-js/internals/hidden-keys.js"}],"node_modules/core-js/internals/enum-bug-keys.js":[function(require,module,exports) {
// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];

},{}],"node_modules/core-js/internals/object-get-own-property-names.js":[function(require,module,exports) {
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};

},{"../internals/object-keys-internal":"node_modules/core-js/internals/object-keys-internal.js","../internals/enum-bug-keys":"node_modules/core-js/internals/enum-bug-keys.js"}],"node_modules/core-js/internals/object-get-own-property-symbols.js":[function(require,module,exports) {
exports.f = Object.getOwnPropertySymbols;

},{}],"node_modules/core-js/internals/own-keys.js":[function(require,module,exports) {
var getBuiltIn = require('../internals/get-built-in');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var anObject = require('../internals/an-object');

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};

},{"../internals/get-built-in":"node_modules/core-js/internals/get-built-in.js","../internals/object-get-own-property-names":"node_modules/core-js/internals/object-get-own-property-names.js","../internals/object-get-own-property-symbols":"node_modules/core-js/internals/object-get-own-property-symbols.js","../internals/an-object":"node_modules/core-js/internals/an-object.js"}],"node_modules/core-js/internals/copy-constructor-properties.js":[function(require,module,exports) {
var has = require('../internals/has');
var ownKeys = require('../internals/own-keys');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};

},{"../internals/has":"node_modules/core-js/internals/has.js","../internals/own-keys":"node_modules/core-js/internals/own-keys.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js"}],"node_modules/core-js/internals/is-forced.js":[function(require,module,exports) {
var fails = require('../internals/fails');

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;

},{"../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/internals/export.js":[function(require,module,exports) {

var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var setGlobal = require('../internals/set-global');
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var isForced = require('../internals/is-forced');

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/set-global":"node_modules/core-js/internals/set-global.js","../internals/copy-constructor-properties":"node_modules/core-js/internals/copy-constructor-properties.js","../internals/is-forced":"node_modules/core-js/internals/is-forced.js"}],"node_modules/core-js/internals/native-symbol.js":[function(require,module,exports) {
var fails = require('../internals/fails');

module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  // Chrome 38 Symbol has incorrect toString conversion
  // eslint-disable-next-line no-undef
  return !String(Symbol());
});

},{"../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/internals/use-symbol-as-uid.js":[function(require,module,exports) {
var NATIVE_SYMBOL = require('../internals/native-symbol');

module.exports = NATIVE_SYMBOL
  // eslint-disable-next-line no-undef
  && !Symbol.sham
  // eslint-disable-next-line no-undef
  && typeof Symbol.iterator == 'symbol';

},{"../internals/native-symbol":"node_modules/core-js/internals/native-symbol.js"}],"node_modules/core-js/internals/is-array.js":[function(require,module,exports) {
var classof = require('../internals/classof-raw');

// `IsArray` abstract operation
// https://tc39.github.io/ecma262/#sec-isarray
module.exports = Array.isArray || function isArray(arg) {
  return classof(arg) == 'Array';
};

},{"../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js"}],"node_modules/core-js/internals/to-object.js":[function(require,module,exports) {
var requireObjectCoercible = require('../internals/require-object-coercible');

// `ToObject` abstract operation
// https://tc39.github.io/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};

},{"../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js"}],"node_modules/core-js/internals/object-keys.js":[function(require,module,exports) {
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};

},{"../internals/object-keys-internal":"node_modules/core-js/internals/object-keys-internal.js","../internals/enum-bug-keys":"node_modules/core-js/internals/enum-bug-keys.js"}],"node_modules/core-js/internals/object-define-properties.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var anObject = require('../internals/an-object');
var objectKeys = require('../internals/object-keys');

// `Object.defineProperties` method
// https://tc39.github.io/ecma262/#sec-object.defineproperties
module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
  return O;
};

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/object-keys":"node_modules/core-js/internals/object-keys.js"}],"node_modules/core-js/internals/html.js":[function(require,module,exports) {
var getBuiltIn = require('../internals/get-built-in');

module.exports = getBuiltIn('document', 'documentElement');

},{"../internals/get-built-in":"node_modules/core-js/internals/get-built-in.js"}],"node_modules/core-js/internals/object-create.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var defineProperties = require('../internals/object-define-properties');
var enumBugKeys = require('../internals/enum-bug-keys');
var hiddenKeys = require('../internals/hidden-keys');
var html = require('../internals/html');
var documentCreateElement = require('../internals/document-create-element');
var sharedKey = require('../internals/shared-key');

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    /* global ActiveXObject */
    activeXDocument = document.domain && new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.github.io/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : defineProperties(result, Properties);
};

},{"../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/object-define-properties":"node_modules/core-js/internals/object-define-properties.js","../internals/enum-bug-keys":"node_modules/core-js/internals/enum-bug-keys.js","../internals/hidden-keys":"node_modules/core-js/internals/hidden-keys.js","../internals/html":"node_modules/core-js/internals/html.js","../internals/document-create-element":"node_modules/core-js/internals/document-create-element.js","../internals/shared-key":"node_modules/core-js/internals/shared-key.js"}],"node_modules/core-js/internals/object-get-own-property-names-external.js":[function(require,module,exports) {
var toIndexedObject = require('../internals/to-indexed-object');
var nativeGetOwnPropertyNames = require('../internals/object-get-own-property-names').f;

var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return nativeGetOwnPropertyNames(it);
  } catch (error) {
    return windowNames.slice();
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]'
    ? getWindowNames(it)
    : nativeGetOwnPropertyNames(toIndexedObject(it));
};

},{"../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/object-get-own-property-names":"node_modules/core-js/internals/object-get-own-property-names.js"}],"node_modules/core-js/internals/well-known-symbol.js":[function(require,module,exports) {

var global = require('../internals/global');
var shared = require('../internals/shared');
var has = require('../internals/has');
var uid = require('../internals/uid');
var NATIVE_SYMBOL = require('../internals/native-symbol');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!has(WellKnownSymbolsStore, name)) {
    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];
    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/shared":"node_modules/core-js/internals/shared.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/uid":"node_modules/core-js/internals/uid.js","../internals/native-symbol":"node_modules/core-js/internals/native-symbol.js","../internals/use-symbol-as-uid":"node_modules/core-js/internals/use-symbol-as-uid.js"}],"node_modules/core-js/internals/well-known-symbol-wrapped.js":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');

exports.f = wellKnownSymbol;

},{"../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/define-well-known-symbol.js":[function(require,module,exports) {
var path = require('../internals/path');
var has = require('../internals/has');
var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');
var defineProperty = require('../internals/object-define-property').f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};

},{"../internals/path":"node_modules/core-js/internals/path.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/well-known-symbol-wrapped":"node_modules/core-js/internals/well-known-symbol-wrapped.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js"}],"node_modules/core-js/internals/set-to-string-tag.js":[function(require,module,exports) {
var defineProperty = require('../internals/object-define-property').f;
var has = require('../internals/has');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};

},{"../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/a-function.js":[function(require,module,exports) {
module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};

},{}],"node_modules/core-js/internals/function-bind-context.js":[function(require,module,exports) {
var aFunction = require('../internals/a-function');

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"../internals/a-function":"node_modules/core-js/internals/a-function.js"}],"node_modules/core-js/internals/array-species-create.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var isArray = require('../internals/is-array');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/is-array":"node_modules/core-js/internals/is-array.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/array-iteration.js":[function(require,module,exports) {
var bind = require('../internals/function-bind-context');
var IndexedObject = require('../internals/indexed-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var arraySpeciesCreate = require('../internals/array-species-create');

var push = [].push;

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push.call(target, value); // filter
        } else if (IS_EVERY) return false;  // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6)
};

},{"../internals/function-bind-context":"node_modules/core-js/internals/function-bind-context.js","../internals/indexed-object":"node_modules/core-js/internals/indexed-object.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/array-species-create":"node_modules/core-js/internals/array-species-create.js"}],"node_modules/core-js/modules/es.symbol.js":[function(require,module,exports) {

'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var getBuiltIn = require('../internals/get-built-in');
var IS_PURE = require('../internals/is-pure');
var DESCRIPTORS = require('../internals/descriptors');
var NATIVE_SYMBOL = require('../internals/native-symbol');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');
var fails = require('../internals/fails');
var has = require('../internals/has');
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var anObject = require('../internals/an-object');
var toObject = require('../internals/to-object');
var toIndexedObject = require('../internals/to-indexed-object');
var toPrimitive = require('../internals/to-primitive');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var nativeObjectCreate = require('../internals/object-create');
var objectKeys = require('../internals/object-keys');
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var shared = require('../internals/shared');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');
var uid = require('../internals/uid');
var wellKnownSymbol = require('../internals/well-known-symbol');
var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
var setToStringTag = require('../internals/set-to-string-tag');
var InternalStateModule = require('../internals/internal-state');
var $forEach = require('../internals/array-iteration').forEach;

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var $stringify = getBuiltIn('JSON', 'stringify');
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');
var WellKnownSymbolsStore = shared('wks');
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var isSymbol = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return Object(it) instanceof $Symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPrimitive(P, true);
  anObject(Attributes);
  if (has(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(O, key, Attributes);
  } return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPrimitive(V, true);
  var enumerable = nativePropertyIsEnumerable.call(this, P);
  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPrimitive(P, true);
  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
  });
  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
      result.push(AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.github.io/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return getInternalState(this).tag;
  });

  redefine($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }
}

$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
  Symbol: $Symbol
});

$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});

$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  // `Symbol.for` method
  // https://tc39.github.io/ecma262/#sec-symbol.for
  'for': function (key) {
    var string = String(key);
    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = $Symbol(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  },
  // `Symbol.keyFor` method
  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  },
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.github.io/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames,
  // `Object.getOwnPropertySymbols` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return getOwnPropertySymbolsModule.f(toObject(it));
  }
});

// `JSON.stringify` method behavior with symbols
// https://tc39.github.io/ecma262/#sec-json.stringify
if ($stringify) {
  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
    var symbol = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    return $stringify([symbol]) != '[null]'
      // WebKit converts symbol values to JSON as null
      || $stringify({ a: symbol }) != '{}'
      // V8 throws on boxed symbols
      || $stringify(Object(symbol)) != '{}';
  });

  $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
    // eslint-disable-next-line no-unused-vars
    stringify: function stringify(it, replacer, space) {
      var args = [it];
      var index = 1;
      var $replacer;
      while (arguments.length > index) args.push(arguments[index++]);
      $replacer = replacer;
      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
      if (!isArray(replacer)) replacer = function (key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return $stringify.apply(null, args);
    }
  });
}

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
  createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
}
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/get-built-in":"node_modules/core-js/internals/get-built-in.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/native-symbol":"node_modules/core-js/internals/native-symbol.js","../internals/use-symbol-as-uid":"node_modules/core-js/internals/use-symbol-as-uid.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/is-array":"node_modules/core-js/internals/is-array.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js","../internals/object-create":"node_modules/core-js/internals/object-create.js","../internals/object-keys":"node_modules/core-js/internals/object-keys.js","../internals/object-get-own-property-names":"node_modules/core-js/internals/object-get-own-property-names.js","../internals/object-get-own-property-names-external":"node_modules/core-js/internals/object-get-own-property-names-external.js","../internals/object-get-own-property-symbols":"node_modules/core-js/internals/object-get-own-property-symbols.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/object-property-is-enumerable":"node_modules/core-js/internals/object-property-is-enumerable.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/shared":"node_modules/core-js/internals/shared.js","../internals/shared-key":"node_modules/core-js/internals/shared-key.js","../internals/hidden-keys":"node_modules/core-js/internals/hidden-keys.js","../internals/uid":"node_modules/core-js/internals/uid.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/well-known-symbol-wrapped":"node_modules/core-js/internals/well-known-symbol-wrapped.js","../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js","../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js"}],"node_modules/core-js/modules/es.symbol.async-iterator.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.asyncIterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.asynciterator
defineWellKnownSymbol('asyncIterator');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.description.js":[function(require,module,exports) {

// `Symbol.prototype.description` getter
// https://tc39.github.io/ecma262/#sec-symbol.prototype.description
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var has = require('../internals/has');
var isObject = require('../internals/is-object');
var defineProperty = require('../internals/object-define-property').f;
var copyConstructorProperties = require('../internals/copy-constructor-properties');

var NativeSymbol = global.Symbol;

if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
    var result = this instanceof SymbolWrapper
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };
  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
  symbolPrototype.constructor = SymbolWrapper;

  var symbolToString = symbolPrototype.toString;
  var native = String(NativeSymbol('test')) == 'Symbol(test)';
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  defineProperty(symbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = isObject(this) ? this.valueOf() : this;
      var string = symbolToString.call(symbol);
      if (has(EmptyStringDescriptionStore, symbol)) return '';
      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  $({ global: true, forced: true }, {
    Symbol: SymbolWrapper
  });
}

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/copy-constructor-properties":"node_modules/core-js/internals/copy-constructor-properties.js"}],"node_modules/core-js/modules/es.symbol.has-instance.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.hasInstance` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.hasinstance
defineWellKnownSymbol('hasInstance');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.is-concat-spreadable.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.isConcatSpreadable` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable
defineWellKnownSymbol('isConcatSpreadable');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.iterator.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.iterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.match.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.match` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.match
defineWellKnownSymbol('match');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.match-all.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.matchAll` well-known symbol
defineWellKnownSymbol('matchAll');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.replace.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.replace` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.replace
defineWellKnownSymbol('replace');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.search.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.search` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.search
defineWellKnownSymbol('search');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.species.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.species` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.species
defineWellKnownSymbol('species');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.split.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.split` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.split
defineWellKnownSymbol('split');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.to-primitive.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.toPrimitive` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.toprimitive
defineWellKnownSymbol('toPrimitive');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.to-string-tag.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.toStringTag` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.tostringtag
defineWellKnownSymbol('toStringTag');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.unscopables.js":[function(require,module,exports) {
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.unscopables` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.unscopables
defineWellKnownSymbol('unscopables');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/internals/object-assign.js":[function(require,module,exports) {
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var objectKeys = require('../internals/object-keys');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var toObject = require('../internals/to-object');
var IndexedObject = require('../internals/indexed-object');

var nativeAssign = Object.assign;
var defineProperty = Object.defineProperty;

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
module.exports = !nativeAssign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
    }
  } return T;
} : nativeAssign;

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/object-keys":"node_modules/core-js/internals/object-keys.js","../internals/object-get-own-property-symbols":"node_modules/core-js/internals/object-get-own-property-symbols.js","../internals/object-property-is-enumerable":"node_modules/core-js/internals/object-property-is-enumerable.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/indexed-object":"node_modules/core-js/internals/indexed-object.js"}],"node_modules/core-js/modules/es.object.assign.js":[function(require,module,exports) {
var $ = require('../internals/export');
var assign = require('../internals/object-assign');

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
  assign: assign
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/object-assign":"node_modules/core-js/internals/object-assign.js"}],"node_modules/core-js/modules/es.object.create.js":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var create = require('../internals/object-create');

// `Object.create` method
// https://tc39.github.io/ecma262/#sec-object.create
$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {
  create: create
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-create":"node_modules/core-js/internals/object-create.js"}],"node_modules/core-js/modules/es.object.define-property.js":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var objectDefinePropertyModile = require('../internals/object-define-property');

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {
  defineProperty: objectDefinePropertyModile.f
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js"}],"node_modules/core-js/modules/es.object.define-properties.js":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var defineProperties = require('../internals/object-define-properties');

// `Object.defineProperties` method
// https://tc39.github.io/ecma262/#sec-object.defineproperties
$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {
  defineProperties: defineProperties
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-define-properties":"node_modules/core-js/internals/object-define-properties.js"}],"node_modules/core-js/internals/object-to-array.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var objectKeys = require('../internals/object-keys');
var toIndexedObject = require('../internals/to-indexed-object');
var propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;

// `Object.{ entries, values }` methods implementation
var createMethod = function (TO_ENTRIES) {
  return function (it) {
    var O = toIndexedObject(it);
    var keys = objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {
        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

module.exports = {
  // `Object.entries` method
  // https://tc39.github.io/ecma262/#sec-object.entries
  entries: createMethod(true),
  // `Object.values` method
  // https://tc39.github.io/ecma262/#sec-object.values
  values: createMethod(false)
};

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-keys":"node_modules/core-js/internals/object-keys.js","../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/object-property-is-enumerable":"node_modules/core-js/internals/object-property-is-enumerable.js"}],"node_modules/core-js/modules/es.object.entries.js":[function(require,module,exports) {
var $ = require('../internals/export');
var $entries = require('../internals/object-to-array').entries;

// `Object.entries` method
// https://tc39.github.io/ecma262/#sec-object.entries
$({ target: 'Object', stat: true }, {
  entries: function entries(O) {
    return $entries(O);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/object-to-array":"node_modules/core-js/internals/object-to-array.js"}],"node_modules/core-js/internals/freezing.js":[function(require,module,exports) {
var fails = require('../internals/fails');

module.exports = !fails(function () {
  return Object.isExtensible(Object.preventExtensions({}));
});

},{"../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/internals/internal-metadata.js":[function(require,module,exports) {
var hiddenKeys = require('../internals/hidden-keys');
var isObject = require('../internals/is-object');
var has = require('../internals/has');
var defineProperty = require('../internals/object-define-property').f;
var uid = require('../internals/uid');
var FREEZING = require('../internals/freezing');

var METADATA = uid('meta');
var id = 0;

var isExtensible = Object.isExtensible || function () {
  return true;
};

var setMetadata = function (it) {
  defineProperty(it, METADATA, { value: {
    objectID: 'O' + ++id, // object ID
    weakData: {}          // weak collections IDs
  } });
};

var fastKey = function (it, create) {
  // return a primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMetadata(it);
  // return object ID
  } return it[METADATA].objectID;
};

var getWeakData = function (it, create) {
  if (!has(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMetadata(it);
  // return the store of weak collections IDs
  } return it[METADATA].weakData;
};

// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
  return it;
};

var meta = module.exports = {
  REQUIRED: false,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};

hiddenKeys[METADATA] = true;

},{"../internals/hidden-keys":"node_modules/core-js/internals/hidden-keys.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/uid":"node_modules/core-js/internals/uid.js","../internals/freezing":"node_modules/core-js/internals/freezing.js"}],"node_modules/core-js/modules/es.object.freeze.js":[function(require,module,exports) {
var $ = require('../internals/export');
var FREEZING = require('../internals/freezing');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');
var onFreeze = require('../internals/internal-metadata').onFreeze;

var nativeFreeze = Object.freeze;
var FAILS_ON_PRIMITIVES = fails(function () { nativeFreeze(1); });

// `Object.freeze` method
// https://tc39.github.io/ecma262/#sec-object.freeze
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  freeze: function freeze(it) {
    return nativeFreeze && isObject(it) ? nativeFreeze(onFreeze(it)) : it;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/freezing":"node_modules/core-js/internals/freezing.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/internal-metadata":"node_modules/core-js/internals/internal-metadata.js"}],"node_modules/core-js/internals/is-array-iterator-method.js":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var Iterators = require('../internals/iterators');

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};

},{"../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/iterators":"node_modules/core-js/internals/hidden-keys.js"}],"node_modules/core-js/internals/to-string-tag-support.js":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';

},{"../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/classof.js":[function(require,module,exports) {
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classofRaw = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};

},{"../internals/to-string-tag-support":"node_modules/core-js/internals/to-string-tag-support.js","../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/get-iterator-method.js":[function(require,module,exports) {
var classof = require('../internals/classof');
var Iterators = require('../internals/iterators');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"../internals/classof":"node_modules/core-js/internals/classof.js","../internals/iterators":"node_modules/core-js/internals/hidden-keys.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/call-with-safe-iteration-closing.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (error) {
    var returnMethod = iterator['return'];
    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
    throw error;
  }
};

},{"../internals/an-object":"node_modules/core-js/internals/an-object.js"}],"node_modules/core-js/internals/iterate.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var toLength = require('../internals/to-length');
var bind = require('../internals/function-bind-context');
var getIteratorMethod = require('../internals/get-iterator-method');
var callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
  var iterator, iterFn, index, length, result, next, step;

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = toLength(iterable.length); length > index; index++) {
        result = AS_ENTRIES
          ? boundFunction(anObject(step = iterable[index])[0], step[1])
          : boundFunction(iterable[index]);
        if (result && result instanceof Result) return result;
      } return new Result(false);
    }
    iterator = iterFn.call(iterable);
  }

  next = iterator.next;
  while (!(step = next.call(iterator)).done) {
    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
    if (typeof result == 'object' && result && result instanceof Result) return result;
  } return new Result(false);
};

iterate.stop = function (result) {
  return new Result(true, result);
};

},{"../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/is-array-iterator-method":"node_modules/core-js/internals/is-array-iterator-method.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/function-bind-context":"node_modules/core-js/internals/function-bind-context.js","../internals/get-iterator-method":"node_modules/core-js/internals/get-iterator-method.js","../internals/call-with-safe-iteration-closing":"node_modules/core-js/internals/call-with-safe-iteration-closing.js"}],"node_modules/core-js/internals/create-property.js":[function(require,module,exports) {
'use strict';
var toPrimitive = require('../internals/to-primitive');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = function (object, key, value) {
  var propertyKey = toPrimitive(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};

},{"../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js"}],"node_modules/core-js/modules/es.object.from-entries.js":[function(require,module,exports) {
var $ = require('../internals/export');
var iterate = require('../internals/iterate');
var createProperty = require('../internals/create-property');

// `Object.fromEntries` method
// https://github.com/tc39/proposal-object-from-entries
$({ target: 'Object', stat: true }, {
  fromEntries: function fromEntries(iterable) {
    var obj = {};
    iterate(iterable, function (k, v) {
      createProperty(obj, k, v);
    }, undefined, true);
    return obj;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/iterate":"node_modules/core-js/internals/iterate.js","../internals/create-property":"node_modules/core-js/internals/create-property.js"}],"node_modules/core-js/modules/es.object.get-own-property-descriptor.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var toIndexedObject = require('../internals/to-indexed-object');
var nativeGetOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var DESCRIPTORS = require('../internals/descriptors');

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });
var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js"}],"node_modules/core-js/modules/es.object.get-own-property-descriptors.js":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var ownKeys = require('../internals/own-keys');
var toIndexedObject = require('../internals/to-indexed-object');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var createProperty = require('../internals/create-property');

// `Object.getOwnPropertyDescriptors` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIndexedObject(object);
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var keys = ownKeys(O);
    var result = {};
    var index = 0;
    var key, descriptor;
    while (keys.length > index) {
      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
      if (descriptor !== undefined) createProperty(result, key, descriptor);
    }
    return result;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/own-keys":"node_modules/core-js/internals/own-keys.js","../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/create-property":"node_modules/core-js/internals/create-property.js"}],"node_modules/core-js/modules/es.object.get-own-property-names.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var nativeGetOwnPropertyNames = require('../internals/object-get-own-property-names-external').f;

var FAILS_ON_PRIMITIVES = fails(function () { return !Object.getOwnPropertyNames(1); });

// `Object.getOwnPropertyNames` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  getOwnPropertyNames: nativeGetOwnPropertyNames
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/object-get-own-property-names-external":"node_modules/core-js/internals/object-get-own-property-names-external.js"}],"node_modules/core-js/internals/correct-prototype-getter.js":[function(require,module,exports) {
var fails = require('../internals/fails');

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});

},{"../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/internals/object-get-prototype-of.js":[function(require,module,exports) {
var has = require('../internals/has');
var toObject = require('../internals/to-object');
var sharedKey = require('../internals/shared-key');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};

},{"../internals/has":"node_modules/core-js/internals/has.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/shared-key":"node_modules/core-js/internals/shared-key.js","../internals/correct-prototype-getter":"node_modules/core-js/internals/correct-prototype-getter.js"}],"node_modules/core-js/modules/es.object.get-prototype-of.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var toObject = require('../internals/to-object');
var nativeGetPrototypeOf = require('../internals/object-get-prototype-of');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetPrototypeOf(1); });

// `Object.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.getprototypeof
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf(it) {
    return nativeGetPrototypeOf(toObject(it));
  }
});


},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js","../internals/correct-prototype-getter":"node_modules/core-js/internals/correct-prototype-getter.js"}],"node_modules/core-js/internals/same-value.js":[function(require,module,exports) {
// `SameValue` abstract operation
// https://tc39.github.io/ecma262/#sec-samevalue
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],"node_modules/core-js/modules/es.object.is.js":[function(require,module,exports) {
var $ = require('../internals/export');
var is = require('../internals/same-value');

// `Object.is` method
// https://tc39.github.io/ecma262/#sec-object.is
$({ target: 'Object', stat: true }, {
  is: is
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/same-value":"node_modules/core-js/internals/same-value.js"}],"node_modules/core-js/modules/es.object.is-extensible.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');

var nativeIsExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES = fails(function () { nativeIsExtensible(1); });

// `Object.isExtensible` method
// https://tc39.github.io/ecma262/#sec-object.isextensible
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  isExtensible: function isExtensible(it) {
    return isObject(it) ? nativeIsExtensible ? nativeIsExtensible(it) : true : false;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/is-object":"node_modules/core-js/internals/is-object.js"}],"node_modules/core-js/modules/es.object.is-frozen.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');

var nativeIsFrozen = Object.isFrozen;
var FAILS_ON_PRIMITIVES = fails(function () { nativeIsFrozen(1); });

// `Object.isFrozen` method
// https://tc39.github.io/ecma262/#sec-object.isfrozen
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  isFrozen: function isFrozen(it) {
    return isObject(it) ? nativeIsFrozen ? nativeIsFrozen(it) : false : true;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/is-object":"node_modules/core-js/internals/is-object.js"}],"node_modules/core-js/modules/es.object.is-sealed.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isObject = require('../internals/is-object');

var nativeIsSealed = Object.isSealed;
var FAILS_ON_PRIMITIVES = fails(function () { nativeIsSealed(1); });

// `Object.isSealed` method
// https://tc39.github.io/ecma262/#sec-object.issealed
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  isSealed: function isSealed(it) {
    return isObject(it) ? nativeIsSealed ? nativeIsSealed(it) : false : true;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/is-object":"node_modules/core-js/internals/is-object.js"}],"node_modules/core-js/modules/es.object.keys.js":[function(require,module,exports) {
var $ = require('../internals/export');
var toObject = require('../internals/to-object');
var nativeKeys = require('../internals/object-keys');
var fails = require('../internals/fails');

var FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/object-keys":"node_modules/core-js/internals/object-keys.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.object.prevent-extensions.js":[function(require,module,exports) {
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var onFreeze = require('../internals/internal-metadata').onFreeze;
var FREEZING = require('../internals/freezing');
var fails = require('../internals/fails');

var nativePreventExtensions = Object.preventExtensions;
var FAILS_ON_PRIMITIVES = fails(function () { nativePreventExtensions(1); });

// `Object.preventExtensions` method
// https://tc39.github.io/ecma262/#sec-object.preventextensions
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  preventExtensions: function preventExtensions(it) {
    return nativePreventExtensions && isObject(it) ? nativePreventExtensions(onFreeze(it)) : it;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/internal-metadata":"node_modules/core-js/internals/internal-metadata.js","../internals/freezing":"node_modules/core-js/internals/freezing.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.object.seal.js":[function(require,module,exports) {
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var onFreeze = require('../internals/internal-metadata').onFreeze;
var FREEZING = require('../internals/freezing');
var fails = require('../internals/fails');

var nativeSeal = Object.seal;
var FAILS_ON_PRIMITIVES = fails(function () { nativeSeal(1); });

// `Object.seal` method
// https://tc39.github.io/ecma262/#sec-object.seal
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  seal: function seal(it) {
    return nativeSeal && isObject(it) ? nativeSeal(onFreeze(it)) : it;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/internal-metadata":"node_modules/core-js/internals/internal-metadata.js","../internals/freezing":"node_modules/core-js/internals/freezing.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/internals/a-possible-prototype.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');

module.exports = function (it) {
  if (!isObject(it) && it !== null) {
    throw TypeError("Can't set " + String(it) + ' as a prototype');
  } return it;
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js"}],"node_modules/core-js/internals/object-set-prototype-of.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');

// `Object.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);

},{"../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/a-possible-prototype":"node_modules/core-js/internals/a-possible-prototype.js"}],"node_modules/core-js/modules/es.object.set-prototype-of.js":[function(require,module,exports) {
var $ = require('../internals/export');
var setPrototypeOf = require('../internals/object-set-prototype-of');

// `Object.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.setprototypeof
$({ target: 'Object', stat: true }, {
  setPrototypeOf: setPrototypeOf
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/object-set-prototype-of":"node_modules/core-js/internals/object-set-prototype-of.js"}],"node_modules/core-js/modules/es.object.values.js":[function(require,module,exports) {
var $ = require('../internals/export');
var $values = require('../internals/object-to-array').values;

// `Object.values` method
// https://tc39.github.io/ecma262/#sec-object.values
$({ target: 'Object', stat: true }, {
  values: function values(O) {
    return $values(O);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/object-to-array":"node_modules/core-js/internals/object-to-array.js"}],"node_modules/core-js/internals/object-to-string.js":[function(require,module,exports) {
'use strict';
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classof = require('../internals/classof');

// `Object.prototype.toString` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};

},{"../internals/to-string-tag-support":"node_modules/core-js/internals/to-string-tag-support.js","../internals/classof":"node_modules/core-js/internals/classof.js"}],"node_modules/core-js/modules/es.object.to-string.js":[function(require,module,exports) {
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var redefine = require('../internals/redefine');
var toString = require('../internals/object-to-string');

// `Object.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  redefine(Object.prototype, 'toString', toString, { unsafe: true });
}

},{"../internals/to-string-tag-support":"node_modules/core-js/internals/to-string-tag-support.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/object-to-string":"node_modules/core-js/internals/object-to-string.js"}],"node_modules/core-js/internals/object-prototype-accessors-forced.js":[function(require,module,exports) {

'use strict';
var IS_PURE = require('../internals/is-pure');
var global = require('../internals/global');
var fails = require('../internals/fails');

// Forced replacement object prototype accessors methods
module.exports = IS_PURE || !fails(function () {
  var key = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, key, function () { /* empty */ });
  delete global[key];
});

},{"../internals/is-pure":"node_modules/core-js/internals/is-pure.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.object.define-getter.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/object-prototype-accessors-forced');
var toObject = require('../internals/to-object');
var aFunction = require('../internals/a-function');
var definePropertyModule = require('../internals/object-define-property');

// `Object.prototype.__defineGetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__defineGetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __defineGetter__: function __defineGetter__(P, getter) {
      definePropertyModule.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
    }
  });
}

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-prototype-accessors-forced":"node_modules/core-js/internals/object-prototype-accessors-forced.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/a-function":"node_modules/core-js/internals/a-function.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js"}],"node_modules/core-js/modules/es.object.define-setter.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/object-prototype-accessors-forced');
var toObject = require('../internals/to-object');
var aFunction = require('../internals/a-function');
var definePropertyModule = require('../internals/object-define-property');

// `Object.prototype.__defineSetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__defineSetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __defineSetter__: function __defineSetter__(P, setter) {
      definePropertyModule.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
    }
  });
}

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-prototype-accessors-forced":"node_modules/core-js/internals/object-prototype-accessors-forced.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/a-function":"node_modules/core-js/internals/a-function.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js"}],"node_modules/core-js/modules/es.object.lookup-getter.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/object-prototype-accessors-forced');
var toObject = require('../internals/to-object');
var toPrimitive = require('../internals/to-primitive');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

// `Object.prototype.__lookupGetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__lookupGetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __lookupGetter__: function __lookupGetter__(P) {
      var O = toObject(this);
      var key = toPrimitive(P, true);
      var desc;
      do {
        if (desc = getOwnPropertyDescriptor(O, key)) return desc.get;
      } while (O = getPrototypeOf(O));
    }
  });
}

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-prototype-accessors-forced":"node_modules/core-js/internals/object-prototype-accessors-forced.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js","../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js"}],"node_modules/core-js/modules/es.object.lookup-setter.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var FORCED = require('../internals/object-prototype-accessors-forced');
var toObject = require('../internals/to-object');
var toPrimitive = require('../internals/to-primitive');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

// `Object.prototype.__lookupSetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__lookupSetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __lookupSetter__: function __lookupSetter__(P) {
      var O = toObject(this);
      var key = toPrimitive(P, true);
      var desc;
      do {
        if (desc = getOwnPropertyDescriptor(O, key)) return desc.set;
      } while (O = getPrototypeOf(O));
    }
  });
}

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-prototype-accessors-forced":"node_modules/core-js/internals/object-prototype-accessors-forced.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js","../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js"}],"node_modules/core-js/internals/function-bind.js":[function(require,module,exports) {
'use strict';
var aFunction = require('../internals/a-function');
var isObject = require('../internals/is-object');

var slice = [].slice;
var factories = {};

var construct = function (C, argsLength, args) {
  if (!(argsLength in factories)) {
    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
  } return factories[argsLength](C, args);
};

// `Function.prototype.bind` method implementation
// https://tc39.github.io/ecma262/#sec-function.prototype.bind
module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = slice.call(arguments, 1);
  var boundFunction = function bound(/* args... */) {
    var args = partArgs.concat(slice.call(arguments));
    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
  };
  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
  return boundFunction;
};

},{"../internals/a-function":"node_modules/core-js/internals/a-function.js","../internals/is-object":"node_modules/core-js/internals/is-object.js"}],"node_modules/core-js/modules/es.function.bind.js":[function(require,module,exports) {
var $ = require('../internals/export');
var bind = require('../internals/function-bind');

// `Function.prototype.bind` method
// https://tc39.github.io/ecma262/#sec-function.prototype.bind
$({ target: 'Function', proto: true }, {
  bind: bind
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/function-bind":"node_modules/core-js/internals/function-bind.js"}],"node_modules/core-js/modules/es.function.name.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var defineProperty = require('../internals/object-define-property').f;

var FunctionPrototype = Function.prototype;
var FunctionPrototypeToString = FunctionPrototype.toString;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// Function instances `.name` property
// https://tc39.github.io/ecma262/#sec-function-instances-name
if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
  defineProperty(FunctionPrototype, NAME, {
    configurable: true,
    get: function () {
      try {
        return FunctionPrototypeToString.call(this).match(nameRE)[1];
      } catch (error) {
        return '';
      }
    }
  });
}

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js"}],"node_modules/core-js/modules/es.function.has-instance.js":[function(require,module,exports) {
'use strict';
var isObject = require('../internals/is-object');
var definePropertyModule = require('../internals/object-define-property');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var wellKnownSymbol = require('../internals/well-known-symbol');

var HAS_INSTANCE = wellKnownSymbol('hasInstance');
var FunctionPrototype = Function.prototype;

// `Function.prototype[@@hasInstance]` method
// https://tc39.github.io/ecma262/#sec-function.prototype-@@hasinstance
if (!(HAS_INSTANCE in FunctionPrototype)) {
  definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, { value: function (O) {
    if (typeof this != 'function' || !isObject(O)) return false;
    if (!isObject(this.prototype)) return O instanceof this;
    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
    while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
    return false;
  } });
}

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/modules/es.global-this.js":[function(require,module,exports) {

var $ = require('../internals/export');
var global = require('../internals/global');

// `globalThis` object
// https://github.com/tc39/proposal-global
$({ global: true }, {
  globalThis: global
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/internals/array-from.js":[function(require,module,exports) {
'use strict';
var bind = require('../internals/function-bind-context');
var toObject = require('../internals/to-object');
var callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var toLength = require('../internals/to-length');
var createProperty = require('../internals/create-property');
var getIteratorMethod = require('../internals/get-iterator-method');

// `Array.from` method implementation
// https://tc39.github.io/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var C = typeof this == 'function' ? this : Array;
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = iteratorMethod.call(O);
    next = iterator.next;
    result = new C();
    for (;!(step = next.call(iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = toLength(O.length);
    result = new C(length);
    for (;length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }
  result.length = index;
  return result;
};

},{"../internals/function-bind-context":"node_modules/core-js/internals/function-bind-context.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/call-with-safe-iteration-closing":"node_modules/core-js/internals/call-with-safe-iteration-closing.js","../internals/is-array-iterator-method":"node_modules/core-js/internals/is-array-iterator-method.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/create-property":"node_modules/core-js/internals/create-property.js","../internals/get-iterator-method":"node_modules/core-js/internals/get-iterator-method.js"}],"node_modules/core-js/internals/check-correctness-of-iteration.js":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};

},{"../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/modules/es.array.from.js":[function(require,module,exports) {
var $ = require('../internals/export');
var from = require('../internals/array-from');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');

var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
  Array.from(iterable);
});

// `Array.from` method
// https://tc39.github.io/ecma262/#sec-array.from
$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
  from: from
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-from":"node_modules/core-js/internals/array-from.js","../internals/check-correctness-of-iteration":"node_modules/core-js/internals/check-correctness-of-iteration.js"}],"node_modules/core-js/modules/es.array.is-array.js":[function(require,module,exports) {
var $ = require('../internals/export');
var isArray = require('../internals/is-array');

// `Array.isArray` method
// https://tc39.github.io/ecma262/#sec-array.isarray
$({ target: 'Array', stat: true }, {
  isArray: isArray
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/is-array":"node_modules/core-js/internals/is-array.js"}],"node_modules/core-js/modules/es.array.of.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var createProperty = require('../internals/create-property');

var ISNT_GENERIC = fails(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
});

// `Array.of` method
// https://tc39.github.io/ecma262/#sec-array.of
// WebKit Array.of isn't generic
$({ target: 'Array', stat: true, forced: ISNT_GENERIC }, {
  of: function of(/* ...args */) {
    var index = 0;
    var argumentsLength = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(argumentsLength);
    while (argumentsLength > index) createProperty(result, index, arguments[index++]);
    result.length = argumentsLength;
    return result;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/create-property":"node_modules/core-js/internals/create-property.js"}],"node_modules/core-js/internals/engine-user-agent.js":[function(require,module,exports) {
var getBuiltIn = require('../internals/get-built-in');

module.exports = getBuiltIn('navigator', 'userAgent') || '';

},{"../internals/get-built-in":"node_modules/core-js/internals/get-built-in.js"}],"node_modules/core-js/internals/engine-v8-version.js":[function(require,module,exports) {


var global = require('../internals/global');
var userAgent = require('../internals/engine-user-agent');

var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  version = match[0] + match[1];
} else if (userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = match[1];
  }
}

module.exports = version && +version;

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/engine-user-agent":"node_modules/core-js/internals/engine-user-agent.js"}],"node_modules/core-js/internals/array-method-has-species-support.js":[function(require,module,exports) {
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};

},{"../internals/fails":"node_modules/core-js/internals/fails.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/engine-v8-version":"node_modules/core-js/internals/engine-v8-version.js"}],"node_modules/core-js/modules/es.array.concat.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var createProperty = require('../internals/create-property');
var arraySpeciesCreate = require('../internals/array-species-create');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.github.io/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, forced: FORCED }, {
  concat: function concat(arg) { // eslint-disable-line no-unused-vars
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = toLength(E.length);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/is-array":"node_modules/core-js/internals/is-array.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/create-property":"node_modules/core-js/internals/create-property.js","../internals/array-species-create":"node_modules/core-js/internals/array-species-create.js","../internals/array-method-has-species-support":"node_modules/core-js/internals/array-method-has-species-support.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/engine-v8-version":"node_modules/core-js/internals/engine-v8-version.js"}],"node_modules/core-js/internals/array-copy-within.js":[function(require,module,exports) {
'use strict';
var toObject = require('../internals/to-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');

var min = Math.min;

// `Array.prototype.copyWithin` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-absolute-index":"node_modules/core-js/internals/to-absolute-index.js","../internals/to-length":"node_modules/core-js/internals/to-length.js"}],"node_modules/core-js/internals/add-to-unscopables.js":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');
var create = require('../internals/object-create');
var definePropertyModule = require('../internals/object-define-property');

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};

},{"../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/object-create":"node_modules/core-js/internals/object-create.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js"}],"node_modules/core-js/modules/es.array.copy-within.js":[function(require,module,exports) {
var $ = require('../internals/export');
var copyWithin = require('../internals/array-copy-within');
var addToUnscopables = require('../internals/add-to-unscopables');

// `Array.prototype.copyWithin` method
// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
$({ target: 'Array', proto: true }, {
  copyWithin: copyWithin
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('copyWithin');

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-copy-within":"node_modules/core-js/internals/array-copy-within.js","../internals/add-to-unscopables":"node_modules/core-js/internals/add-to-unscopables.js"}],"node_modules/core-js/internals/array-method-is-strict.js":[function(require,module,exports) {
'use strict';
var fails = require('../internals/fails');

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call,no-throw-literal
    method.call(null, argument || function () { throw 1; }, 1);
  });
};

},{"../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/internals/array-method-uses-to-length.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var has = require('../internals/has');

var defineProperty = Object.defineProperty;
var cache = {};

var thrower = function (it) { throw it; };

module.exports = function (METHOD_NAME, options) {
  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
  if (!options) options = {};
  var method = [][METHOD_NAME];
  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
  var argument0 = has(options, 0) ? options[0] : thrower;
  var argument1 = has(options, 1) ? options[1] : undefined;

  return cache[METHOD_NAME] = !!method && !fails(function () {
    if (ACCESSORS && !DESCRIPTORS) return true;
    var O = { length: -1 };

    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
    else O[1] = 1;

    method.call(O, argument0, argument1);
  });
};

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/has":"node_modules/core-js/internals/has.js"}],"node_modules/core-js/modules/es.array.every.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $every = require('../internals/array-iteration').every;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var STRICT_METHOD = arrayMethodIsStrict('every');
var USES_TO_LENGTH = arrayMethodUsesToLength('every');

// `Array.prototype.every` method
// https://tc39.github.io/ecma262/#sec-array.prototype.every
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js","../internals/array-method-is-strict":"node_modules/core-js/internals/array-method-is-strict.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/internals/array-fill.js":[function(require,module,exports) {
'use strict';
var toObject = require('../internals/to-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');

// `Array.prototype.fill` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-absolute-index":"node_modules/core-js/internals/to-absolute-index.js","../internals/to-length":"node_modules/core-js/internals/to-length.js"}],"node_modules/core-js/modules/es.array.fill.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fill = require('../internals/array-fill');
var addToUnscopables = require('../internals/add-to-unscopables');

// `Array.prototype.fill` method
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
$({ target: 'Array', proto: true }, {
  fill: fill
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('fill');

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-fill":"node_modules/core-js/internals/array-fill.js","../internals/add-to-unscopables":"node_modules/core-js/internals/add-to-unscopables.js"}],"node_modules/core-js/modules/es.array.filter.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $filter = require('../internals/array-iteration').filter;
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
// Edge 14- issue
var USES_TO_LENGTH = arrayMethodUsesToLength('filter');

// `Array.prototype.filter` method
// https://tc39.github.io/ecma262/#sec-array.prototype.filter
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js","../internals/array-method-has-species-support":"node_modules/core-js/internals/array-method-has-species-support.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/modules/es.array.find.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $find = require('../internals/array-iteration').find;
var addToUnscopables = require('../internals/add-to-unscopables');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var FIND = 'find';
var SKIPS_HOLES = true;

var USES_TO_LENGTH = arrayMethodUsesToLength(FIND);

// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.github.io/ecma262/#sec-array.prototype.find
$({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND);

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js","../internals/add-to-unscopables":"node_modules/core-js/internals/add-to-unscopables.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/modules/es.array.find-index.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $findIndex = require('../internals/array-iteration').findIndex;
var addToUnscopables = require('../internals/add-to-unscopables');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;

var USES_TO_LENGTH = arrayMethodUsesToLength(FIND_INDEX);

// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

// `Array.prototype.findIndex` method
// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
$({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND_INDEX);

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js","../internals/add-to-unscopables":"node_modules/core-js/internals/add-to-unscopables.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/internals/flatten-into-array.js":[function(require,module,exports) {
'use strict';
var isArray = require('../internals/is-array');
var toLength = require('../internals/to-length');
var bind = require('../internals/function-bind-context');

// `FlattenIntoArray` abstract operation
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
  var element;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      if (depth > 0 && isArray(element)) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
};

module.exports = flattenIntoArray;

},{"../internals/is-array":"node_modules/core-js/internals/is-array.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/function-bind-context":"node_modules/core-js/internals/function-bind-context.js"}],"node_modules/core-js/modules/es.array.flat.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var flattenIntoArray = require('../internals/flatten-into-array');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var toInteger = require('../internals/to-integer');
var arraySpeciesCreate = require('../internals/array-species-create');

// `Array.prototype.flat` method
// https://github.com/tc39/proposal-flatMap
$({ target: 'Array', proto: true }, {
  flat: function flat(/* depthArg = 1 */) {
    var depthArg = arguments.length ? arguments[0] : undefined;
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/flatten-into-array":"node_modules/core-js/internals/flatten-into-array.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/to-integer":"node_modules/core-js/internals/to-integer.js","../internals/array-species-create":"node_modules/core-js/internals/array-species-create.js"}],"node_modules/core-js/modules/es.array.flat-map.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var flattenIntoArray = require('../internals/flatten-into-array');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var aFunction = require('../internals/a-function');
var arraySpeciesCreate = require('../internals/array-species-create');

// `Array.prototype.flatMap` method
// https://github.com/tc39/proposal-flatMap
$({ target: 'Array', proto: true }, {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A;
    aFunction(callbackfn);
    A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    return A;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/flatten-into-array":"node_modules/core-js/internals/flatten-into-array.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/a-function":"node_modules/core-js/internals/a-function.js","../internals/array-species-create":"node_modules/core-js/internals/array-species-create.js"}],"node_modules/core-js/internals/array-for-each.js":[function(require,module,exports) {
'use strict';
var $forEach = require('../internals/array-iteration').forEach;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var STRICT_METHOD = arrayMethodIsStrict('forEach');
var USES_TO_LENGTH = arrayMethodUsesToLength('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
module.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
} : [].forEach;

},{"../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js","../internals/array-method-is-strict":"node_modules/core-js/internals/array-method-is-strict.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/modules/es.array.for-each.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var forEach = require('../internals/array-for-each');

// `Array.prototype.forEach` method
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {
  forEach: forEach
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-for-each":"node_modules/core-js/internals/array-for-each.js"}],"node_modules/core-js/modules/es.array.includes.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $includes = require('../internals/array-includes').includes;
var addToUnscopables = require('../internals/add-to-unscopables');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

// `Array.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-array.prototype.includes
$({ target: 'Array', proto: true, forced: !USES_TO_LENGTH }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-includes":"node_modules/core-js/internals/array-includes.js","../internals/add-to-unscopables":"node_modules/core-js/internals/add-to-unscopables.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/modules/es.array.index-of.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $indexOf = require('../internals/array-includes').indexOf;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var nativeIndexOf = [].indexOf;

var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('indexOf');
var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

// `Array.prototype.indexOf` method
// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? nativeIndexOf.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-includes":"node_modules/core-js/internals/array-includes.js","../internals/array-method-is-strict":"node_modules/core-js/internals/array-method-is-strict.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/modules/es.array.join.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var IndexedObject = require('../internals/indexed-object');
var toIndexedObject = require('../internals/to-indexed-object');
var arrayMethodIsStrict = require('../internals/array-method-is-strict');

var nativeJoin = [].join;

var ES3_STRINGS = IndexedObject != Object;
var STRICT_METHOD = arrayMethodIsStrict('join', ',');

// `Array.prototype.join` method
// https://tc39.github.io/ecma262/#sec-array.prototype.join
$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {
  join: function join(separator) {
    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/indexed-object":"node_modules/core-js/internals/indexed-object.js","../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/array-method-is-strict":"node_modules/core-js/internals/array-method-is-strict.js"}],"node_modules/core-js/internals/array-last-index-of.js":[function(require,module,exports) {
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var min = Math.min;
var nativeLastIndexOf = [].lastIndexOf;
var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf');
// For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method
var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });
var FORCED = NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH;

// `Array.prototype.lastIndexOf` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
module.exports = FORCED ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
  // convert -0 to +0
  if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;
  var O = toIndexedObject(this);
  var length = toLength(O.length);
  var index = length - 1;
  if (arguments.length > 1) index = min(index, toInteger(arguments[1]));
  if (index < 0) index = length + index;
  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
  return -1;
} : nativeLastIndexOf;

},{"../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/to-integer":"node_modules/core-js/internals/to-integer.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/array-method-is-strict":"node_modules/core-js/internals/array-method-is-strict.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/modules/es.array.last-index-of.js":[function(require,module,exports) {
var $ = require('../internals/export');
var lastIndexOf = require('../internals/array-last-index-of');

// `Array.prototype.lastIndexOf` method
// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
$({ target: 'Array', proto: true, forced: lastIndexOf !== [].lastIndexOf }, {
  lastIndexOf: lastIndexOf
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-last-index-of":"node_modules/core-js/internals/array-last-index-of.js"}],"node_modules/core-js/modules/es.array.map.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $map = require('../internals/array-iteration').map;
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');
// FF49- issue
var USES_TO_LENGTH = arrayMethodUsesToLength('map');

// `Array.prototype.map` method
// https://tc39.github.io/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js","../internals/array-method-has-species-support":"node_modules/core-js/internals/array-method-has-species-support.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/internals/array-reduce.js":[function(require,module,exports) {
var aFunction = require('../internals/a-function');
var toObject = require('../internals/to-object');
var IndexedObject = require('../internals/indexed-object');
var toLength = require('../internals/to-length');

// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod = function (IS_RIGHT) {
  return function (that, callbackfn, argumentsLength, memo) {
    aFunction(callbackfn);
    var O = toObject(that);
    var self = IndexedObject(O);
    var length = toLength(O.length);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (IS_RIGHT ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
};

module.exports = {
  // `Array.prototype.reduce` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};

},{"../internals/a-function":"node_modules/core-js/internals/a-function.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/indexed-object":"node_modules/core-js/internals/indexed-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js"}],"node_modules/core-js/modules/es.array.reduce.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $reduce = require('../internals/array-reduce').left;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var STRICT_METHOD = arrayMethodIsStrict('reduce');
var USES_TO_LENGTH = arrayMethodUsesToLength('reduce', { 1: 0 });

// `Array.prototype.reduce` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-reduce":"node_modules/core-js/internals/array-reduce.js","../internals/array-method-is-strict":"node_modules/core-js/internals/array-method-is-strict.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/modules/es.array.reduce-right.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $reduceRight = require('../internals/array-reduce').right;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var STRICT_METHOD = arrayMethodIsStrict('reduceRight');
// For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method
var USES_TO_LENGTH = arrayMethodUsesToLength('reduce', { 1: 0 });

// `Array.prototype.reduceRight` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-reduce":"node_modules/core-js/internals/array-reduce.js","../internals/array-method-is-strict":"node_modules/core-js/internals/array-method-is-strict.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/modules/es.array.reverse.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var isArray = require('../internals/is-array');

var nativeReverse = [].reverse;
var test = [1, 2];

// `Array.prototype.reverse` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reverse
// fix for Safari 12.0 bug
// https://bugs.webkit.org/show_bug.cgi?id=188794
$({ target: 'Array', proto: true, forced: String(test) === String(test.reverse()) }, {
  reverse: function reverse() {
    // eslint-disable-next-line no-self-assign
    if (isArray(this)) this.length = this.length;
    return nativeReverse.call(this);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/is-array":"node_modules/core-js/internals/is-array.js"}],"node_modules/core-js/modules/es.array.slice.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var isArray = require('../internals/is-array');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');
var toIndexedObject = require('../internals/to-indexed-object');
var createProperty = require('../internals/create-property');
var wellKnownSymbol = require('../internals/well-known-symbol');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
var USES_TO_LENGTH = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });

var SPECIES = wellKnownSymbol('species');
var nativeSlice = [].slice;
var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = toLength(O.length);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === Array || Constructor === undefined) {
        return nativeSlice.call(O, k, fin);
      }
    }
    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
    result.length = n;
    return result;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/is-array":"node_modules/core-js/internals/is-array.js","../internals/to-absolute-index":"node_modules/core-js/internals/to-absolute-index.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/create-property":"node_modules/core-js/internals/create-property.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/array-method-has-species-support":"node_modules/core-js/internals/array-method-has-species-support.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/modules/es.array.some.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $some = require('../internals/array-iteration').some;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var STRICT_METHOD = arrayMethodIsStrict('some');
var USES_TO_LENGTH = arrayMethodUsesToLength('some');

// `Array.prototype.some` method
// https://tc39.github.io/ecma262/#sec-array.prototype.some
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js","../internals/array-method-is-strict":"node_modules/core-js/internals/array-method-is-strict.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/modules/es.array.sort.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var aFunction = require('../internals/a-function');
var toObject = require('../internals/to-object');
var fails = require('../internals/fails');
var arrayMethodIsStrict = require('../internals/array-method-is-strict');

var test = [];
var nativeSort = test.sort;

// IE8-
var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function () {
  test.sort(null);
});
// Old WebKit
var STRICT_METHOD = arrayMethodIsStrict('sort');

var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD;

// `Array.prototype.sort` method
// https://tc39.github.io/ecma262/#sec-array.prototype.sort
$({ target: 'Array', proto: true, forced: FORCED }, {
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? nativeSort.call(toObject(this))
      : nativeSort.call(toObject(this), aFunction(comparefn));
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/a-function":"node_modules/core-js/internals/a-function.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/array-method-is-strict":"node_modules/core-js/internals/array-method-is-strict.js"}],"node_modules/core-js/modules/es.array.splice.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
var toObject = require('../internals/to-object');
var arraySpeciesCreate = require('../internals/array-species-create');
var createProperty = require('../internals/create-property');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
var USES_TO_LENGTH = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });

var max = Math.max;
var min = Math.min;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

// `Array.prototype.splice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.splice
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  splice: function splice(start, deleteCount /* , ...items */) {
    var O = toObject(this);
    var len = toLength(O.length);
    var actualStart = toAbsoluteIndex(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
    }
    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
    }
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from = actualStart + k;
      if (from in O) createProperty(A, k, O[from]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from = k + actualDeleteCount;
        to = k + insertCount;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    O.length = len - actualDeleteCount + insertCount;
    return A;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/to-absolute-index":"node_modules/core-js/internals/to-absolute-index.js","../internals/to-integer":"node_modules/core-js/internals/to-integer.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/array-species-create":"node_modules/core-js/internals/array-species-create.js","../internals/create-property":"node_modules/core-js/internals/create-property.js","../internals/array-method-has-species-support":"node_modules/core-js/internals/array-method-has-species-support.js","../internals/array-method-uses-to-length":"node_modules/core-js/internals/array-method-uses-to-length.js"}],"node_modules/core-js/internals/set-species.js":[function(require,module,exports) {
'use strict';
var getBuiltIn = require('../internals/get-built-in');
var definePropertyModule = require('../internals/object-define-property');
var wellKnownSymbol = require('../internals/well-known-symbol');
var DESCRIPTORS = require('../internals/descriptors');

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};

},{"../internals/get-built-in":"node_modules/core-js/internals/get-built-in.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js"}],"node_modules/core-js/modules/es.array.species.js":[function(require,module,exports) {
var setSpecies = require('../internals/set-species');

// `Array[@@species]` getter
// https://tc39.github.io/ecma262/#sec-get-array-@@species
setSpecies('Array');

},{"../internals/set-species":"node_modules/core-js/internals/set-species.js"}],"node_modules/core-js/modules/es.array.unscopables.flat.js":[function(require,module,exports) {
// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = require('../internals/add-to-unscopables');

addToUnscopables('flat');

},{"../internals/add-to-unscopables":"node_modules/core-js/internals/add-to-unscopables.js"}],"node_modules/core-js/modules/es.array.unscopables.flat-map.js":[function(require,module,exports) {
// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = require('../internals/add-to-unscopables');

addToUnscopables('flatMap');

},{"../internals/add-to-unscopables":"node_modules/core-js/internals/add-to-unscopables.js"}],"node_modules/core-js/internals/iterators-core.js":[function(require,module,exports) {
'use strict';
var getPrototypeOf = require('../internals/object-get-prototype-of');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var has = require('../internals/has');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

if (IteratorPrototype == undefined) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};

},{"../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js"}],"node_modules/core-js/internals/create-iterator-constructor.js":[function(require,module,exports) {
'use strict';
var IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;
var create = require('../internals/object-create');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var setToStringTag = require('../internals/set-to-string-tag');
var Iterators = require('../internals/iterators');

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};

},{"../internals/iterators-core":"node_modules/core-js/internals/iterators-core.js","../internals/object-create":"node_modules/core-js/internals/object-create.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js","../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js","../internals/iterators":"node_modules/core-js/internals/hidden-keys.js"}],"node_modules/core-js/internals/define-iterator.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var setToStringTag = require('../internals/set-to-string-tag');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');
var Iterators = require('../internals/iterators');
var IteratorsCore = require('../internals/iterators-core');

var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    INCORRECT_VALUES_NAME = true;
    defaultIterator = function values() { return nativeIterator.call(this); };
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
  }
  Iterators[NAME] = defaultIterator;

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  return methods;
};

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-iterator-constructor":"node_modules/core-js/internals/create-iterator-constructor.js","../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js","../internals/object-set-prototype-of":"node_modules/core-js/internals/object-set-prototype-of.js","../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js","../internals/iterators":"node_modules/core-js/internals/hidden-keys.js","../internals/iterators-core":"node_modules/core-js/internals/iterators-core.js"}],"node_modules/core-js/modules/es.array.iterator.js":[function(require,module,exports) {
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var addToUnscopables = require('../internals/add-to-unscopables');
var Iterators = require('../internals/iterators');
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.github.io/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.github.io/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/add-to-unscopables":"node_modules/core-js/internals/add-to-unscopables.js","../internals/iterators":"node_modules/core-js/internals/hidden-keys.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/define-iterator":"node_modules/core-js/internals/define-iterator.js"}],"node_modules/core-js/modules/es.string.from-code-point.js":[function(require,module,exports) {
var $ = require('../internals/export');
var toAbsoluteIndex = require('../internals/to-absolute-index');

var fromCharCode = String.fromCharCode;
var nativeFromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
var INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1;

// `String.fromCodePoint` method
// https://tc39.github.io/ecma262/#sec-string.fromcodepoint
$({ target: 'String', stat: true, forced: INCORRECT_LENGTH }, {
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var elements = [];
    var length = arguments.length;
    var i = 0;
    var code;
    while (length > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
      elements.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00)
      );
    } return elements.join('');
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/to-absolute-index":"node_modules/core-js/internals/to-absolute-index.js"}],"node_modules/core-js/modules/es.string.raw.js":[function(require,module,exports) {
var $ = require('../internals/export');
var toIndexedObject = require('../internals/to-indexed-object');
var toLength = require('../internals/to-length');

// `String.raw` method
// https://tc39.github.io/ecma262/#sec-string.raw
$({ target: 'String', stat: true }, {
  raw: function raw(template) {
    var rawTemplate = toIndexedObject(template.raw);
    var literalSegments = toLength(rawTemplate.length);
    var argumentsLength = arguments.length;
    var elements = [];
    var i = 0;
    while (literalSegments > i) {
      elements.push(String(rawTemplate[i++]));
      if (i < argumentsLength) elements.push(String(arguments[i]));
    } return elements.join('');
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js"}],"node_modules/core-js/internals/string-multibyte.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');

// `String.prototype.{ codePointAt, at }` methods implementation
var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = String(requireObjectCoercible($this));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};

},{"../internals/to-integer":"node_modules/core-js/internals/to-integer.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js"}],"node_modules/core-js/modules/es.string.code-point-at.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var codeAt = require('../internals/string-multibyte').codeAt;

// `String.prototype.codePointAt` method
// https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
$({ target: 'String', proto: true }, {
  codePointAt: function codePointAt(pos) {
    return codeAt(this, pos);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/string-multibyte":"node_modules/core-js/internals/string-multibyte.js"}],"node_modules/core-js/internals/is-regexp.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var classof = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.github.io/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/not-a-regexp.js":[function(require,module,exports) {
var isRegExp = require('../internals/is-regexp');

module.exports = function (it) {
  if (isRegExp(it)) {
    throw TypeError("The method doesn't accept regular expressions");
  } return it;
};

},{"../internals/is-regexp":"node_modules/core-js/internals/is-regexp.js"}],"node_modules/core-js/internals/correct-is-regexp-logic.js":[function(require,module,exports) {
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (e) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (f) { /* empty */ }
  } return false;
};

},{"../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/modules/es.string.ends-with.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var toLength = require('../internals/to-length');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');
var IS_PURE = require('../internals/is-pure');

var nativeEndsWith = ''.endsWith;
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.endsWith` method
// https://tc39.github.io/ecma262/#sec-string.prototype.endswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = String(requireObjectCoercible(this));
    notARegExp(searchString);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : min(toLength(endPosition), len);
    var search = String(searchString);
    return nativeEndsWith
      ? nativeEndsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/not-a-regexp":"node_modules/core-js/internals/not-a-regexp.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js","../internals/correct-is-regexp-logic":"node_modules/core-js/internals/correct-is-regexp-logic.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js"}],"node_modules/core-js/modules/es.string.includes.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');

// `String.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-string.prototype.includes
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~String(requireObjectCoercible(this))
      .indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/not-a-regexp":"node_modules/core-js/internals/not-a-regexp.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js","../internals/correct-is-regexp-logic":"node_modules/core-js/internals/correct-is-regexp-logic.js"}],"node_modules/core-js/internals/regexp-flags.js":[function(require,module,exports) {
'use strict';
var anObject = require('../internals/an-object');

// `RegExp.prototype.flags` getter implementation
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"../internals/an-object":"node_modules/core-js/internals/an-object.js"}],"node_modules/core-js/internals/regexp-sticky-helpers.js":[function(require,module,exports) {
'use strict';

var fails = require('./fails');

// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
// so we use an intermediate function.
function RE(s, f) {
  return RegExp(s, f);
}

exports.UNSUPPORTED_Y = fails(function () {
  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
  var re = RE('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

exports.BROKEN_CARET = fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = RE('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});

},{"./fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/internals/regexp-exec.js":[function(require,module,exports) {
'use strict';
var regexpFlags = require('./regexp-flags');
var stickyHelpers = require('./regexp-sticky-helpers');

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = regexpFlags.call(re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = flags.replace('y', '');
      if (flags.indexOf('g') === -1) {
        flags += 'g';
      }

      strCopy = String(str).slice(re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = nativeExec.call(sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = match.input.slice(charsAdded);
        match[0] = match[0].slice(charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"./regexp-flags":"node_modules/core-js/internals/regexp-flags.js","./regexp-sticky-helpers":"node_modules/core-js/internals/regexp-sticky-helpers.js"}],"node_modules/core-js/modules/es.regexp.exec.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var exec = require('../internals/regexp-exec');

$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/regexp-exec":"node_modules/core-js/internals/regexp-exec.js"}],"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js":[function(require,module,exports) {
'use strict';
// TODO: Remove from `core-js@4` since it's moved to entry points
require('../modules/es.regexp.exec');
var redefine = require('../internals/redefine');
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var regexpExec = require('../internals/regexp-exec');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

var SPECIES = wellKnownSymbol('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  return 'a'.replace(/./, '$0') === '$0';
})();

var REPLACE = wellKnownSymbol('replace');
// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
})();

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

module.exports = function (KEY, length, exec, sham) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !(
      REPLACE_SUPPORTS_NAMED_GROUPS &&
      REPLACE_KEEPS_$0 &&
      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    )) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    }, {
      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
    });
    var stringMethod = methods[0];
    var regexMethod = methods[1];

    redefine(String.prototype, KEY, stringMethod);
    redefine(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return regexMethod.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return regexMethod.call(string, this); }
    );
  }

  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
};

},{"../modules/es.regexp.exec":"node_modules/core-js/modules/es.regexp.exec.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/regexp-exec":"node_modules/core-js/internals/regexp-exec.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js"}],"node_modules/core-js/internals/advance-string-index.js":[function(require,module,exports) {
'use strict';
var charAt = require('../internals/string-multibyte').charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};

},{"../internals/string-multibyte":"node_modules/core-js/internals/string-multibyte.js"}],"node_modules/core-js/internals/regexp-exec-abstract.js":[function(require,module,exports) {
var classof = require('./classof-raw');
var regexpExec = require('./regexp-exec');

// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }

  if (classof(R) !== 'RegExp') {
    throw TypeError('RegExp#exec called on incompatible receiver');
  }

  return regexpExec.call(R, S);
};


},{"./classof-raw":"node_modules/core-js/internals/classof-raw.js","./regexp-exec":"node_modules/core-js/internals/regexp-exec.js"}],"node_modules/core-js/modules/es.string.match.js":[function(require,module,exports) {
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var toLength = require('../internals/to-length');
var requireObjectCoercible = require('../internals/require-object-coercible');
var advanceStringIndex = require('../internals/advance-string-index');
var regExpExec = require('../internals/regexp-exec-abstract');

// @@match logic
fixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = requireObjectCoercible(this);
      var matcher = regexp == undefined ? undefined : regexp[MATCH];
      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative(nativeMatch, regexp, this);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);

      if (!rx.global) return regExpExec(rx, S);

      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"../internals/fix-regexp-well-known-symbol-logic":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js","../internals/advance-string-index":"node_modules/core-js/internals/advance-string-index.js","../internals/regexp-exec-abstract":"node_modules/core-js/internals/regexp-exec-abstract.js"}],"node_modules/core-js/internals/species-constructor.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var aFunction = require('../internals/a-function');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.github.io/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
};

},{"../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/a-function":"node_modules/core-js/internals/a-function.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/modules/es.string.match-all.js":[function(require,module,exports) {
var global = arguments[3];
'use strict';
var $ = require('../internals/export');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var requireObjectCoercible = require('../internals/require-object-coercible');
var toLength = require('../internals/to-length');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var classof = require('../internals/classof-raw');
var isRegExp = require('../internals/is-regexp');
var getRegExpFlags = require('../internals/regexp-flags');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var speciesConstructor = require('../internals/species-constructor');
var advanceStringIndex = require('../internals/advance-string-index');
var InternalStateModule = require('../internals/internal-state');
var IS_PURE = require('../internals/is-pure');

var MATCH_ALL = wellKnownSymbol('matchAll');
var REGEXP_STRING = 'RegExp String';
var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);
var RegExpPrototype = RegExp.prototype;
var regExpBuiltinExec = RegExpPrototype.exec;
var nativeMatchAll = ''.matchAll;

var WORKS_WITH_NON_GLOBAL_REGEX = !!nativeMatchAll && !fails(function () {
  'a'.matchAll(/./);
});

var regExpExec = function (R, S) {
  var exec = R.exec;
  var result;
  if (typeof exec == 'function') {
    result = exec.call(R, S);
    if (typeof result != 'object') throw TypeError('Incorrect exec result');
    return result;
  } return regExpBuiltinExec.call(R, S);
};

// eslint-disable-next-line max-len
var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, global, fullUnicode) {
  setInternalState(this, {
    type: REGEXP_STRING_ITERATOR,
    regexp: regexp,
    string: string,
    global: global,
    unicode: fullUnicode,
    done: false
  });
}, REGEXP_STRING, function next() {
  var state = getInternalState(this);
  if (state.done) return { value: undefined, done: true };
  var R = state.regexp;
  var S = state.string;
  var match = regExpExec(R, S);
  if (match === null) return { value: undefined, done: state.done = true };
  if (state.global) {
    if (String(match[0]) == '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
    return { value: match, done: false };
  }
  state.done = true;
  return { value: match, done: false };
});

var $matchAll = function (string) {
  var R = anObject(this);
  var S = String(string);
  var C, flagsValue, flags, matcher, global, fullUnicode;
  C = speciesConstructor(R, RegExp);
  flagsValue = R.flags;
  if (flagsValue === undefined && R instanceof RegExp && !('flags' in RegExpPrototype)) {
    flagsValue = getRegExpFlags.call(R);
  }
  flags = flagsValue === undefined ? '' : String(flagsValue);
  matcher = new C(C === RegExp ? R.source : R, flags);
  global = !!~flags.indexOf('g');
  fullUnicode = !!~flags.indexOf('u');
  matcher.lastIndex = toLength(R.lastIndex);
  return new $RegExpStringIterator(matcher, S, global, fullUnicode);
};

// `String.prototype.matchAll` method
// https://github.com/tc39/proposal-string-matchall
$({ target: 'String', proto: true, forced: WORKS_WITH_NON_GLOBAL_REGEX }, {
  matchAll: function matchAll(regexp) {
    var O = requireObjectCoercible(this);
    var flags, S, matcher, rx;
    if (regexp != null) {
      if (isRegExp(regexp)) {
        flags = String(requireObjectCoercible('flags' in RegExpPrototype
          ? regexp.flags
          : getRegExpFlags.call(regexp)
        ));
        if (!~flags.indexOf('g')) throw TypeError('`.matchAll` does not allow non-global regexes');
      }
      if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);
      matcher = regexp[MATCH_ALL];
      if (matcher === undefined && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;
      if (matcher != null) return aFunction(matcher).call(regexp, O);
    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);
    S = String(O);
    rx = new RegExp(regexp, 'g');
    return IS_PURE ? $matchAll.call(rx, S) : rx[MATCH_ALL](S);
  }
});

IS_PURE || MATCH_ALL in RegExpPrototype || createNonEnumerableProperty(RegExpPrototype, MATCH_ALL, $matchAll);

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-iterator-constructor":"node_modules/core-js/internals/create-iterator-constructor.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/a-function":"node_modules/core-js/internals/a-function.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js","../internals/is-regexp":"node_modules/core-js/internals/is-regexp.js","../internals/regexp-flags":"node_modules/core-js/internals/regexp-flags.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/species-constructor":"node_modules/core-js/internals/species-constructor.js","../internals/advance-string-index":"node_modules/core-js/internals/advance-string-index.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js"}],"node_modules/core-js/internals/string-repeat.js":[function(require,module,exports) {
'use strict';
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');

// `String.prototype.repeat` method implementation
// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
module.exports = ''.repeat || function repeat(count) {
  var str = String(requireObjectCoercible(this));
  var result = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
  return result;
};

},{"../internals/to-integer":"node_modules/core-js/internals/to-integer.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js"}],"node_modules/core-js/internals/string-pad.js":[function(require,module,exports) {
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('../internals/to-length');
var repeat = require('../internals/string-repeat');
var requireObjectCoercible = require('../internals/require-object-coercible');

var ceil = Math.ceil;

// `String.prototype.{ padStart, padEnd }` methods implementation
var createMethod = function (IS_END) {
  return function ($this, maxLength, fillString) {
    var S = String(requireObjectCoercible($this));
    var stringLength = S.length;
    var fillStr = fillString === undefined ? ' ' : String(fillString);
    var intMaxLength = toLength(maxLength);
    var fillLen, stringFiller;
    if (intMaxLength <= stringLength || fillStr == '') return S;
    fillLen = intMaxLength - stringLength;
    stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));
    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
    return IS_END ? S + stringFiller : stringFiller + S;
  };
};

module.exports = {
  // `String.prototype.padStart` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
  start: createMethod(false),
  // `String.prototype.padEnd` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.padend
  end: createMethod(true)
};

},{"../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/string-repeat":"node_modules/core-js/internals/string-repeat.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js"}],"node_modules/core-js/internals/string-pad-webkit-bug.js":[function(require,module,exports) {
// https://github.com/zloirock/core-js/issues/280
var userAgent = require('../internals/engine-user-agent');

// eslint-disable-next-line unicorn/no-unsafe-regex
module.exports = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

},{"../internals/engine-user-agent":"node_modules/core-js/internals/engine-user-agent.js"}],"node_modules/core-js/modules/es.string.pad-end.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $padEnd = require('../internals/string-pad').end;
var WEBKIT_BUG = require('../internals/string-pad-webkit-bug');

// `String.prototype.padEnd` method
// https://tc39.github.io/ecma262/#sec-string.prototype.padend
$({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/string-pad":"node_modules/core-js/internals/string-pad.js","../internals/string-pad-webkit-bug":"node_modules/core-js/internals/string-pad-webkit-bug.js"}],"node_modules/core-js/modules/es.string.pad-start.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $padStart = require('../internals/string-pad').start;
var WEBKIT_BUG = require('../internals/string-pad-webkit-bug');

// `String.prototype.padStart` method
// https://tc39.github.io/ecma262/#sec-string.prototype.padstart
$({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/string-pad":"node_modules/core-js/internals/string-pad.js","../internals/string-pad-webkit-bug":"node_modules/core-js/internals/string-pad-webkit-bug.js"}],"node_modules/core-js/modules/es.string.repeat.js":[function(require,module,exports) {
var $ = require('../internals/export');
var repeat = require('../internals/string-repeat');

// `String.prototype.repeat` method
// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
$({ target: 'String', proto: true }, {
  repeat: repeat
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/string-repeat":"node_modules/core-js/internals/string-repeat.js"}],"node_modules/core-js/modules/es.string.replace.js":[function(require,module,exports) {
var global = arguments[3];
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');
var advanceStringIndex = require('../internals/advance-string-index');
var regExpExec = require('../internals/regexp-exec-abstract');

var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
      return replacer !== undefined
        ? replacer.call(searchValue, O, replaceValue)
        : nativeReplace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      if (
        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
      ) {
        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
        if (res.done) return res.value;
      }

      var rx = anObject(regexp);
      var S = String(this);

      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);

      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;

        results.push(result);
        if (!global) break;

        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];

        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

  // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return nativeReplace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

},{"../internals/fix-regexp-well-known-symbol-logic":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/to-integer":"node_modules/core-js/internals/to-integer.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js","../internals/advance-string-index":"node_modules/core-js/internals/advance-string-index.js","../internals/regexp-exec-abstract":"node_modules/core-js/internals/regexp-exec-abstract.js"}],"node_modules/core-js/modules/es.string.search.js":[function(require,module,exports) {
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var anObject = require('../internals/an-object');
var requireObjectCoercible = require('../internals/require-object-coercible');
var sameValue = require('../internals/same-value');
var regExpExec = require('../internals/regexp-exec-abstract');

// @@search logic
fixRegExpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = requireObjectCoercible(this);
      var searcher = regexp == undefined ? undefined : regexp[SEARCH];
      return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative(nativeSearch, regexp, this);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);

      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

},{"../internals/fix-regexp-well-known-symbol-logic":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js","../internals/same-value":"node_modules/core-js/internals/same-value.js","../internals/regexp-exec-abstract":"node_modules/core-js/internals/regexp-exec-abstract.js"}],"node_modules/core-js/modules/es.string.split.js":[function(require,module,exports) {
'use strict';
var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');
var isRegExp = require('../internals/is-regexp');
var anObject = require('../internals/an-object');
var requireObjectCoercible = require('../internals/require-object-coercible');
var speciesConstructor = require('../internals/species-constructor');
var advanceStringIndex = require('../internals/advance-string-index');
var toLength = require('../internals/to-length');
var callRegExpExec = require('../internals/regexp-exec-abstract');
var regexpExec = require('../internals/regexp-exec');
var fails = require('../internals/fails');

var arrayPush = [].push;
var min = Math.min;
var MAX_UINT32 = 0xFFFFFFFF;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

// @@split logic
fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] == 'c' ||
    'test'.split(/(?:)/, -1).length != 4 ||
    'ab'.split(/(?:ab)*/).length != 2 ||
    '.'.split(/(.?)(.?)/).length != 4 ||
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return nativeSplit.call(string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output.length > lim ? output.slice(0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
}, !SUPPORTS_Y);

},{"../internals/fix-regexp-well-known-symbol-logic":"node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","../internals/is-regexp":"node_modules/core-js/internals/is-regexp.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js","../internals/species-constructor":"node_modules/core-js/internals/species-constructor.js","../internals/advance-string-index":"node_modules/core-js/internals/advance-string-index.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/regexp-exec-abstract":"node_modules/core-js/internals/regexp-exec-abstract.js","../internals/regexp-exec":"node_modules/core-js/internals/regexp-exec.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.string.starts-with.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var toLength = require('../internals/to-length');
var notARegExp = require('../internals/not-a-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');
var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');
var IS_PURE = require('../internals/is-pure');

var nativeStartsWith = ''.startsWith;
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.startsWith` method
// https://tc39.github.io/ecma262/#sec-string.prototype.startswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = String(requireObjectCoercible(this));
    notARegExp(searchString);
    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return nativeStartsWith
      ? nativeStartsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/not-a-regexp":"node_modules/core-js/internals/not-a-regexp.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js","../internals/correct-is-regexp-logic":"node_modules/core-js/internals/correct-is-regexp-logic.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js"}],"node_modules/core-js/internals/whitespaces.js":[function(require,module,exports) {
// a string of all valid unicode whitespaces
// eslint-disable-next-line max-len
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],"node_modules/core-js/internals/string-trim.js":[function(require,module,exports) {
var requireObjectCoercible = require('../internals/require-object-coercible');
var whitespaces = require('../internals/whitespaces');

var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function (TYPE) {
  return function ($this) {
    var string = String(requireObjectCoercible($this));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };
};

module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};

},{"../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js","../internals/whitespaces":"node_modules/core-js/internals/whitespaces.js"}],"node_modules/core-js/internals/string-trim-forced.js":[function(require,module,exports) {
var fails = require('../internals/fails');
var whitespaces = require('../internals/whitespaces');

var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function (METHOD_NAME) {
  return fails(function () {
    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
  });
};

},{"../internals/fails":"node_modules/core-js/internals/fails.js","../internals/whitespaces":"node_modules/core-js/internals/whitespaces.js"}],"node_modules/core-js/modules/es.string.trim.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $trim = require('../internals/string-trim').trim;
var forcedStringTrimMethod = require('../internals/string-trim-forced');

// `String.prototype.trim` method
// https://tc39.github.io/ecma262/#sec-string.prototype.trim
$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
  trim: function trim() {
    return $trim(this);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/string-trim":"node_modules/core-js/internals/string-trim.js","../internals/string-trim-forced":"node_modules/core-js/internals/string-trim-forced.js"}],"node_modules/core-js/modules/es.string.trim-start.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $trimStart = require('../internals/string-trim').start;
var forcedStringTrimMethod = require('../internals/string-trim-forced');

var FORCED = forcedStringTrimMethod('trimStart');

var trimStart = FORCED ? function trimStart() {
  return $trimStart(this);
} : ''.trimStart;

// `String.prototype.{ trimStart, trimLeft }` methods
// https://github.com/tc39/ecmascript-string-left-right-trim
$({ target: 'String', proto: true, forced: FORCED }, {
  trimStart: trimStart,
  trimLeft: trimStart
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/string-trim":"node_modules/core-js/internals/string-trim.js","../internals/string-trim-forced":"node_modules/core-js/internals/string-trim-forced.js"}],"node_modules/core-js/modules/es.string.trim-end.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var $trimEnd = require('../internals/string-trim').end;
var forcedStringTrimMethod = require('../internals/string-trim-forced');

var FORCED = forcedStringTrimMethod('trimEnd');

var trimEnd = FORCED ? function trimEnd() {
  return $trimEnd(this);
} : ''.trimEnd;

// `String.prototype.{ trimEnd, trimRight }` methods
// https://github.com/tc39/ecmascript-string-left-right-trim
$({ target: 'String', proto: true, forced: FORCED }, {
  trimEnd: trimEnd,
  trimRight: trimEnd
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/string-trim":"node_modules/core-js/internals/string-trim.js","../internals/string-trim-forced":"node_modules/core-js/internals/string-trim-forced.js"}],"node_modules/core-js/modules/es.string.iterator.js":[function(require,module,exports) {
'use strict';
var charAt = require('../internals/string-multibyte').charAt;
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: String(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});

},{"../internals/string-multibyte":"node_modules/core-js/internals/string-multibyte.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/define-iterator":"node_modules/core-js/internals/define-iterator.js"}],"node_modules/core-js/internals/create-html.js":[function(require,module,exports) {
var requireObjectCoercible = require('../internals/require-object-coercible');

var quot = /"/g;

// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
// https://tc39.github.io/ecma262/#sec-createhtml
module.exports = function (string, tag, attribute, value) {
  var S = String(requireObjectCoercible(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};

},{"../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js"}],"node_modules/core-js/internals/string-html-forced.js":[function(require,module,exports) {
var fails = require('../internals/fails');

// check the existence of a method, lowercase
// of a tag and escaping quotes in arguments
module.exports = function (METHOD_NAME) {
  return fails(function () {
    var test = ''[METHOD_NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  });
};

},{"../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.string.anchor.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.anchor` method
// https://tc39.github.io/ecma262/#sec-string.prototype.anchor
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('anchor') }, {
  anchor: function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/modules/es.string.big.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.big` method
// https://tc39.github.io/ecma262/#sec-string.prototype.big
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('big') }, {
  big: function big() {
    return createHTML(this, 'big', '', '');
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/modules/es.string.blink.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.blink` method
// https://tc39.github.io/ecma262/#sec-string.prototype.blink
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('blink') }, {
  blink: function blink() {
    return createHTML(this, 'blink', '', '');
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/modules/es.string.bold.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.bold` method
// https://tc39.github.io/ecma262/#sec-string.prototype.bold
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('bold') }, {
  bold: function bold() {
    return createHTML(this, 'b', '', '');
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/modules/es.string.fixed.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.fixed` method
// https://tc39.github.io/ecma262/#sec-string.prototype.fixed
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('fixed') }, {
  fixed: function fixed() {
    return createHTML(this, 'tt', '', '');
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/modules/es.string.fontcolor.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.fontcolor` method
// https://tc39.github.io/ecma262/#sec-string.prototype.fontcolor
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('fontcolor') }, {
  fontcolor: function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/modules/es.string.fontsize.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.fontsize` method
// https://tc39.github.io/ecma262/#sec-string.prototype.fontsize
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('fontsize') }, {
  fontsize: function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/modules/es.string.italics.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.italics` method
// https://tc39.github.io/ecma262/#sec-string.prototype.italics
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('italics') }, {
  italics: function italics() {
    return createHTML(this, 'i', '', '');
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/modules/es.string.link.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.link` method
// https://tc39.github.io/ecma262/#sec-string.prototype.link
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('link') }, {
  link: function link(url) {
    return createHTML(this, 'a', 'href', url);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/modules/es.string.small.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.small` method
// https://tc39.github.io/ecma262/#sec-string.prototype.small
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('small') }, {
  small: function small() {
    return createHTML(this, 'small', '', '');
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/modules/es.string.strike.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.strike` method
// https://tc39.github.io/ecma262/#sec-string.prototype.strike
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('strike') }, {
  strike: function strike() {
    return createHTML(this, 'strike', '', '');
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/modules/es.string.sub.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.sub` method
// https://tc39.github.io/ecma262/#sec-string.prototype.sub
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sub') }, {
  sub: function sub() {
    return createHTML(this, 'sub', '', '');
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/modules/es.string.sup.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var createHTML = require('../internals/create-html');
var forcedStringHTMLMethod = require('../internals/string-html-forced');

// `String.prototype.sup` method
// https://tc39.github.io/ecma262/#sec-string.prototype.sup
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sup') }, {
  sup: function sup() {
    return createHTML(this, 'sup', '', '');
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-html":"node_modules/core-js/internals/create-html.js","../internals/string-html-forced":"node_modules/core-js/internals/string-html-forced.js"}],"node_modules/core-js/internals/inherit-if-required.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var setPrototypeOf = require('../internals/object-set-prototype-of');

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    typeof (NewTarget = dummy.constructor) == 'function' &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/object-set-prototype-of":"node_modules/core-js/internals/object-set-prototype-of.js"}],"node_modules/core-js/modules/es.regexp.constructor.js":[function(require,module,exports) {

var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var inheritIfRequired = require('../internals/inherit-if-required');
var defineProperty = require('../internals/object-define-property').f;
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var isRegExp = require('../internals/is-regexp');
var getFlags = require('../internals/regexp-flags');
var stickyHelpers = require('../internals/regexp-sticky-helpers');
var redefine = require('../internals/redefine');
var fails = require('../internals/fails');
var setInternalState = require('../internals/internal-state').set;
var setSpecies = require('../internals/set-species');
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');
var NativeRegExp = global.RegExp;
var RegExpPrototype = NativeRegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;

// "new" should create a new object, old webkit bug
var CORRECT_NEW = new NativeRegExp(re1) !== re1;

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;

var FORCED = DESCRIPTORS && isForced('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y || fails(function () {
  re2[MATCH] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
})));

// `RegExp` constructor
// https://tc39.github.io/ecma262/#sec-regexp-constructor
if (FORCED) {
  var RegExpWrapper = function RegExp(pattern, flags) {
    var thisIsRegExp = this instanceof RegExpWrapper;
    var patternIsRegExp = isRegExp(pattern);
    var flagsAreUndefined = flags === undefined;
    var sticky;

    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
      return pattern;
    }

    if (CORRECT_NEW) {
      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
    } else if (pattern instanceof RegExpWrapper) {
      if (flagsAreUndefined) flags = getFlags.call(pattern);
      pattern = pattern.source;
    }

    if (UNSUPPORTED_Y) {
      sticky = !!flags && flags.indexOf('y') > -1;
      if (sticky) flags = flags.replace(/y/g, '');
    }

    var result = inheritIfRequired(
      CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),
      thisIsRegExp ? this : RegExpPrototype,
      RegExpWrapper
    );

    if (UNSUPPORTED_Y && sticky) setInternalState(result, { sticky: sticky });

    return result;
  };
  var proxy = function (key) {
    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
      configurable: true,
      get: function () { return NativeRegExp[key]; },
      set: function (it) { NativeRegExp[key] = it; }
    });
  };
  var keys = getOwnPropertyNames(NativeRegExp);
  var index = 0;
  while (keys.length > index) proxy(keys[index++]);
  RegExpPrototype.constructor = RegExpWrapper;
  RegExpWrapper.prototype = RegExpPrototype;
  redefine(global, 'RegExp', RegExpWrapper);
}

// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
setSpecies('RegExp');

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/is-forced":"node_modules/core-js/internals/is-forced.js","../internals/inherit-if-required":"node_modules/core-js/internals/inherit-if-required.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/object-get-own-property-names":"node_modules/core-js/internals/object-get-own-property-names.js","../internals/is-regexp":"node_modules/core-js/internals/is-regexp.js","../internals/regexp-flags":"node_modules/core-js/internals/regexp-flags.js","../internals/regexp-sticky-helpers":"node_modules/core-js/internals/regexp-sticky-helpers.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/set-species":"node_modules/core-js/internals/set-species.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/modules/es.regexp.flags.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var objectDefinePropertyModule = require('../internals/object-define-property');
var regExpFlags = require('../internals/regexp-flags');
var UNSUPPORTED_Y = require('../internals/regexp-sticky-helpers').UNSUPPORTED_Y;

// `RegExp.prototype.flags` getter
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
if (DESCRIPTORS && (/./g.flags != 'g' || UNSUPPORTED_Y)) {
  objectDefinePropertyModule.f(RegExp.prototype, 'flags', {
    configurable: true,
    get: regExpFlags
  });
}

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/regexp-flags":"node_modules/core-js/internals/regexp-flags.js","../internals/regexp-sticky-helpers":"node_modules/core-js/internals/regexp-sticky-helpers.js"}],"node_modules/core-js/modules/es.regexp.sticky.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var UNSUPPORTED_Y = require('../internals/regexp-sticky-helpers').UNSUPPORTED_Y;
var defineProperty = require('../internals/object-define-property').f;
var getInternalState = require('../internals/internal-state').get;
var RegExpPrototype = RegExp.prototype;

// `RegExp.prototype.sticky` getter
if (DESCRIPTORS && UNSUPPORTED_Y) {
  defineProperty(RegExp.prototype, 'sticky', {
    configurable: true,
    get: function () {
      if (this === RegExpPrototype) return undefined;
      // We can't use InternalStateModule.getterFor because
      // we don't add metadata for regexps created by a literal.
      if (this instanceof RegExp) {
        return !!getInternalState(this).sticky;
      }
      throw TypeError('Incompatible receiver, RegExp required');
    }
  });
}

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/regexp-sticky-helpers":"node_modules/core-js/internals/regexp-sticky-helpers.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js"}],"node_modules/core-js/modules/es.regexp.test.js":[function(require,module,exports) {
'use strict';
// TODO: Remove from `core-js@4` since it's moved to entry points
require('../modules/es.regexp.exec');
var $ = require('../internals/export');
var isObject = require('../internals/is-object');

var DELEGATES_TO_EXEC = function () {
  var execCalled = false;
  var re = /[ac]/;
  re.exec = function () {
    execCalled = true;
    return /./.exec.apply(this, arguments);
  };
  return re.test('abc') === true && execCalled;
}();

var nativeTest = /./.test;

$({ target: 'RegExp', proto: true, forced: !DELEGATES_TO_EXEC }, {
  test: function (str) {
    if (typeof this.exec !== 'function') {
      return nativeTest.call(this, str);
    }
    var result = this.exec(str);
    if (result !== null && !isObject(result)) {
      throw new Error('RegExp exec method returned something other than an Object or null');
    }
    return !!result;
  }
});

},{"../modules/es.regexp.exec":"node_modules/core-js/modules/es.regexp.exec.js","../internals/export":"node_modules/core-js/internals/export.js","../internals/is-object":"node_modules/core-js/internals/is-object.js"}],"node_modules/core-js/modules/es.regexp.to-string.js":[function(require,module,exports) {
'use strict';
var redefine = require('../internals/redefine');
var anObject = require('../internals/an-object');
var fails = require('../internals/fails');
var flags = require('../internals/regexp-flags');

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];

var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  redefine(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var p = String(R.source);
    var rf = R.flags;
    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
    return '/' + p + '/' + f;
  }, { unsafe: true });
}

},{"../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/regexp-flags":"node_modules/core-js/internals/regexp-flags.js"}],"node_modules/core-js/internals/number-parse-int.js":[function(require,module,exports) {

var global = require('../internals/global');
var trim = require('../internals/string-trim').trim;
var whitespaces = require('../internals/whitespaces');

var $parseInt = global.parseInt;
var hex = /^[+-]?0[Xx]/;
var FORCED = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22;

// `parseInt` method
// https://tc39.github.io/ecma262/#sec-parseint-string-radix
module.exports = FORCED ? function parseInt(string, radix) {
  var S = trim(String(string));
  return $parseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
} : $parseInt;

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/string-trim":"node_modules/core-js/internals/string-trim.js","../internals/whitespaces":"node_modules/core-js/internals/whitespaces.js"}],"node_modules/core-js/modules/es.parse-int.js":[function(require,module,exports) {
var $ = require('../internals/export');
var parseIntImplementation = require('../internals/number-parse-int');

// `parseInt` method
// https://tc39.github.io/ecma262/#sec-parseint-string-radix
$({ global: true, forced: parseInt != parseIntImplementation }, {
  parseInt: parseIntImplementation
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/number-parse-int":"node_modules/core-js/internals/number-parse-int.js"}],"node_modules/core-js/internals/number-parse-float.js":[function(require,module,exports) {

var global = require('../internals/global');
var trim = require('../internals/string-trim').trim;
var whitespaces = require('../internals/whitespaces');

var $parseFloat = global.parseFloat;
var FORCED = 1 / $parseFloat(whitespaces + '-0') !== -Infinity;

// `parseFloat` method
// https://tc39.github.io/ecma262/#sec-parsefloat-string
module.exports = FORCED ? function parseFloat(string) {
  var trimmedString = trim(String(string));
  var result = $parseFloat(trimmedString);
  return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/string-trim":"node_modules/core-js/internals/string-trim.js","../internals/whitespaces":"node_modules/core-js/internals/whitespaces.js"}],"node_modules/core-js/modules/es.parse-float.js":[function(require,module,exports) {
var $ = require('../internals/export');
var parseFloatImplementation = require('../internals/number-parse-float');

// `parseFloat` method
// https://tc39.github.io/ecma262/#sec-parsefloat-string
$({ global: true, forced: parseFloat != parseFloatImplementation }, {
  parseFloat: parseFloatImplementation
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/number-parse-float":"node_modules/core-js/internals/number-parse-float.js"}],"node_modules/core-js/modules/es.number.constructor.js":[function(require,module,exports) {

'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var redefine = require('../internals/redefine');
var has = require('../internals/has');
var classof = require('../internals/classof-raw');
var inheritIfRequired = require('../internals/inherit-if-required');
var toPrimitive = require('../internals/to-primitive');
var fails = require('../internals/fails');
var create = require('../internals/object-create');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var defineProperty = require('../internals/object-define-property').f;
var trim = require('../internals/string-trim').trim;

var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;

// Opera ~12 has broken Object#toString
var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;

// `ToNumber` abstract operation
// https://tc39.github.io/ecma262/#sec-tonumber
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  var first, third, radix, maxCode, digits, length, index, code;
  if (typeof it == 'string' && it.length > 2) {
    it = trim(it);
    first = it.charCodeAt(0);
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
        default: return +it;
      }
      digits = it.slice(2);
      length = digits.length;
      for (index = 0; index < length; index++) {
        code = digits.charCodeAt(index);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

// `Number` constructor
// https://tc39.github.io/ecma262/#sec-number-constructor
if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
  var NumberWrapper = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var dummy = this;
    return dummy instanceof NumberWrapper
      // check on 1..constructor(foo) case
      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)
        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
  };
  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    }
  }
  NumberWrapper.prototype = NumberPrototype;
  NumberPrototype.constructor = NumberWrapper;
  redefine(global, NUMBER, NumberWrapper);
}

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/is-forced":"node_modules/core-js/internals/is-forced.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js","../internals/inherit-if-required":"node_modules/core-js/internals/inherit-if-required.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/object-create":"node_modules/core-js/internals/object-create.js","../internals/object-get-own-property-names":"node_modules/core-js/internals/object-get-own-property-names.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/string-trim":"node_modules/core-js/internals/string-trim.js"}],"node_modules/core-js/modules/es.number.epsilon.js":[function(require,module,exports) {
var $ = require('../internals/export');

// `Number.EPSILON` constant
// https://tc39.github.io/ecma262/#sec-number.epsilon
$({ target: 'Number', stat: true }, {
  EPSILON: Math.pow(2, -52)
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/internals/number-is-finite.js":[function(require,module,exports) {

var global = require('../internals/global');

var globalIsFinite = global.isFinite;

// `Number.isFinite` method
// https://tc39.github.io/ecma262/#sec-number.isfinite
module.exports = Number.isFinite || function isFinite(it) {
  return typeof it == 'number' && globalIsFinite(it);
};

},{"../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/modules/es.number.is-finite.js":[function(require,module,exports) {
var $ = require('../internals/export');
var numberIsFinite = require('../internals/number-is-finite');

// `Number.isFinite` method
// https://tc39.github.io/ecma262/#sec-number.isfinite
$({ target: 'Number', stat: true }, { isFinite: numberIsFinite });

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/number-is-finite":"node_modules/core-js/internals/number-is-finite.js"}],"node_modules/core-js/internals/is-integer.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');

var floor = Math.floor;

// `Number.isInteger` method implementation
// https://tc39.github.io/ecma262/#sec-number.isinteger
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js"}],"node_modules/core-js/modules/es.number.is-integer.js":[function(require,module,exports) {
var $ = require('../internals/export');
var isInteger = require('../internals/is-integer');

// `Number.isInteger` method
// https://tc39.github.io/ecma262/#sec-number.isinteger
$({ target: 'Number', stat: true }, {
  isInteger: isInteger
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/is-integer":"node_modules/core-js/internals/is-integer.js"}],"node_modules/core-js/modules/es.number.is-nan.js":[function(require,module,exports) {
var $ = require('../internals/export');

// `Number.isNaN` method
// https://tc39.github.io/ecma262/#sec-number.isnan
$({ target: 'Number', stat: true }, {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/modules/es.number.is-safe-integer.js":[function(require,module,exports) {
var $ = require('../internals/export');
var isInteger = require('../internals/is-integer');

var abs = Math.abs;

// `Number.isSafeInteger` method
// https://tc39.github.io/ecma262/#sec-number.issafeinteger
$({ target: 'Number', stat: true }, {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1FFFFFFFFFFFFF;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/is-integer":"node_modules/core-js/internals/is-integer.js"}],"node_modules/core-js/modules/es.number.max-safe-integer.js":[function(require,module,exports) {
var $ = require('../internals/export');

// `Number.MAX_SAFE_INTEGER` constant
// https://tc39.github.io/ecma262/#sec-number.max_safe_integer
$({ target: 'Number', stat: true }, {
  MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/modules/es.number.min-safe-integer.js":[function(require,module,exports) {
var $ = require('../internals/export');

// `Number.MIN_SAFE_INTEGER` constant
// https://tc39.github.io/ecma262/#sec-number.min_safe_integer
$({ target: 'Number', stat: true }, {
  MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/modules/es.number.parse-float.js":[function(require,module,exports) {
var $ = require('../internals/export');
var parseFloat = require('../internals/number-parse-float');

// `Number.parseFloat` method
// https://tc39.github.io/ecma262/#sec-number.parseFloat
$({ target: 'Number', stat: true, forced: Number.parseFloat != parseFloat }, {
  parseFloat: parseFloat
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/number-parse-float":"node_modules/core-js/internals/number-parse-float.js"}],"node_modules/core-js/modules/es.number.parse-int.js":[function(require,module,exports) {
var $ = require('../internals/export');
var parseInt = require('../internals/number-parse-int');

// `Number.parseInt` method
// https://tc39.github.io/ecma262/#sec-number.parseint
$({ target: 'Number', stat: true, forced: Number.parseInt != parseInt }, {
  parseInt: parseInt
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/number-parse-int":"node_modules/core-js/internals/number-parse-int.js"}],"node_modules/core-js/internals/this-number-value.js":[function(require,module,exports) {
var classof = require('../internals/classof-raw');

// `thisNumberValue` abstract operation
// https://tc39.github.io/ecma262/#sec-thisnumbervalue
module.exports = function (value) {
  if (typeof value != 'number' && classof(value) != 'Number') {
    throw TypeError('Incorrect invocation');
  }
  return +value;
};

},{"../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js"}],"node_modules/core-js/modules/es.number.to-fixed.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var toInteger = require('../internals/to-integer');
var thisNumberValue = require('../internals/this-number-value');
var repeat = require('../internals/string-repeat');
var fails = require('../internals/fails');

var nativeToFixed = 1.0.toFixed;
var floor = Math.floor;

var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};

var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

var FORCED = nativeToFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToFixed.call({});
});

// `Number.prototype.toFixed` method
// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
$({ target: 'Number', proto: true, forced: FORCED }, {
  // eslint-disable-next-line max-statements
  toFixed: function toFixed(fractionDigits) {
    var number = thisNumberValue(this);
    var fractDigits = toInteger(fractionDigits);
    var data = [0, 0, 0, 0, 0, 0];
    var sign = '';
    var result = '0';
    var e, z, j, k;

    var multiply = function (n, c) {
      var index = -1;
      var c2 = c;
      while (++index < 6) {
        c2 += n * data[index];
        data[index] = c2 % 1e7;
        c2 = floor(c2 / 1e7);
      }
    };

    var divide = function (n) {
      var index = 6;
      var c = 0;
      while (--index >= 0) {
        c += data[index];
        data[index] = floor(c / n);
        c = (c % n) * 1e7;
      }
    };

    var dataToString = function () {
      var index = 6;
      var s = '';
      while (--index >= 0) {
        if (s !== '' || index === 0 || data[index] !== 0) {
          var t = String(data[index]);
          s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
        }
      } return s;
    };

    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
    // eslint-disable-next-line no-self-compare
    if (number != number) return 'NaN';
    if (number <= -1e21 || number >= 1e21) return String(number);
    if (number < 0) {
      sign = '-';
      number = -number;
    }
    if (number > 1e-21) {
      e = log(number * pow(2, 69, 1)) - 69;
      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = fractDigits;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        result = dataToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        result = dataToString() + repeat.call('0', fractDigits);
      }
    }
    if (fractDigits > 0) {
      k = result.length;
      result = sign + (k <= fractDigits
        ? '0.' + repeat.call('0', fractDigits - k) + result
        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
    } else {
      result = sign + result;
    } return result;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/to-integer":"node_modules/core-js/internals/to-integer.js","../internals/this-number-value":"node_modules/core-js/internals/this-number-value.js","../internals/string-repeat":"node_modules/core-js/internals/string-repeat.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.number.to-precision.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var thisNumberValue = require('../internals/this-number-value');

var nativeToPrecision = 1.0.toPrecision;

var FORCED = fails(function () {
  // IE7-
  return nativeToPrecision.call(1, undefined) !== '1';
}) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToPrecision.call({});
});

// `Number.prototype.toPrecision` method
// https://tc39.github.io/ecma262/#sec-number.prototype.toprecision
$({ target: 'Number', proto: true, forced: FORCED }, {
  toPrecision: function toPrecision(precision) {
    return precision === undefined
      ? nativeToPrecision.call(thisNumberValue(this))
      : nativeToPrecision.call(thisNumberValue(this), precision);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/this-number-value":"node_modules/core-js/internals/this-number-value.js"}],"node_modules/core-js/internals/math-log1p.js":[function(require,module,exports) {
var log = Math.log;

// `Math.log1p` method implementation
// https://tc39.github.io/ecma262/#sec-math.log1p
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
};

},{}],"node_modules/core-js/modules/es.math.acosh.js":[function(require,module,exports) {
var $ = require('../internals/export');
var log1p = require('../internals/math-log1p');

var nativeAcosh = Math.acosh;
var log = Math.log;
var sqrt = Math.sqrt;
var LN2 = Math.LN2;

var FORCED = !nativeAcosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  || Math.floor(nativeAcosh(Number.MAX_VALUE)) != 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  || nativeAcosh(Infinity) != Infinity;

// `Math.acosh` method
// https://tc39.github.io/ecma262/#sec-math.acosh
$({ target: 'Math', stat: true, forced: FORCED }, {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? log(x) + LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/math-log1p":"node_modules/core-js/internals/math-log1p.js"}],"node_modules/core-js/modules/es.math.asinh.js":[function(require,module,exports) {
var $ = require('../internals/export');

var nativeAsinh = Math.asinh;
var log = Math.log;
var sqrt = Math.sqrt;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
}

// `Math.asinh` method
// https://tc39.github.io/ecma262/#sec-math.asinh
// Tor Browser bug: Math.asinh(0) -> -0
$({ target: 'Math', stat: true, forced: !(nativeAsinh && 1 / nativeAsinh(0) > 0) }, {
  asinh: asinh
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/modules/es.math.atanh.js":[function(require,module,exports) {
var $ = require('../internals/export');

var nativeAtanh = Math.atanh;
var log = Math.log;

// `Math.atanh` method
// https://tc39.github.io/ecma262/#sec-math.atanh
// Tor Browser bug: Math.atanh(-0) -> 0
$({ target: 'Math', stat: true, forced: !(nativeAtanh && 1 / nativeAtanh(-0) < 0) }, {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/internals/math-sign.js":[function(require,module,exports) {
// `Math.sign` method implementation
// https://tc39.github.io/ecma262/#sec-math.sign
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],"node_modules/core-js/modules/es.math.cbrt.js":[function(require,module,exports) {
var $ = require('../internals/export');
var sign = require('../internals/math-sign');

var abs = Math.abs;
var pow = Math.pow;

// `Math.cbrt` method
// https://tc39.github.io/ecma262/#sec-math.cbrt
$({ target: 'Math', stat: true }, {
  cbrt: function cbrt(x) {
    return sign(x = +x) * pow(abs(x), 1 / 3);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/math-sign":"node_modules/core-js/internals/math-sign.js"}],"node_modules/core-js/modules/es.math.clz32.js":[function(require,module,exports) {
var $ = require('../internals/export');

var floor = Math.floor;
var log = Math.log;
var LOG2E = Math.LOG2E;

// `Math.clz32` method
// https://tc39.github.io/ecma262/#sec-math.clz32
$({ target: 'Math', stat: true }, {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - floor(log(x + 0.5) * LOG2E) : 32;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/internals/math-expm1.js":[function(require,module,exports) {
var nativeExpm1 = Math.expm1;
var exp = Math.exp;

// `Math.expm1` method implementation
// https://tc39.github.io/ecma262/#sec-math.expm1
module.exports = (!nativeExpm1
  // Old FF bug
  || nativeExpm1(10) > 22025.465794806719 || nativeExpm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || nativeExpm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
} : nativeExpm1;

},{}],"node_modules/core-js/modules/es.math.cosh.js":[function(require,module,exports) {
var $ = require('../internals/export');
var expm1 = require('../internals/math-expm1');

var nativeCosh = Math.cosh;
var abs = Math.abs;
var E = Math.E;

// `Math.cosh` method
// https://tc39.github.io/ecma262/#sec-math.cosh
$({ target: 'Math', stat: true, forced: !nativeCosh || nativeCosh(710) === Infinity }, {
  cosh: function cosh(x) {
    var t = expm1(abs(x) - 1) + 1;
    return (t + 1 / (t * E * E)) * (E / 2);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/math-expm1":"node_modules/core-js/internals/math-expm1.js"}],"node_modules/core-js/modules/es.math.expm1.js":[function(require,module,exports) {
var $ = require('../internals/export');
var expm1 = require('../internals/math-expm1');

// `Math.expm1` method
// https://tc39.github.io/ecma262/#sec-math.expm1
$({ target: 'Math', stat: true, forced: expm1 != Math.expm1 }, { expm1: expm1 });

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/math-expm1":"node_modules/core-js/internals/math-expm1.js"}],"node_modules/core-js/internals/math-fround.js":[function(require,module,exports) {
var sign = require('../internals/math-sign');

var abs = Math.abs;
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

// `Math.fround` method implementation
// https://tc39.github.io/ecma262/#sec-math.fround
module.exports = Math.fround || function fround(x) {
  var $abs = abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"../internals/math-sign":"node_modules/core-js/internals/math-sign.js"}],"node_modules/core-js/modules/es.math.fround.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fround = require('../internals/math-fround');

// `Math.fround` method
// https://tc39.github.io/ecma262/#sec-math.fround
$({ target: 'Math', stat: true }, { fround: fround });

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/math-fround":"node_modules/core-js/internals/math-fround.js"}],"node_modules/core-js/modules/es.math.hypot.js":[function(require,module,exports) {
var $ = require('../internals/export');

var $hypot = Math.hypot;
var abs = Math.abs;
var sqrt = Math.sqrt;

// Chrome 77 bug
// https://bugs.chromium.org/p/v8/issues/detail?id=9546
var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;

// `Math.hypot` method
// https://tc39.github.io/ecma262/#sec-math.hypot
$({ target: 'Math', stat: true, forced: BUGGY }, {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * sqrt(sum);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/modules/es.math.imul.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');

var nativeImul = Math.imul;

var FORCED = fails(function () {
  return nativeImul(0xFFFFFFFF, 5) != -5 || nativeImul.length != 2;
});

// `Math.imul` method
// https://tc39.github.io/ecma262/#sec-math.imul
// some WebKit versions fails with big numbers, some has wrong arity
$({ target: 'Math', stat: true, forced: FORCED }, {
  imul: function imul(x, y) {
    var UINT16 = 0xFFFF;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.math.log10.js":[function(require,module,exports) {
var $ = require('../internals/export');

var log = Math.log;
var LOG10E = Math.LOG10E;

// `Math.log10` method
// https://tc39.github.io/ecma262/#sec-math.log10
$({ target: 'Math', stat: true }, {
  log10: function log10(x) {
    return log(x) * LOG10E;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/modules/es.math.log1p.js":[function(require,module,exports) {
var $ = require('../internals/export');
var log1p = require('../internals/math-log1p');

// `Math.log1p` method
// https://tc39.github.io/ecma262/#sec-math.log1p
$({ target: 'Math', stat: true }, { log1p: log1p });

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/math-log1p":"node_modules/core-js/internals/math-log1p.js"}],"node_modules/core-js/modules/es.math.log2.js":[function(require,module,exports) {
var $ = require('../internals/export');

var log = Math.log;
var LN2 = Math.LN2;

// `Math.log2` method
// https://tc39.github.io/ecma262/#sec-math.log2
$({ target: 'Math', stat: true }, {
  log2: function log2(x) {
    return log(x) / LN2;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/modules/es.math.sign.js":[function(require,module,exports) {
var $ = require('../internals/export');
var sign = require('../internals/math-sign');

// `Math.sign` method
// https://tc39.github.io/ecma262/#sec-math.sign
$({ target: 'Math', stat: true }, {
  sign: sign
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/math-sign":"node_modules/core-js/internals/math-sign.js"}],"node_modules/core-js/modules/es.math.sinh.js":[function(require,module,exports) {
var $ = require('../internals/export');
var fails = require('../internals/fails');
var expm1 = require('../internals/math-expm1');

var abs = Math.abs;
var exp = Math.exp;
var E = Math.E;

var FORCED = fails(function () {
  return Math.sinh(-2e-17) != -2e-17;
});

// `Math.sinh` method
// https://tc39.github.io/ecma262/#sec-math.sinh
// V8 near Chromium 38 has a problem with very small numbers
$({ target: 'Math', stat: true, forced: FORCED }, {
  sinh: function sinh(x) {
    return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/math-expm1":"node_modules/core-js/internals/math-expm1.js"}],"node_modules/core-js/modules/es.math.tanh.js":[function(require,module,exports) {
var $ = require('../internals/export');
var expm1 = require('../internals/math-expm1');

var exp = Math.exp;

// `Math.tanh` method
// https://tc39.github.io/ecma262/#sec-math.tanh
$({ target: 'Math', stat: true }, {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/math-expm1":"node_modules/core-js/internals/math-expm1.js"}],"node_modules/core-js/modules/es.math.to-string-tag.js":[function(require,module,exports) {
var setToStringTag = require('../internals/set-to-string-tag');

// Math[@@toStringTag] property
// https://tc39.github.io/ecma262/#sec-math-@@tostringtag
setToStringTag(Math, 'Math', true);

},{"../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js"}],"node_modules/core-js/modules/es.math.trunc.js":[function(require,module,exports) {
var $ = require('../internals/export');

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.github.io/ecma262/#sec-math.trunc
$({ target: 'Math', stat: true }, {
  trunc: function trunc(it) {
    return (it > 0 ? floor : ceil)(it);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/modules/es.date.now.js":[function(require,module,exports) {
var $ = require('../internals/export');

// `Date.now` method
// https://tc39.github.io/ecma262/#sec-date.now
$({ target: 'Date', stat: true }, {
  now: function now() {
    return new Date().getTime();
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/modules/es.date.to-json.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var toObject = require('../internals/to-object');
var toPrimitive = require('../internals/to-primitive');

var FORCED = fails(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
});

// `Date.prototype.toJSON` method
// https://tc39.github.io/ecma262/#sec-date.prototype.tojson
$({ target: 'Date', proto: true, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js"}],"node_modules/core-js/internals/date-to-iso-string.js":[function(require,module,exports) {
'use strict';
var fails = require('../internals/fails');
var padStart = require('../internals/string-pad').start;

var abs = Math.abs;
var DatePrototype = Date.prototype;
var getTime = DatePrototype.getTime;
var nativeDateToISOString = DatePrototype.toISOString;

// `Date.prototype.toISOString` method implementation
// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit fails here:
module.exports = (fails(function () {
  return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  nativeDateToISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var date = this;
  var year = date.getUTCFullYear();
  var milliseconds = date.getUTCMilliseconds();
  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
  return sign + padStart(abs(year), sign ? 6 : 4, 0) +
    '-' + padStart(date.getUTCMonth() + 1, 2, 0) +
    '-' + padStart(date.getUTCDate(), 2, 0) +
    'T' + padStart(date.getUTCHours(), 2, 0) +
    ':' + padStart(date.getUTCMinutes(), 2, 0) +
    ':' + padStart(date.getUTCSeconds(), 2, 0) +
    '.' + padStart(milliseconds, 3, 0) +
    'Z';
} : nativeDateToISOString;

},{"../internals/fails":"node_modules/core-js/internals/fails.js","../internals/string-pad":"node_modules/core-js/internals/string-pad.js"}],"node_modules/core-js/modules/es.date.to-iso-string.js":[function(require,module,exports) {
var $ = require('../internals/export');
var toISOString = require('../internals/date-to-iso-string');

// `Date.prototype.toISOString` method
// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit has a broken implementations
$({ target: 'Date', proto: true, forced: Date.prototype.toISOString !== toISOString }, {
  toISOString: toISOString
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/date-to-iso-string":"node_modules/core-js/internals/date-to-iso-string.js"}],"node_modules/core-js/modules/es.date.to-string.js":[function(require,module,exports) {
var redefine = require('../internals/redefine');

var DatePrototype = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var nativeDateToString = DatePrototype[TO_STRING];
var getTime = DatePrototype.getTime;

// `Date.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-date.prototype.tostring
if (new Date(NaN) + '' != INVALID_DATE) {
  redefine(DatePrototype, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? nativeDateToString.call(this) : INVALID_DATE;
  });
}

},{"../internals/redefine":"node_modules/core-js/internals/redefine.js"}],"node_modules/core-js/internals/date-to-primitive.js":[function(require,module,exports) {
'use strict';
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');

module.exports = function (hint) {
  if (hint !== 'string' && hint !== 'number' && hint !== 'default') {
    throw TypeError('Incorrect hint');
  } return toPrimitive(anObject(this), hint !== 'number');
};

},{"../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js"}],"node_modules/core-js/modules/es.date.to-primitive.js":[function(require,module,exports) {
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var dateToPrimitive = require('../internals/date-to-primitive');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var DatePrototype = Date.prototype;

// `Date.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-date.prototype-@@toprimitive
if (!(TO_PRIMITIVE in DatePrototype)) {
  createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);
}

},{"../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js","../internals/date-to-primitive":"node_modules/core-js/internals/date-to-primitive.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/modules/es.json.stringify.js":[function(require,module,exports) {
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var fails = require('../internals/fails');

var $stringify = getBuiltIn('JSON', 'stringify');
var re = /[\uD800-\uDFFF]/g;
var low = /^[\uD800-\uDBFF]$/;
var hi = /^[\uDC00-\uDFFF]$/;

var fix = function (match, offset, string) {
  var prev = string.charAt(offset - 1);
  var next = string.charAt(offset + 1);
  if ((low.test(match) && !hi.test(next)) || (hi.test(match) && !low.test(prev))) {
    return '\\u' + match.charCodeAt(0).toString(16);
  } return match;
};

var FORCED = fails(function () {
  return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"'
    || $stringify('\uDEAD') !== '"\\udead"';
});

if ($stringify) {
  // https://github.com/tc39/proposal-well-formed-stringify
  $({ target: 'JSON', stat: true, forced: FORCED }, {
    // eslint-disable-next-line no-unused-vars
    stringify: function stringify(it, replacer, space) {
      var result = $stringify.apply(null, arguments);
      return typeof result == 'string' ? result.replace(re, fix) : result;
    }
  });
}

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/get-built-in":"node_modules/core-js/internals/get-built-in.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.json.to-string-tag.js":[function(require,module,exports) {

var global = require('../internals/global');
var setToStringTag = require('../internals/set-to-string-tag');

// JSON[@@toStringTag] property
// https://tc39.github.io/ecma262/#sec-json-@@tostringtag
setToStringTag(global.JSON, 'JSON', true);

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js"}],"node_modules/core-js/internals/native-promise-constructor.js":[function(require,module,exports) {

var global = require('../internals/global');

module.exports = global.Promise;

},{"../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/internals/redefine-all.js":[function(require,module,exports) {
var redefine = require('../internals/redefine');

module.exports = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);
  return target;
};

},{"../internals/redefine":"node_modules/core-js/internals/redefine.js"}],"node_modules/core-js/internals/an-instance.js":[function(require,module,exports) {
module.exports = function (it, Constructor, name) {
  if (!(it instanceof Constructor)) {
    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
  } return it;
};

},{}],"node_modules/core-js/internals/engine-is-ios.js":[function(require,module,exports) {
var userAgent = require('../internals/engine-user-agent');

module.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);

},{"../internals/engine-user-agent":"node_modules/core-js/internals/engine-user-agent.js"}],"node_modules/core-js/internals/task.js":[function(require,module,exports) {


var global = require('../internals/global');
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');
var bind = require('../internals/function-bind-context');
var html = require('../internals/html');
var createElement = require('../internals/document-create-element');
var IS_IOS = require('../internals/engine-is-ios');

var location = global.location;
var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;

var run = function (id) {
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global.postMessage(id + '', location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (classof(process) == 'process') {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && !fails(post)) {
    defer = post;
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js","../internals/function-bind-context":"node_modules/core-js/internals/function-bind-context.js","../internals/html":"node_modules/core-js/internals/html.js","../internals/document-create-element":"node_modules/core-js/internals/document-create-element.js","../internals/engine-is-ios":"node_modules/core-js/internals/engine-is-ios.js"}],"node_modules/core-js/internals/microtask.js":[function(require,module,exports) {


var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var classof = require('../internals/classof-raw');
var macrotask = require('../internals/task').set;
var IS_IOS = require('../internals/engine-is-ios');

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var IS_NODE = classof(process) == 'process';
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  } else if (MutationObserver && !IS_IOS) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    then = promise.then;
    notify = function () {
      then.call(promise, flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }
}

module.exports = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  } last = task;
};

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js","../internals/task":"node_modules/core-js/internals/task.js","../internals/engine-is-ios":"node_modules/core-js/internals/engine-is-ios.js"}],"node_modules/core-js/internals/new-promise-capability.js":[function(require,module,exports) {
'use strict';
var aFunction = require('../internals/a-function');

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
};

// 25.4.1.5 NewPromiseCapability(C)
module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"../internals/a-function":"node_modules/core-js/internals/a-function.js"}],"node_modules/core-js/internals/promise-resolve.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var newPromiseCapability = require('../internals/new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/new-promise-capability":"node_modules/core-js/internals/new-promise-capability.js"}],"node_modules/core-js/internals/host-report-errors.js":[function(require,module,exports) {

var global = require('../internals/global');

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length === 1 ? console.error(a) : console.error(a, b);
  }
};

},{"../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/internals/perform.js":[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};

},{}],"node_modules/core-js/modules/es.promise.js":[function(require,module,exports) {


'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var global = require('../internals/global');
var getBuiltIn = require('../internals/get-built-in');
var NativePromise = require('../internals/native-promise-constructor');
var redefine = require('../internals/redefine');
var redefineAll = require('../internals/redefine-all');
var setToStringTag = require('../internals/set-to-string-tag');
var setSpecies = require('../internals/set-species');
var isObject = require('../internals/is-object');
var aFunction = require('../internals/a-function');
var anInstance = require('../internals/an-instance');
var classof = require('../internals/classof-raw');
var inspectSource = require('../internals/inspect-source');
var iterate = require('../internals/iterate');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var speciesConstructor = require('../internals/species-constructor');
var task = require('../internals/task').set;
var microtask = require('../internals/microtask');
var promiseResolve = require('../internals/promise-resolve');
var hostReportErrors = require('../internals/host-report-errors');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var InternalStateModule = require('../internals/internal-state');
var isForced = require('../internals/is-forced');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var SPECIES = wellKnownSymbol('species');
var PROMISE = 'Promise';
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var PromiseConstructor = NativePromise;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var $fetch = getBuiltIn('fetch');
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;
var IS_NODE = classof(process) == 'process';
var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;
var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

var FORCED = isForced(PROMISE, function () {
  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
  if (!GLOBAL_CORE_JS_PROMISE) {
    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // We can't detect it synchronously, so just check versions
    if (V8_VERSION === 66) return true;
    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;
  }
  // We need Promise#finally in the pure version for preventing prototype pollution
  if (IS_PURE && !PromiseConstructor.prototype['finally']) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;
  // Detect correctness of subclassing with @@species support
  var promise = PromiseConstructor.resolve(1);
  var FakePromise = function (exec) {
    exec(function () { /* empty */ }, function () { /* empty */ });
  };
  var constructor = promise.constructor = {};
  constructor[SPECIES] = FakePromise;
  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
});

var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
});

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};

var notify = function (promise, state, isReject) {
  if (state.notified) return;
  state.notified = true;
  var chain = state.reactions;
  microtask(function () {
    var value = state.value;
    var ok = state.state == FULFILLED;
    var index = 0;
    // variable length - can't use forEach
    while (chain.length > index) {
      var reaction = chain[index++];
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
            state.rejection = HANDLED;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // can throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (error) {
        if (domain && !exited) domain.exit();
        reject(error);
      }
    }
    state.reactions = [];
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(promise, state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (handler = global['on' + name]) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (promise, state) {
  task.call(global, function () {
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (promise, state) {
  task.call(global, function () {
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, promise, state, unwrap) {
  return function (value) {
    fn(promise, state, value, unwrap);
  };
};

var internalReject = function (promise, state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(promise, state, true);
};

var internalResolve = function (promise, state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          then.call(value,
            bind(internalResolve, promise, wrapper, state),
            bind(internalReject, promise, wrapper, state)
          );
        } catch (error) {
          internalReject(promise, wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(promise, state, false);
    }
  } catch (error) {
    internalReject(promise, { done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromiseConstructor, PROMISE);
    aFunction(executor);
    Internal.call(this);
    var state = getInternalState(this);
    try {
      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
    } catch (error) {
      internalReject(this, state, error);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: [],
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };
  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
    // `Promise.prototype.then` method
    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
    then: function then(onFulfilled, onRejected) {
      var state = getInternalPromiseState(this);
      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = IS_NODE ? process.domain : undefined;
      state.parent = true;
      state.reactions.push(reaction);
      if (state.state != PENDING) notify(this, state, false);
      return reaction.promise;
    },
    // `Promise.prototype.catch` method
    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, promise, state);
    this.reject = bind(internalReject, promise, state);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && typeof NativePromise == 'function') {
    nativeThen = NativePromise.prototype.then;

    // wrap native Promise#then for native async functions
    redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {
      var that = this;
      return new PromiseConstructor(function (resolve, reject) {
        nativeThen.call(that, resolve, reject);
      }).then(onFulfilled, onRejected);
    // https://github.com/zloirock/core-js/issues/640
    }, { unsafe: true });

    // wrap fetch result
    if (typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {
      // eslint-disable-next-line no-unused-vars
      fetch: function fetch(input /* , init */) {
        return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));
      }
    });
  }
}

$({ global: true, wrap: true, forced: FORCED }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);

PromiseWrapper = getBuiltIn(PROMISE);

// statics
$({ target: PROMISE, stat: true, forced: FORCED }, {
  // `Promise.reject` method
  // https://tc39.github.io/ecma262/#sec-promise.reject
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    capability.reject.call(undefined, r);
    return capability.promise;
  }
});

$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
  // `Promise.resolve` method
  // https://tc39.github.io/ecma262/#sec-promise.resolve
  resolve: function resolve(x) {
    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
  }
});

$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
  // `Promise.all` method
  // https://tc39.github.io/ecma262/#sec-promise.all
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        $promiseResolve.call(C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  },
  // `Promise.race` method
  // https://tc39.github.io/ecma262/#sec-promise.race
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      iterate(iterable, function (promise) {
        $promiseResolve.call(C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/get-built-in":"node_modules/core-js/internals/get-built-in.js","../internals/native-promise-constructor":"node_modules/core-js/internals/native-promise-constructor.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/redefine-all":"node_modules/core-js/internals/redefine-all.js","../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js","../internals/set-species":"node_modules/core-js/internals/set-species.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/a-function":"node_modules/core-js/internals/a-function.js","../internals/an-instance":"node_modules/core-js/internals/an-instance.js","../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js","../internals/inspect-source":"node_modules/core-js/internals/inspect-source.js","../internals/iterate":"node_modules/core-js/internals/iterate.js","../internals/check-correctness-of-iteration":"node_modules/core-js/internals/check-correctness-of-iteration.js","../internals/species-constructor":"node_modules/core-js/internals/species-constructor.js","../internals/task":"node_modules/core-js/internals/task.js","../internals/microtask":"node_modules/core-js/internals/microtask.js","../internals/promise-resolve":"node_modules/core-js/internals/promise-resolve.js","../internals/host-report-errors":"node_modules/core-js/internals/host-report-errors.js","../internals/new-promise-capability":"node_modules/core-js/internals/new-promise-capability.js","../internals/perform":"node_modules/core-js/internals/perform.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/is-forced":"node_modules/core-js/internals/is-forced.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/engine-v8-version":"node_modules/core-js/internals/engine-v8-version.js"}],"node_modules/core-js/modules/es.promise.all-settled.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var aFunction = require('../internals/a-function');
var newPromiseCapabilityModule = require('../internals/new-promise-capability');
var perform = require('../internals/perform');
var iterate = require('../internals/iterate');

// `Promise.allSettled` method
// https://github.com/tc39/proposal-promise-allSettled
$({ target: 'Promise', stat: true }, {
  allSettled: function allSettled(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aFunction(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        promiseResolve.call(C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = { status: 'fulfilled', value: value };
          --remaining || resolve(values);
        }, function (e) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = { status: 'rejected', reason: e };
          --remaining || resolve(values);
        });
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/a-function":"node_modules/core-js/internals/a-function.js","../internals/new-promise-capability":"node_modules/core-js/internals/new-promise-capability.js","../internals/perform":"node_modules/core-js/internals/perform.js","../internals/iterate":"node_modules/core-js/internals/iterate.js"}],"node_modules/core-js/modules/es.promise.finally.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var IS_PURE = require('../internals/is-pure');
var NativePromise = require('../internals/native-promise-constructor');
var fails = require('../internals/fails');
var getBuiltIn = require('../internals/get-built-in');
var speciesConstructor = require('../internals/species-constructor');
var promiseResolve = require('../internals/promise-resolve');
var redefine = require('../internals/redefine');

// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
var NON_GENERIC = !!NativePromise && fails(function () {
  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
});

// `Promise.prototype.finally` method
// https://tc39.github.io/ecma262/#sec-promise.prototype.finally
$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
  'finally': function (onFinally) {
    var C = speciesConstructor(this, getBuiltIn('Promise'));
    var isFunction = typeof onFinally == 'function';
    return this.then(
      isFunction ? function (x) {
        return promiseResolve(C, onFinally()).then(function () { return x; });
      } : onFinally,
      isFunction ? function (e) {
        return promiseResolve(C, onFinally()).then(function () { throw e; });
      } : onFinally
    );
  }
});

// patch native Promise.prototype for native async functions
if (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {
  redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);
}

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js","../internals/native-promise-constructor":"node_modules/core-js/internals/native-promise-constructor.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/get-built-in":"node_modules/core-js/internals/get-built-in.js","../internals/species-constructor":"node_modules/core-js/internals/species-constructor.js","../internals/promise-resolve":"node_modules/core-js/internals/promise-resolve.js","../internals/redefine":"node_modules/core-js/internals/redefine.js"}],"node_modules/core-js/internals/collection.js":[function(require,module,exports) {

'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var isForced = require('../internals/is-forced');
var redefine = require('../internals/redefine');
var InternalMetadataModule = require('../internals/internal-metadata');
var iterate = require('../internals/iterate');
var anInstance = require('../internals/an-instance');
var isObject = require('../internals/is-object');
var fails = require('../internals/fails');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var setToStringTag = require('../internals/set-to-string-tag');
var inheritIfRequired = require('../internals/inherit-if-required');

module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
  var ADDER = IS_MAP ? 'set' : 'add';
  var NativeConstructor = global[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var Constructor = NativeConstructor;
  var exported = {};

  var fixMethod = function (KEY) {
    var nativeMethod = NativePrototype[KEY];
    redefine(NativePrototype, KEY,
      KEY == 'add' ? function add(value) {
        nativeMethod.call(this, value === 0 ? 0 : value);
        return this;
      } : KEY == 'delete' ? function (key) {
        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
      } : KEY == 'get' ? function get(key) {
        return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
      } : KEY == 'has' ? function has(key) {
        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
      } : function set(key, value) {
        nativeMethod.call(this, key === 0 ? 0 : key, value);
        return this;
      }
    );
  };

  // eslint-disable-next-line max-len
  if (isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
    new NativeConstructor().entries().next();
  })))) {
    // create collection constructor
    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule.REQUIRED = true;
  } else if (isForced(CONSTRUCTOR_NAME, true)) {
    var instance = new Constructor();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    // eslint-disable-next-line no-new
    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new NativeConstructor();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      Constructor = wrapper(function (dummy, iterable) {
        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
        if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
        return that;
      });
      Constructor.prototype = NativePrototype;
      NativePrototype.constructor = Constructor;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

    // weak collections should not contains .clear method
    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
  }

  exported[CONSTRUCTOR_NAME] = Constructor;
  $({ global: true, forced: Constructor != NativeConstructor }, exported);

  setToStringTag(Constructor, CONSTRUCTOR_NAME);

  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

  return Constructor;
};

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/is-forced":"node_modules/core-js/internals/is-forced.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/internal-metadata":"node_modules/core-js/internals/internal-metadata.js","../internals/iterate":"node_modules/core-js/internals/iterate.js","../internals/an-instance":"node_modules/core-js/internals/an-instance.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/check-correctness-of-iteration":"node_modules/core-js/internals/check-correctness-of-iteration.js","../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js","../internals/inherit-if-required":"node_modules/core-js/internals/inherit-if-required.js"}],"node_modules/core-js/internals/collection-strong.js":[function(require,module,exports) {
var define;
'use strict';
var defineProperty = require('../internals/object-define-property').f;
var create = require('../internals/object-create');
var redefineAll = require('../internals/redefine-all');
var bind = require('../internals/function-bind-context');
var anInstance = require('../internals/an-instance');
var iterate = require('../internals/iterate');
var defineIterator = require('../internals/define-iterator');
var setSpecies = require('../internals/set-species');
var DESCRIPTORS = require('../internals/descriptors');
var fastKey = require('../internals/internal-metadata').fastKey;
var InternalStateModule = require('../internals/internal-state');

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, CONSTRUCTOR_NAME);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        index: create(null),
        first: undefined,
        last: undefined,
        size: 0
      });
      if (!DESCRIPTORS) that.size = 0;
      if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
    });

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var entry = getEntry(that, key);
      var previous, index;
      // change existing entry
      if (entry) {
        entry.value = value;
      // create new entry
      } else {
        state.last = entry = {
          index: index = fastKey(key, true),
          key: key,
          value: value,
          previous: previous = state.last,
          next: undefined,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS) state.size++;
        else that.size++;
        // add to index
        if (index !== 'F') state.index[index] = entry;
      } return that;
    };

    var getEntry = function (that, key) {
      var state = getInternalState(that);
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return state.index[index];
      // frozen object case
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key) return entry;
      }
    };

    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        var that = this;
        var state = getInternalState(that);
        var data = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = undefined;
          delete data[entry.index];
          entry = entry.next;
        }
        state.first = state.last = undefined;
        if (DESCRIPTORS) state.size = 0;
        else that.size = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = this;
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next;
          if (next) next.previous = prev;
          if (state.first == entry) state.first = next;
          if (state.last == entry) state.last = prev;
          if (DESCRIPTORS) state.size--;
          else that.size--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        var state = getInternalState(this);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          // revert to the last existing entry
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(this, key);
      }
    });

    redefineAll(C.prototype, IS_MAP ? {
      // 23.1.3.6 Map.prototype.get(key)
      get: function get(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // 23.1.3.9 Map.prototype.set(key, value)
      set: function set(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // 23.2.3.1 Set.prototype.add(value)
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS) defineProperty(C.prototype, 'size', {
      get: function () {
        return getInternalState(this).size;
      }
    });
    return C;
  },
  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
      setInternalState(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind: kind,
        last: undefined
      });
    }, function () {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      // revert to the last existing entry
      while (entry && entry.removed) entry = entry.previous;
      // get next entry
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        // or finish the iteration
        state.target = undefined;
        return { value: undefined, done: true };
      }
      // return step by kind
      if (kind == 'keys') return { value: entry.key, done: false };
      if (kind == 'values') return { value: entry.value, done: false };
      return { value: [entry.key, entry.value], done: false };
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(CONSTRUCTOR_NAME);
  }
};

},{"../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/object-create":"node_modules/core-js/internals/object-create.js","../internals/redefine-all":"node_modules/core-js/internals/redefine-all.js","../internals/function-bind-context":"node_modules/core-js/internals/function-bind-context.js","../internals/an-instance":"node_modules/core-js/internals/an-instance.js","../internals/iterate":"node_modules/core-js/internals/iterate.js","../internals/define-iterator":"node_modules/core-js/internals/define-iterator.js","../internals/set-species":"node_modules/core-js/internals/set-species.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/internal-metadata":"node_modules/core-js/internals/internal-metadata.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js"}],"node_modules/core-js/modules/es.map.js":[function(require,module,exports) {
'use strict';
var collection = require('../internals/collection');
var collectionStrong = require('../internals/collection-strong');

// `Map` constructor
// https://tc39.github.io/ecma262/#sec-map-objects
module.exports = collection('Map', function (init) {
  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);

},{"../internals/collection":"node_modules/core-js/internals/collection.js","../internals/collection-strong":"node_modules/core-js/internals/collection-strong.js"}],"node_modules/core-js/modules/es.set.js":[function(require,module,exports) {
'use strict';
var collection = require('../internals/collection');
var collectionStrong = require('../internals/collection-strong');

// `Set` constructor
// https://tc39.github.io/ecma262/#sec-set-objects
module.exports = collection('Set', function (init) {
  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);

},{"../internals/collection":"node_modules/core-js/internals/collection.js","../internals/collection-strong":"node_modules/core-js/internals/collection-strong.js"}],"node_modules/core-js/internals/collection-weak.js":[function(require,module,exports) {
var define;
'use strict';
var redefineAll = require('../internals/redefine-all');
var getWeakData = require('../internals/internal-metadata').getWeakData;
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var anInstance = require('../internals/an-instance');
var iterate = require('../internals/iterate');
var ArrayIterationModule = require('../internals/array-iteration');
var $has = require('../internals/has');
var InternalStateModule = require('../internals/internal-state');

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
var find = ArrayIterationModule.find;
var findIndex = ArrayIterationModule.findIndex;
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (store) {
  return store.frozen || (store.frozen = new UncaughtFrozenStore());
};

var UncaughtFrozenStore = function () {
  this.entries = [];
};

var findUncaughtFrozen = function (store, key) {
  return find(store.entries, function (it) {
    return it[0] === key;
  });
};

UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.entries.push([key, value]);
  },
  'delete': function (key) {
    var index = findIndex(this.entries, function (it) {
      return it[0] === key;
    });
    if (~index) this.entries.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, CONSTRUCTOR_NAME);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        id: id++,
        frozen: undefined
      });
      if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
    });

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var data = getWeakData(anObject(key), true);
      if (data === true) uncaughtFrozenStore(state).set(key, value);
      else data[state.id] = value;
      return that;
    };

    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
        return data && $has(data, state.id) && delete data[state.id];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state).has(key);
        return data && $has(data, state.id);
      }
    });

    redefineAll(C.prototype, IS_MAP ? {
      // 23.3.3.3 WeakMap.prototype.get(key)
      get: function get(key) {
        var state = getInternalState(this);
        if (isObject(key)) {
          var data = getWeakData(key);
          if (data === true) return uncaughtFrozenStore(state).get(key);
          return data ? data[state.id] : undefined;
        }
      },
      // 23.3.3.5 WeakMap.prototype.set(key, value)
      set: function set(key, value) {
        return define(this, key, value);
      }
    } : {
      // 23.4.3.1 WeakSet.prototype.add(value)
      add: function add(value) {
        return define(this, value, true);
      }
    });

    return C;
  }
};

},{"../internals/redefine-all":"node_modules/core-js/internals/redefine-all.js","../internals/internal-metadata":"node_modules/core-js/internals/internal-metadata.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/an-instance":"node_modules/core-js/internals/an-instance.js","../internals/iterate":"node_modules/core-js/internals/iterate.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js"}],"node_modules/core-js/modules/es.weak-map.js":[function(require,module,exports) {

'use strict';
var global = require('../internals/global');
var redefineAll = require('../internals/redefine-all');
var InternalMetadataModule = require('../internals/internal-metadata');
var collection = require('../internals/collection');
var collectionWeak = require('../internals/collection-weak');
var isObject = require('../internals/is-object');
var enforceIternalState = require('../internals/internal-state').enforce;
var NATIVE_WEAK_MAP = require('../internals/native-weak-map');

var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var isExtensible = Object.isExtensible;
var InternalWeakMap;

var wrapper = function (init) {
  return function WeakMap() {
    return init(this, arguments.length ? arguments[0] : undefined);
  };
};

// `WeakMap` constructor
// https://tc39.github.io/ecma262/#sec-weakmap-constructor
var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak);

// IE11 WeakMap frozen keys fix
// We can't use feature detection because it crash some old IE builds
// https://github.com/zloirock/core-js/issues/485
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
  InternalMetadataModule.REQUIRED = true;
  var WeakMapPrototype = $WeakMap.prototype;
  var nativeDelete = WeakMapPrototype['delete'];
  var nativeHas = WeakMapPrototype.has;
  var nativeGet = WeakMapPrototype.get;
  var nativeSet = WeakMapPrototype.set;
  redefineAll(WeakMapPrototype, {
    'delete': function (key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeDelete.call(this, key) || state.frozen['delete'](key);
      } return nativeDelete.call(this, key);
    },
    has: function has(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas.call(this, key) || state.frozen.has(key);
      } return nativeHas.call(this, key);
    },
    get: function get(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);
      } return nativeGet.call(this, key);
    },
    set: function set(key, value) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);
      } else nativeSet.call(this, key, value);
      return this;
    }
  });
}

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/redefine-all":"node_modules/core-js/internals/redefine-all.js","../internals/internal-metadata":"node_modules/core-js/internals/internal-metadata.js","../internals/collection":"node_modules/core-js/internals/collection.js","../internals/collection-weak":"node_modules/core-js/internals/collection-weak.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/native-weak-map":"node_modules/core-js/internals/native-weak-map.js"}],"node_modules/core-js/modules/es.weak-set.js":[function(require,module,exports) {
'use strict';
var collection = require('../internals/collection');
var collectionWeak = require('../internals/collection-weak');

// `WeakSet` constructor
// https://tc39.github.io/ecma262/#sec-weakset-constructor
collection('WeakSet', function (init) {
  return function WeakSet() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionWeak);

},{"../internals/collection":"node_modules/core-js/internals/collection.js","../internals/collection-weak":"node_modules/core-js/internals/collection-weak.js"}],"node_modules/core-js/internals/array-buffer-native.js":[function(require,module,exports) {
module.exports = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';

},{}],"node_modules/core-js/internals/to-index.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');

// `ToIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-toindex
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length or index');
  return length;
};

},{"../internals/to-integer":"node_modules/core-js/internals/to-integer.js","../internals/to-length":"node_modules/core-js/internals/to-length.js"}],"node_modules/core-js/internals/ieee754.js":[function(require,module,exports) {
// IEEE754 conversions based on https://github.com/feross/ieee754
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = 1 / 0;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;

var pack = function (number, mantissaLength, bytes) {
  var buffer = new Array(bytes);
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
  var index = 0;
  var exponent, mantissa, c;
  number = abs(number);
  // eslint-disable-next-line no-self-compare
  if (number != number || number === Infinity) {
    // eslint-disable-next-line no-self-compare
    mantissa = number != number ? 1 : 0;
    exponent = eMax;
  } else {
    exponent = floor(log(number) / LN2);
    if (number * (c = pow(2, -exponent)) < 1) {
      exponent--;
      c *= 2;
    }
    if (exponent + eBias >= 1) {
      number += rt / c;
    } else {
      number += rt * pow(2, 1 - eBias);
    }
    if (number * c >= 2) {
      exponent++;
      c /= 2;
    }
    if (exponent + eBias >= eMax) {
      mantissa = 0;
      exponent = eMax;
    } else if (exponent + eBias >= 1) {
      mantissa = (number * c - 1) * pow(2, mantissaLength);
      exponent = exponent + eBias;
    } else {
      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
      exponent = 0;
    }
  }
  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
  exponent = exponent << mantissaLength | mantissa;
  exponentLength += mantissaLength;
  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
  buffer[--index] |= sign * 128;
  return buffer;
};

var unpack = function (buffer, mantissaLength) {
  var bytes = buffer.length;
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var nBits = exponentLength - 7;
  var index = bytes - 1;
  var sign = buffer[index--];
  var exponent = sign & 127;
  var mantissa;
  sign >>= 7;
  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
  mantissa = exponent & (1 << -nBits) - 1;
  exponent >>= -nBits;
  nBits += mantissaLength;
  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
  if (exponent === 0) {
    exponent = 1 - eBias;
  } else if (exponent === eMax) {
    return mantissa ? NaN : sign ? -Infinity : Infinity;
  } else {
    mantissa = mantissa + pow(2, mantissaLength);
    exponent = exponent - eBias;
  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
};

module.exports = {
  pack: pack,
  unpack: unpack
};

},{}],"node_modules/core-js/internals/array-buffer.js":[function(require,module,exports) {

'use strict';
var global = require('../internals/global');
var DESCRIPTORS = require('../internals/descriptors');
var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefineAll = require('../internals/redefine-all');
var fails = require('../internals/fails');
var anInstance = require('../internals/an-instance');
var toInteger = require('../internals/to-integer');
var toLength = require('../internals/to-length');
var toIndex = require('../internals/to-index');
var IEEE754 = require('../internals/ieee754');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var defineProperty = require('../internals/object-define-property').f;
var arrayFill = require('../internals/array-fill');
var setToStringTag = require('../internals/set-to-string-tag');
var InternalStateModule = require('../internals/internal-state');

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length';
var WRONG_INDEX = 'Wrong index';
var NativeArrayBuffer = global[ARRAY_BUFFER];
var $ArrayBuffer = NativeArrayBuffer;
var $DataView = global[DATA_VIEW];
var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
var ObjectPrototype = Object.prototype;
var RangeError = global.RangeError;

var packIEEE754 = IEEE754.pack;
var unpackIEEE754 = IEEE754.unpack;

var packInt8 = function (number) {
  return [number & 0xFF];
};

var packInt16 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF];
};

var packInt32 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
};

var unpackInt32 = function (buffer) {
  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
};

var packFloat32 = function (number) {
  return packIEEE754(number, 23, 4);
};

var packFloat64 = function (number) {
  return packIEEE754(number, 52, 8);
};

var addGetter = function (Constructor, key) {
  defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState(this)[key]; } });
};

var get = function (view, count, index, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = bytes.slice(start, start + count);
  return isLittleEndian ? pack : pack.reverse();
};

var set = function (view, count, index, conversion, value, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = conversion(+value);
  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
};

if (!NATIVE_ARRAY_BUFFER) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    setInternalState(this, {
      bytes: arrayFill.call(new Array(byteLength), 0),
      byteLength: byteLength
    });
    if (!DESCRIPTORS) this.byteLength = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = getInternalState(buffer).byteLength;
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    setInternalState(this, {
      buffer: buffer,
      byteLength: byteLength,
      byteOffset: offset
    });
    if (!DESCRIPTORS) {
      this.buffer = buffer;
      this.byteLength = byteLength;
      this.byteOffset = offset;
    }
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, 'byteLength');
    addGetter($DataView, 'buffer');
    addGetter($DataView, 'byteLength');
    addGetter($DataView, 'byteOffset');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
    }
  });
} else {
  if (!fails(function () {
    NativeArrayBuffer(1);
  }) || !fails(function () {
    new NativeArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new NativeArrayBuffer(); // eslint-disable-line no-new
    new NativeArrayBuffer(1.5); // eslint-disable-line no-new
    new NativeArrayBuffer(NaN); // eslint-disable-line no-new
    return NativeArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new NativeArrayBuffer(toIndex(length));
    };
    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
    for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) {
        createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
      }
    }
    ArrayBufferPrototype.constructor = $ArrayBuffer;
  }

  // WebKit bug - the same parent prototype for typed arrays and data view
  if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {
    setPrototypeOf($DataViewPrototype, ObjectPrototype);
  }

  // iOS Safari 7.x bug
  var testView = new $DataView(new $ArrayBuffer(2));
  var nativeSetInt8 = $DataViewPrototype.setInt8;
  testView.setInt8(0, 2147483648);
  testView.setInt8(1, 2147483649);
  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
    setInt8: function setInt8(byteOffset, value) {
      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, { unsafe: true });
}

setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);

module.exports = {
  ArrayBuffer: $ArrayBuffer,
  DataView: $DataView
};

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/array-buffer-native":"node_modules/core-js/internals/array-buffer-native.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js","../internals/redefine-all":"node_modules/core-js/internals/redefine-all.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/an-instance":"node_modules/core-js/internals/an-instance.js","../internals/to-integer":"node_modules/core-js/internals/to-integer.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/to-index":"node_modules/core-js/internals/to-index.js","../internals/ieee754":"node_modules/core-js/internals/ieee754.js","../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js","../internals/object-set-prototype-of":"node_modules/core-js/internals/object-set-prototype-of.js","../internals/object-get-own-property-names":"node_modules/core-js/internals/object-get-own-property-names.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/array-fill":"node_modules/core-js/internals/array-fill.js","../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js"}],"node_modules/core-js/modules/es.array-buffer.constructor.js":[function(require,module,exports) {

'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var arrayBufferModule = require('../internals/array-buffer');
var setSpecies = require('../internals/set-species');

var ARRAY_BUFFER = 'ArrayBuffer';
var ArrayBuffer = arrayBufferModule[ARRAY_BUFFER];
var NativeArrayBuffer = global[ARRAY_BUFFER];

// `ArrayBuffer` constructor
// https://tc39.github.io/ecma262/#sec-arraybuffer-constructor
$({ global: true, forced: NativeArrayBuffer !== ArrayBuffer }, {
  ArrayBuffer: ArrayBuffer
});

setSpecies(ARRAY_BUFFER);

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/array-buffer":"node_modules/core-js/internals/array-buffer.js","../internals/set-species":"node_modules/core-js/internals/set-species.js"}],"node_modules/core-js/internals/array-buffer-view-core.js":[function(require,module,exports) {

'use strict';
var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');
var DESCRIPTORS = require('../internals/descriptors');
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var has = require('../internals/has');
var classof = require('../internals/classof');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var redefine = require('../internals/redefine');
var defineProperty = require('../internals/object-define-property').f;
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var wellKnownSymbol = require('../internals/well-known-symbol');
var uid = require('../internals/uid');

var Int8Array = global.Int8Array;
var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
var Uint8ClampedArray = global.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
var TypedArray = Int8Array && getPrototypeOf(Int8Array);
var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
var ObjectPrototype = Object.prototype;
var isPrototypeOf = ObjectPrototype.isPrototypeOf;

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
// Fixing native typed arrays in Opera Presto crashes the browser, see #595
var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
var TYPED_ARRAY_TAG_REQIRED = false;
var NAME;

var TypedArrayConstructorsList = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};

var isView = function isView(it) {
  var klass = classof(it);
  return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
};

var isTypedArray = function (it) {
  return isObject(it) && has(TypedArrayConstructorsList, classof(it));
};

var aTypedArray = function (it) {
  if (isTypedArray(it)) return it;
  throw TypeError('Target is not a typed array');
};

var aTypedArrayConstructor = function (C) {
  if (setPrototypeOf) {
    if (isPrototypeOf.call(TypedArray, C)) return C;
  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME)) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
      return C;
    }
  } throw TypeError('Target is not a typed array constructor');
};

var exportTypedArrayMethod = function (KEY, property, forced) {
  if (!DESCRIPTORS) return;
  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
      delete TypedArrayConstructor.prototype[KEY];
    }
  }
  if (!TypedArrayPrototype[KEY] || forced) {
    redefine(TypedArrayPrototype, KEY, forced ? property
      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
  }
};

var exportTypedArrayStaticMethod = function (KEY, property, forced) {
  var ARRAY, TypedArrayConstructor;
  if (!DESCRIPTORS) return;
  if (setPrototypeOf) {
    if (forced) for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global[ARRAY];
      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
        delete TypedArrayConstructor[KEY];
      }
    }
    if (!TypedArray[KEY] || forced) {
      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
      try {
        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array[KEY] || property);
      } catch (error) { /* empty */ }
    } else return;
  }
  for (ARRAY in TypedArrayConstructorsList) {
    TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
      redefine(TypedArrayConstructor, KEY, property);
    }
  }
};

for (NAME in TypedArrayConstructorsList) {
  if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
}

// WebKit bug - typed arrays constructors prototype is Object.prototype
if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
  // eslint-disable-next-line no-shadow
  TypedArray = function TypedArray() {
    throw TypeError('Incorrect invocation');
  };
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
  }
}

if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
  TypedArrayPrototype = TypedArray.prototype;
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
  }
}

// WebKit bug - one more object in Uint8ClampedArray prototype chain
if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
}

if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
  TYPED_ARRAY_TAG_REQIRED = true;
  defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function () {
    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
  } });
  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {
    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
  }
}

module.exports = {
  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
  aTypedArray: aTypedArray,
  aTypedArrayConstructor: aTypedArrayConstructor,
  exportTypedArrayMethod: exportTypedArrayMethod,
  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
  isView: isView,
  isTypedArray: isTypedArray,
  TypedArray: TypedArray,
  TypedArrayPrototype: TypedArrayPrototype
};

},{"../internals/array-buffer-native":"node_modules/core-js/internals/array-buffer-native.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/classof":"node_modules/core-js/internals/classof.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js","../internals/object-set-prototype-of":"node_modules/core-js/internals/object-set-prototype-of.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/uid":"node_modules/core-js/internals/uid.js"}],"node_modules/core-js/modules/es.array-buffer.is-view.js":[function(require,module,exports) {
var $ = require('../internals/export');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

// `ArrayBuffer.isView` method
// https://tc39.github.io/ecma262/#sec-arraybuffer.isview
$({ target: 'ArrayBuffer', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
  isView: ArrayBufferViewCore.isView
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js"}],"node_modules/core-js/modules/es.array-buffer.slice.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');
var fails = require('../internals/fails');
var ArrayBufferModule = require('../internals/array-buffer');
var anObject = require('../internals/an-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');
var speciesConstructor = require('../internals/species-constructor');

var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var nativeArrayBufferSlice = ArrayBuffer.prototype.slice;

var INCORRECT_SLICE = fails(function () {
  return !new ArrayBuffer(2).slice(1, undefined).byteLength;
});

// `ArrayBuffer.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice
$({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
  slice: function slice(start, end) {
    if (nativeArrayBufferSlice !== undefined && end === undefined) {
      return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
    }
    var length = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    var result = new (speciesConstructor(this, ArrayBuffer))(toLength(fin - first));
    var viewSource = new DataView(this);
    var viewTarget = new DataView(result);
    var index = 0;
    while (first < fin) {
      viewTarget.setUint8(index++, viewSource.getUint8(first++));
    } return result;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/array-buffer":"node_modules/core-js/internals/array-buffer.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/to-absolute-index":"node_modules/core-js/internals/to-absolute-index.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/species-constructor":"node_modules/core-js/internals/species-constructor.js"}],"node_modules/core-js/modules/es.data-view.js":[function(require,module,exports) {
var $ = require('../internals/export');
var ArrayBufferModule = require('../internals/array-buffer');
var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');

// `DataView` constructor
// https://tc39.github.io/ecma262/#sec-dataview-constructor
$({ global: true, forced: !NATIVE_ARRAY_BUFFER }, {
  DataView: ArrayBufferModule.DataView
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/array-buffer":"node_modules/core-js/internals/array-buffer.js","../internals/array-buffer-native":"node_modules/core-js/internals/array-buffer-native.js"}],"node_modules/core-js/internals/typed-array-constructors-require-wrappers.js":[function(require,module,exports) {

/* eslint-disable no-new */
var global = require('../internals/global');
var fails = require('../internals/fails');
var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');
var NATIVE_ARRAY_BUFFER_VIEWS = require('../internals/array-buffer-view-core').NATIVE_ARRAY_BUFFER_VIEWS;

var ArrayBuffer = global.ArrayBuffer;
var Int8Array = global.Int8Array;

module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
  Int8Array(1);
}) || !fails(function () {
  new Int8Array(-1);
}) || !checkCorrectnessOfIteration(function (iterable) {
  new Int8Array();
  new Int8Array(null);
  new Int8Array(1.5);
  new Int8Array(iterable);
}, true) || fails(function () {
  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
  return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;
});

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/check-correctness-of-iteration":"node_modules/core-js/internals/check-correctness-of-iteration.js","../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js"}],"node_modules/core-js/internals/to-positive-integer.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');

module.exports = function (it) {
  var result = toInteger(it);
  if (result < 0) throw RangeError("The argument can't be less than 0");
  return result;
};

},{"../internals/to-integer":"node_modules/core-js/internals/to-integer.js"}],"node_modules/core-js/internals/to-offset.js":[function(require,module,exports) {
var toPositiveInteger = require('../internals/to-positive-integer');

module.exports = function (it, BYTES) {
  var offset = toPositiveInteger(it);
  if (offset % BYTES) throw RangeError('Wrong offset');
  return offset;
};

},{"../internals/to-positive-integer":"node_modules/core-js/internals/to-positive-integer.js"}],"node_modules/core-js/internals/typed-array-from.js":[function(require,module,exports) {
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var getIteratorMethod = require('../internals/get-iterator-method');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var bind = require('../internals/function-bind-context');
var aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;

module.exports = function from(source /* , mapfn, thisArg */) {
  var O = toObject(source);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var i, length, result, step, iterator, next;
  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
    iterator = iteratorMethod.call(O);
    next = iterator.next;
    O = [];
    while (!(step = next.call(iterator)).done) {
      O.push(step.value);
    }
  }
  if (mapping && argumentsLength > 2) {
    mapfn = bind(mapfn, arguments[2], 2);
  }
  length = toLength(O.length);
  result = new (aTypedArrayConstructor(this))(length);
  for (i = 0; length > i; i++) {
    result[i] = mapping ? mapfn(O[i], i) : O[i];
  }
  return result;
};

},{"../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/get-iterator-method":"node_modules/core-js/internals/get-iterator-method.js","../internals/is-array-iterator-method":"node_modules/core-js/internals/is-array-iterator-method.js","../internals/function-bind-context":"node_modules/core-js/internals/function-bind-context.js","../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js"}],"node_modules/core-js/internals/typed-array-constructor.js":[function(require,module,exports) {

'use strict';
var $ = require('../internals/export');
var global = require('../internals/global');
var DESCRIPTORS = require('../internals/descriptors');
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var ArrayBufferModule = require('../internals/array-buffer');
var anInstance = require('../internals/an-instance');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var toLength = require('../internals/to-length');
var toIndex = require('../internals/to-index');
var toOffset = require('../internals/to-offset');
var toPrimitive = require('../internals/to-primitive');
var has = require('../internals/has');
var classof = require('../internals/classof');
var isObject = require('../internals/is-object');
var create = require('../internals/object-create');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var typedArrayFrom = require('../internals/typed-array-from');
var forEach = require('../internals/array-iteration').forEach;
var setSpecies = require('../internals/set-species');
var definePropertyModule = require('../internals/object-define-property');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var InternalStateModule = require('../internals/internal-state');
var inheritIfRequired = require('../internals/inherit-if-required');

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var round = Math.round;
var RangeError = global.RangeError;
var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
var TypedArray = ArrayBufferViewCore.TypedArray;
var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var isTypedArray = ArrayBufferViewCore.isTypedArray;
var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
var WRONG_LENGTH = 'Wrong length';

var fromList = function (C, list) {
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
};

var addGetter = function (it, key) {
  nativeDefineProperty(it, key, { get: function () {
    return getInternalState(this)[key];
  } });
};

var isArrayBuffer = function (it) {
  var klass;
  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
};

var isTypedArrayIndex = function (target, key) {
  return isTypedArray(target)
    && typeof key != 'symbol'
    && key in target
    && String(+key) == String(key);
};

var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
  return isTypedArrayIndex(target, key = toPrimitive(key, true))
    ? createPropertyDescriptor(2, target[key])
    : nativeGetOwnPropertyDescriptor(target, key);
};

var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
  if (isTypedArrayIndex(target, key = toPrimitive(key, true))
    && isObject(descriptor)
    && has(descriptor, 'value')
    && !has(descriptor, 'get')
    && !has(descriptor, 'set')
    // TODO: add validation descriptor w/o calling accessors
    && !descriptor.configurable
    && (!has(descriptor, 'writable') || descriptor.writable)
    && (!has(descriptor, 'enumerable') || descriptor.enumerable)
  ) {
    target[key] = descriptor.value;
    return target;
  } return nativeDefineProperty(target, key, descriptor);
};

if (DESCRIPTORS) {
  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
    definePropertyModule.f = wrappedDefineProperty;
    addGetter(TypedArrayPrototype, 'buffer');
    addGetter(TypedArrayPrototype, 'byteOffset');
    addGetter(TypedArrayPrototype, 'byteLength');
    addGetter(TypedArrayPrototype, 'length');
  }

  $({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
    defineProperty: wrappedDefineProperty
  });

  module.exports = function (TYPE, wrapper, CLAMPED) {
    var BYTES = TYPE.match(/\d+$/)[0] / 8;
    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + TYPE;
    var SETTER = 'set' + TYPE;
    var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
    var TypedArrayConstructor = NativeTypedArrayConstructor;
    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
    var exported = {};

    var getter = function (that, index) {
      var data = getInternalState(that);
      return data.view[GETTER](index * BYTES + data.byteOffset, true);
    };

    var setter = function (that, index, value) {
      var data = getInternalState(that);
      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
    };

    var addElement = function (that, index) {
      nativeDefineProperty(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };

    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
        var index = 0;
        var byteOffset = 0;
        var buffer, byteLength, length;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new ArrayBuffer(byteLength);
        } else if (isArrayBuffer(data)) {
          buffer = data;
          byteOffset = toOffset(offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - byteOffset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (isTypedArray(data)) {
          return fromList(TypedArrayConstructor, data);
        } else {
          return typedArrayFrom.call(TypedArrayConstructor, data);
        }
        setInternalState(that, {
          buffer: buffer,
          byteOffset: byteOffset,
          byteLength: byteLength,
          length: length,
          view: new DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
        return inheritIfRequired(function () {
          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
          if (isArrayBuffer(data)) return $length !== undefined
            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)
            : typedArrayOffset !== undefined
              ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))
              : new NativeTypedArrayConstructor(data);
          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
          return typedArrayFrom.call(TypedArrayConstructor, data);
        }(), dummy, TypedArrayConstructor);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
        if (!(key in TypedArrayConstructor)) {
          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
        }
      });
      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
    }

    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
    }

    if (TYPED_ARRAY_TAG) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
    }

    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

    $({
      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
    }, exported);

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
    }

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
    }

    setSpecies(CONSTRUCTOR_NAME);
  };
} else module.exports = function () { /* empty */ };

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/typed-array-constructors-require-wrappers":"node_modules/core-js/internals/typed-array-constructors-require-wrappers.js","../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-buffer":"node_modules/core-js/internals/array-buffer.js","../internals/an-instance":"node_modules/core-js/internals/an-instance.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/to-index":"node_modules/core-js/internals/to-index.js","../internals/to-offset":"node_modules/core-js/internals/to-offset.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/classof":"node_modules/core-js/internals/classof.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/object-create":"node_modules/core-js/internals/object-create.js","../internals/object-set-prototype-of":"node_modules/core-js/internals/object-set-prototype-of.js","../internals/object-get-own-property-names":"node_modules/core-js/internals/object-get-own-property-names.js","../internals/typed-array-from":"node_modules/core-js/internals/typed-array-from.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js","../internals/set-species":"node_modules/core-js/internals/set-species.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/inherit-if-required":"node_modules/core-js/internals/inherit-if-required.js"}],"node_modules/core-js/modules/es.typed-array.int8-array.js":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Int8Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int8', function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"node_modules/core-js/internals/typed-array-constructor.js"}],"node_modules/core-js/modules/es.typed-array.uint8-array.js":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Uint8Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"node_modules/core-js/internals/typed-array-constructor.js"}],"node_modules/core-js/modules/es.typed-array.uint8-clamped-array.js":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Uint8ClampedArray` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"../internals/typed-array-constructor":"node_modules/core-js/internals/typed-array-constructor.js"}],"node_modules/core-js/modules/es.typed-array.int16-array.js":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Int16Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int16', function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"node_modules/core-js/internals/typed-array-constructor.js"}],"node_modules/core-js/modules/es.typed-array.uint16-array.js":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Uint16Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint16', function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"node_modules/core-js/internals/typed-array-constructor.js"}],"node_modules/core-js/modules/es.typed-array.int32-array.js":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Int32Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int32', function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"node_modules/core-js/internals/typed-array-constructor.js"}],"node_modules/core-js/modules/es.typed-array.uint32-array.js":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Uint32Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint32', function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"node_modules/core-js/internals/typed-array-constructor.js"}],"node_modules/core-js/modules/es.typed-array.float32-array.js":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Float32Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Float32', function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"node_modules/core-js/internals/typed-array-constructor.js"}],"node_modules/core-js/modules/es.typed-array.float64-array.js":[function(require,module,exports) {
var createTypedArrayConstructor = require('../internals/typed-array-constructor');

// `Float64Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Float64', function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"../internals/typed-array-constructor":"node_modules/core-js/internals/typed-array-constructor.js"}],"node_modules/core-js/modules/es.typed-array.from.js":[function(require,module,exports) {
'use strict';
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');
var exportTypedArrayStaticMethod = require('../internals/array-buffer-view-core').exportTypedArrayStaticMethod;
var typedArrayFrom = require('../internals/typed-array-from');

// `%TypedArray%.from` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.from
exportTypedArrayStaticMethod('from', typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);

},{"../internals/typed-array-constructors-require-wrappers":"node_modules/core-js/internals/typed-array-constructors-require-wrappers.js","../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/typed-array-from":"node_modules/core-js/internals/typed-array-from.js"}],"node_modules/core-js/modules/es.typed-array.of.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');

var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayStaticMethod = ArrayBufferViewCore.exportTypedArrayStaticMethod;

// `%TypedArray%.of` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.of
exportTypedArrayStaticMethod('of', function of(/* ...items */) {
  var index = 0;
  var length = arguments.length;
  var result = new (aTypedArrayConstructor(this))(length);
  while (length > index) result[index] = arguments[index++];
  return result;
}, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/typed-array-constructors-require-wrappers":"node_modules/core-js/internals/typed-array-constructors-require-wrappers.js"}],"node_modules/core-js/modules/es.typed-array.copy-within.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $copyWithin = require('../internals/array-copy-within');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.copyWithin` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
exportTypedArrayMethod('copyWithin', function copyWithin(target, start /* , end */) {
  return $copyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-copy-within":"node_modules/core-js/internals/array-copy-within.js"}],"node_modules/core-js/modules/es.typed-array.every.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $every = require('../internals/array-iteration').every;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.every` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
exportTypedArrayMethod('every', function every(callbackfn /* , thisArg */) {
  return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js"}],"node_modules/core-js/modules/es.typed-array.fill.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $fill = require('../internals/array-fill');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.fill` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
// eslint-disable-next-line no-unused-vars
exportTypedArrayMethod('fill', function fill(value /* , start, end */) {
  return $fill.apply(aTypedArray(this), arguments);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-fill":"node_modules/core-js/internals/array-fill.js"}],"node_modules/core-js/modules/es.typed-array.filter.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $filter = require('../internals/array-iteration').filter;
var speciesConstructor = require('../internals/species-constructor');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.filter` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
exportTypedArrayMethod('filter', function filter(callbackfn /* , thisArg */) {
  var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  var C = speciesConstructor(this, this.constructor);
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js","../internals/species-constructor":"node_modules/core-js/internals/species-constructor.js"}],"node_modules/core-js/modules/es.typed-array.find.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $find = require('../internals/array-iteration').find;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.find` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
exportTypedArrayMethod('find', function find(predicate /* , thisArg */) {
  return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js"}],"node_modules/core-js/modules/es.typed-array.find-index.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $findIndex = require('../internals/array-iteration').findIndex;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.findIndex` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
exportTypedArrayMethod('findIndex', function findIndex(predicate /* , thisArg */) {
  return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js"}],"node_modules/core-js/modules/es.typed-array.for-each.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $forEach = require('../internals/array-iteration').forEach;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.forEach` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
exportTypedArrayMethod('forEach', function forEach(callbackfn /* , thisArg */) {
  $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js"}],"node_modules/core-js/modules/es.typed-array.includes.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $includes = require('../internals/array-includes').includes;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
exportTypedArrayMethod('includes', function includes(searchElement /* , fromIndex */) {
  return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-includes":"node_modules/core-js/internals/array-includes.js"}],"node_modules/core-js/modules/es.typed-array.index-of.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $indexOf = require('../internals/array-includes').indexOf;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.indexOf` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
exportTypedArrayMethod('indexOf', function indexOf(searchElement /* , fromIndex */) {
  return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-includes":"node_modules/core-js/internals/array-includes.js"}],"node_modules/core-js/modules/es.typed-array.iterator.js":[function(require,module,exports) {

'use strict';
var global = require('../internals/global');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var ArrayIterators = require('../modules/es.array.iterator');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var Uint8Array = global.Uint8Array;
var arrayValues = ArrayIterators.values;
var arrayKeys = ArrayIterators.keys;
var arrayEntries = ArrayIterators.entries;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR];

var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
  && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

var typedArrayValues = function values() {
  return arrayValues.call(aTypedArray(this));
};

// `%TypedArray%.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
exportTypedArrayMethod('entries', function entries() {
  return arrayEntries.call(aTypedArray(this));
});
// `%TypedArray%.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
exportTypedArrayMethod('keys', function keys() {
  return arrayKeys.call(aTypedArray(this));
});
// `%TypedArray%.prototype.values` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
exportTypedArrayMethod('values', typedArrayValues, !CORRECT_ITER_NAME);
// `%TypedArray%.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../modules/es.array.iterator":"node_modules/core-js/modules/es.array.iterator.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/modules/es.typed-array.join.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $join = [].join;

// `%TypedArray%.prototype.join` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
// eslint-disable-next-line no-unused-vars
exportTypedArrayMethod('join', function join(separator) {
  return $join.apply(aTypedArray(this), arguments);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js"}],"node_modules/core-js/modules/es.typed-array.last-index-of.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $lastIndexOf = require('../internals/array-last-index-of');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.lastIndexOf` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
// eslint-disable-next-line no-unused-vars
exportTypedArrayMethod('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
  return $lastIndexOf.apply(aTypedArray(this), arguments);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-last-index-of":"node_modules/core-js/internals/array-last-index-of.js"}],"node_modules/core-js/modules/es.typed-array.map.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $map = require('../internals/array-iteration').map;
var speciesConstructor = require('../internals/species-constructor');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.map` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
exportTypedArrayMethod('map', function map(mapfn /* , thisArg */) {
  return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
    return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);
  });
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js","../internals/species-constructor":"node_modules/core-js/internals/species-constructor.js"}],"node_modules/core-js/modules/es.typed-array.reduce.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $reduce = require('../internals/array-reduce').left;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.reduce` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
exportTypedArrayMethod('reduce', function reduce(callbackfn /* , initialValue */) {
  return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-reduce":"node_modules/core-js/internals/array-reduce.js"}],"node_modules/core-js/modules/es.typed-array.reduce-right.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $reduceRight = require('../internals/array-reduce').right;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.reduceRicht` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
exportTypedArrayMethod('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
  return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-reduce":"node_modules/core-js/internals/array-reduce.js"}],"node_modules/core-js/modules/es.typed-array.reverse.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var floor = Math.floor;

// `%TypedArray%.prototype.reverse` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
exportTypedArrayMethod('reverse', function reverse() {
  var that = this;
  var length = aTypedArray(that).length;
  var middle = floor(length / 2);
  var index = 0;
  var value;
  while (index < middle) {
    value = that[index];
    that[index++] = that[--length];
    that[length] = value;
  } return that;
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js"}],"node_modules/core-js/modules/es.typed-array.set.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var toLength = require('../internals/to-length');
var toOffset = require('../internals/to-offset');
var toObject = require('../internals/to-object');
var fails = require('../internals/fails');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

var FORCED = fails(function () {
  // eslint-disable-next-line no-undef
  new Int8Array(1).set({});
});

// `%TypedArray%.prototype.set` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
exportTypedArrayMethod('set', function set(arrayLike /* , offset */) {
  aTypedArray(this);
  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
  var length = this.length;
  var src = toObject(arrayLike);
  var len = toLength(src.length);
  var index = 0;
  if (len + offset > length) throw RangeError('Wrong length');
  while (index < len) this[offset + index] = src[index++];
}, FORCED);

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/to-offset":"node_modules/core-js/internals/to-offset.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.typed-array.slice.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var speciesConstructor = require('../internals/species-constructor');
var fails = require('../internals/fails');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $slice = [].slice;

var FORCED = fails(function () {
  // eslint-disable-next-line no-undef
  new Int8Array(1).slice();
});

// `%TypedArray%.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
exportTypedArrayMethod('slice', function slice(start, end) {
  var list = $slice.call(aTypedArray(this), start, end);
  var C = speciesConstructor(this, this.constructor);
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
}, FORCED);

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/species-constructor":"node_modules/core-js/internals/species-constructor.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.typed-array.some.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var $some = require('../internals/array-iteration').some;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.some` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
exportTypedArrayMethod('some', function some(callbackfn /* , thisArg */) {
  return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/array-iteration":"node_modules/core-js/internals/array-iteration.js"}],"node_modules/core-js/modules/es.typed-array.sort.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $sort = [].sort;

// `%TypedArray%.prototype.sort` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
exportTypedArrayMethod('sort', function sort(comparefn) {
  return $sort.call(aTypedArray(this), comparefn);
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js"}],"node_modules/core-js/modules/es.typed-array.subarray.js":[function(require,module,exports) {
'use strict';
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var toLength = require('../internals/to-length');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var speciesConstructor = require('../internals/species-constructor');

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.subarray` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
exportTypedArrayMethod('subarray', function subarray(begin, end) {
  var O = aTypedArray(this);
  var length = O.length;
  var beginIndex = toAbsoluteIndex(begin, length);
  return new (speciesConstructor(O, O.constructor))(
    O.buffer,
    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
    toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
  );
});

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/to-absolute-index":"node_modules/core-js/internals/to-absolute-index.js","../internals/species-constructor":"node_modules/core-js/internals/species-constructor.js"}],"node_modules/core-js/modules/es.typed-array.to-locale-string.js":[function(require,module,exports) {

'use strict';
var global = require('../internals/global');
var ArrayBufferViewCore = require('../internals/array-buffer-view-core');
var fails = require('../internals/fails');

var Int8Array = global.Int8Array;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $toLocaleString = [].toLocaleString;
var $slice = [].slice;

// iOS Safari 6.x fails here
var TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {
  $toLocaleString.call(new Int8Array(1));
});

var FORCED = fails(function () {
  return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
}) || !fails(function () {
  Int8Array.prototype.toLocaleString.call([1, 2]);
});

// `%TypedArray%.prototype.toLocaleString` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
exportTypedArrayMethod('toLocaleString', function toLocaleString() {
  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
}, FORCED);

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.typed-array.to-string.js":[function(require,module,exports) {

'use strict';
var exportTypedArrayMethod = require('../internals/array-buffer-view-core').exportTypedArrayMethod;
var fails = require('../internals/fails');
var global = require('../internals/global');

var Uint8Array = global.Uint8Array;
var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};
var arrayToString = [].toString;
var arrayJoin = [].join;

if (fails(function () { arrayToString.call({}); })) {
  arrayToString = function toString() {
    return arrayJoin.call(this);
  };
}

var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

// `%TypedArray%.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);

},{"../internals/array-buffer-view-core":"node_modules/core-js/internals/array-buffer-view-core.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/modules/es.reflect.apply.js":[function(require,module,exports) {
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var fails = require('../internals/fails');

var nativeApply = getBuiltIn('Reflect', 'apply');
var functionApply = Function.apply;

// MS Edge argumentsList argument is optional
var OPTIONAL_ARGUMENTS_LIST = !fails(function () {
  nativeApply(function () { /* empty */ });
});

// `Reflect.apply` method
// https://tc39.github.io/ecma262/#sec-reflect.apply
$({ target: 'Reflect', stat: true, forced: OPTIONAL_ARGUMENTS_LIST }, {
  apply: function apply(target, thisArgument, argumentsList) {
    aFunction(target);
    anObject(argumentsList);
    return nativeApply
      ? nativeApply(target, thisArgument, argumentsList)
      : functionApply.call(target, thisArgument, argumentsList);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/get-built-in":"node_modules/core-js/internals/get-built-in.js","../internals/a-function":"node_modules/core-js/internals/a-function.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.reflect.construct.js":[function(require,module,exports) {
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var aFunction = require('../internals/a-function');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var create = require('../internals/object-create');
var bind = require('../internals/function-bind');
var fails = require('../internals/fails');

var nativeConstruct = getBuiltIn('Reflect', 'construct');

// `Reflect.construct` method
// https://tc39.github.io/ecma262/#sec-reflect.construct
// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  nativeConstruct(function () { /* empty */ });
});
var FORCED = NEW_TARGET_BUG || ARGS_BUG;

$({ target: 'Reflect', stat: true, forced: FORCED, sham: FORCED }, {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/get-built-in":"node_modules/core-js/internals/get-built-in.js","../internals/a-function":"node_modules/core-js/internals/a-function.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/object-create":"node_modules/core-js/internals/object-create.js","../internals/function-bind":"node_modules/core-js/internals/function-bind.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.reflect.define-property.js":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');
var definePropertyModule = require('../internals/object-define-property');
var fails = require('../internals/fails');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
var ERROR_INSTEAD_OF_FALSE = fails(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(definePropertyModule.f({}, 1, { value: 1 }), 1, { value: 2 });
});

// `Reflect.defineProperty` method
// https://tc39.github.io/ecma262/#sec-reflect.defineproperty
$({ target: 'Reflect', stat: true, forced: ERROR_INSTEAD_OF_FALSE, sham: !DESCRIPTORS }, {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    var key = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      definePropertyModule.f(target, key, attributes);
      return true;
    } catch (error) {
      return false;
    }
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.reflect.delete-property.js":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

// `Reflect.deleteProperty` method
// https://tc39.github.io/ecma262/#sec-reflect.deleteproperty
$({ target: 'Reflect', stat: true }, {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var descriptor = getOwnPropertyDescriptor(anObject(target), propertyKey);
    return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js"}],"node_modules/core-js/modules/es.reflect.get.js":[function(require,module,exports) {
var $ = require('../internals/export');
var isObject = require('../internals/is-object');
var anObject = require('../internals/an-object');
var has = require('../internals/has');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var getPrototypeOf = require('../internals/object-get-prototype-of');

// `Reflect.get` method
// https://tc39.github.io/ecma262/#sec-reflect.get
function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var descriptor, prototype;
  if (anObject(target) === receiver) return target[propertyKey];
  if (descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey)) return has(descriptor, 'value')
    ? descriptor.value
    : descriptor.get === undefined
      ? undefined
      : descriptor.get.call(receiver);
  if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);
}

$({ target: 'Reflect', stat: true }, {
  get: get
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js"}],"node_modules/core-js/modules/es.reflect.get-own-property-descriptor.js":[function(require,module,exports) {
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var anObject = require('../internals/an-object');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');

// `Reflect.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-reflect.getownpropertydescriptor
$({ target: 'Reflect', stat: true, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js"}],"node_modules/core-js/modules/es.reflect.get-prototype-of.js":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var objectGetPrototypeOf = require('../internals/object-get-prototype-of');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

// `Reflect.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-reflect.getprototypeof
$({ target: 'Reflect', stat: true, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf(target) {
    return objectGetPrototypeOf(anObject(target));
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js","../internals/correct-prototype-getter":"node_modules/core-js/internals/correct-prototype-getter.js"}],"node_modules/core-js/modules/es.reflect.has.js":[function(require,module,exports) {
var $ = require('../internals/export');

// `Reflect.has` method
// https://tc39.github.io/ecma262/#sec-reflect.has
$({ target: 'Reflect', stat: true }, {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/modules/es.reflect.is-extensible.js":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');

var objectIsExtensible = Object.isExtensible;

// `Reflect.isExtensible` method
// https://tc39.github.io/ecma262/#sec-reflect.isextensible
$({ target: 'Reflect', stat: true }, {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return objectIsExtensible ? objectIsExtensible(target) : true;
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/an-object":"node_modules/core-js/internals/an-object.js"}],"node_modules/core-js/modules/es.reflect.own-keys.js":[function(require,module,exports) {
var $ = require('../internals/export');
var ownKeys = require('../internals/own-keys');

// `Reflect.ownKeys` method
// https://tc39.github.io/ecma262/#sec-reflect.ownkeys
$({ target: 'Reflect', stat: true }, {
  ownKeys: ownKeys
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/own-keys":"node_modules/core-js/internals/own-keys.js"}],"node_modules/core-js/modules/es.reflect.prevent-extensions.js":[function(require,module,exports) {
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var anObject = require('../internals/an-object');
var FREEZING = require('../internals/freezing');

// `Reflect.preventExtensions` method
// https://tc39.github.io/ecma262/#sec-reflect.preventextensions
$({ target: 'Reflect', stat: true, sham: !FREEZING }, {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      var objectPreventExtensions = getBuiltIn('Object', 'preventExtensions');
      if (objectPreventExtensions) objectPreventExtensions(target);
      return true;
    } catch (error) {
      return false;
    }
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/get-built-in":"node_modules/core-js/internals/get-built-in.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/freezing":"node_modules/core-js/internals/freezing.js"}],"node_modules/core-js/modules/es.reflect.set.js":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var has = require('../internals/has');
var fails = require('../internals/fails');
var definePropertyModule = require('../internals/object-define-property');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

// `Reflect.set` method
// https://tc39.github.io/ecma262/#sec-reflect.set
function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDescriptor = getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
  var existingDescriptor, prototype;
  if (!ownDescriptor) {
    if (isObject(prototype = getPrototypeOf(target))) {
      return set(prototype, propertyKey, V, receiver);
    }
    ownDescriptor = createPropertyDescriptor(0);
  }
  if (has(ownDescriptor, 'value')) {
    if (ownDescriptor.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = getOwnPropertyDescriptorModule.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      definePropertyModule.f(receiver, propertyKey, existingDescriptor);
    } else definePropertyModule.f(receiver, propertyKey, createPropertyDescriptor(0, V));
    return true;
  }
  return ownDescriptor.set === undefined ? false : (ownDescriptor.set.call(receiver, V), true);
}

// MS Edge 17-18 Reflect.set allows setting the property to object
// with non-writable property on the prototype
var MS_EDGE_BUG = fails(function () {
  var object = definePropertyModule.f({}, 'a', { configurable: true });
  // eslint-disable-next-line no-undef
  return Reflect.set(getPrototypeOf(object), 'a', 1, object) !== false;
});

$({ target: 'Reflect', stat: true, forced: MS_EDGE_BUG }, {
  set: set
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js"}],"node_modules/core-js/modules/es.reflect.set-prototype-of.js":[function(require,module,exports) {
var $ = require('../internals/export');
var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');
var objectSetPrototypeOf = require('../internals/object-set-prototype-of');

// `Reflect.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-reflect.setprototypeof
if (objectSetPrototypeOf) $({ target: 'Reflect', stat: true }, {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    anObject(target);
    aPossiblePrototype(proto);
    try {
      objectSetPrototypeOf(target, proto);
      return true;
    } catch (error) {
      return false;
    }
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/a-possible-prototype":"node_modules/core-js/internals/a-possible-prototype.js","../internals/object-set-prototype-of":"node_modules/core-js/internals/object-set-prototype-of.js"}],"node_modules/core-js/es/index.js":[function(require,module,exports) {
require('../modules/es.symbol');
require('../modules/es.symbol.async-iterator');
require('../modules/es.symbol.description');
require('../modules/es.symbol.has-instance');
require('../modules/es.symbol.is-concat-spreadable');
require('../modules/es.symbol.iterator');
require('../modules/es.symbol.match');
require('../modules/es.symbol.match-all');
require('../modules/es.symbol.replace');
require('../modules/es.symbol.search');
require('../modules/es.symbol.species');
require('../modules/es.symbol.split');
require('../modules/es.symbol.to-primitive');
require('../modules/es.symbol.to-string-tag');
require('../modules/es.symbol.unscopables');
require('../modules/es.object.assign');
require('../modules/es.object.create');
require('../modules/es.object.define-property');
require('../modules/es.object.define-properties');
require('../modules/es.object.entries');
require('../modules/es.object.freeze');
require('../modules/es.object.from-entries');
require('../modules/es.object.get-own-property-descriptor');
require('../modules/es.object.get-own-property-descriptors');
require('../modules/es.object.get-own-property-names');
require('../modules/es.object.get-prototype-of');
require('../modules/es.object.is');
require('../modules/es.object.is-extensible');
require('../modules/es.object.is-frozen');
require('../modules/es.object.is-sealed');
require('../modules/es.object.keys');
require('../modules/es.object.prevent-extensions');
require('../modules/es.object.seal');
require('../modules/es.object.set-prototype-of');
require('../modules/es.object.values');
require('../modules/es.object.to-string');
require('../modules/es.object.define-getter');
require('../modules/es.object.define-setter');
require('../modules/es.object.lookup-getter');
require('../modules/es.object.lookup-setter');
require('../modules/es.function.bind');
require('../modules/es.function.name');
require('../modules/es.function.has-instance');
require('../modules/es.global-this');
require('../modules/es.array.from');
require('../modules/es.array.is-array');
require('../modules/es.array.of');
require('../modules/es.array.concat');
require('../modules/es.array.copy-within');
require('../modules/es.array.every');
require('../modules/es.array.fill');
require('../modules/es.array.filter');
require('../modules/es.array.find');
require('../modules/es.array.find-index');
require('../modules/es.array.flat');
require('../modules/es.array.flat-map');
require('../modules/es.array.for-each');
require('../modules/es.array.includes');
require('../modules/es.array.index-of');
require('../modules/es.array.join');
require('../modules/es.array.last-index-of');
require('../modules/es.array.map');
require('../modules/es.array.reduce');
require('../modules/es.array.reduce-right');
require('../modules/es.array.reverse');
require('../modules/es.array.slice');
require('../modules/es.array.some');
require('../modules/es.array.sort');
require('../modules/es.array.splice');
require('../modules/es.array.species');
require('../modules/es.array.unscopables.flat');
require('../modules/es.array.unscopables.flat-map');
require('../modules/es.array.iterator');
require('../modules/es.string.from-code-point');
require('../modules/es.string.raw');
require('../modules/es.string.code-point-at');
require('../modules/es.string.ends-with');
require('../modules/es.string.includes');
require('../modules/es.string.match');
require('../modules/es.string.match-all');
require('../modules/es.string.pad-end');
require('../modules/es.string.pad-start');
require('../modules/es.string.repeat');
require('../modules/es.string.replace');
require('../modules/es.string.search');
require('../modules/es.string.split');
require('../modules/es.string.starts-with');
require('../modules/es.string.trim');
require('../modules/es.string.trim-start');
require('../modules/es.string.trim-end');
require('../modules/es.string.iterator');
require('../modules/es.string.anchor');
require('../modules/es.string.big');
require('../modules/es.string.blink');
require('../modules/es.string.bold');
require('../modules/es.string.fixed');
require('../modules/es.string.fontcolor');
require('../modules/es.string.fontsize');
require('../modules/es.string.italics');
require('../modules/es.string.link');
require('../modules/es.string.small');
require('../modules/es.string.strike');
require('../modules/es.string.sub');
require('../modules/es.string.sup');
require('../modules/es.regexp.constructor');
require('../modules/es.regexp.exec');
require('../modules/es.regexp.flags');
require('../modules/es.regexp.sticky');
require('../modules/es.regexp.test');
require('../modules/es.regexp.to-string');
require('../modules/es.parse-int');
require('../modules/es.parse-float');
require('../modules/es.number.constructor');
require('../modules/es.number.epsilon');
require('../modules/es.number.is-finite');
require('../modules/es.number.is-integer');
require('../modules/es.number.is-nan');
require('../modules/es.number.is-safe-integer');
require('../modules/es.number.max-safe-integer');
require('../modules/es.number.min-safe-integer');
require('../modules/es.number.parse-float');
require('../modules/es.number.parse-int');
require('../modules/es.number.to-fixed');
require('../modules/es.number.to-precision');
require('../modules/es.math.acosh');
require('../modules/es.math.asinh');
require('../modules/es.math.atanh');
require('../modules/es.math.cbrt');
require('../modules/es.math.clz32');
require('../modules/es.math.cosh');
require('../modules/es.math.expm1');
require('../modules/es.math.fround');
require('../modules/es.math.hypot');
require('../modules/es.math.imul');
require('../modules/es.math.log10');
require('../modules/es.math.log1p');
require('../modules/es.math.log2');
require('../modules/es.math.sign');
require('../modules/es.math.sinh');
require('../modules/es.math.tanh');
require('../modules/es.math.to-string-tag');
require('../modules/es.math.trunc');
require('../modules/es.date.now');
require('../modules/es.date.to-json');
require('../modules/es.date.to-iso-string');
require('../modules/es.date.to-string');
require('../modules/es.date.to-primitive');
require('../modules/es.json.stringify');
require('../modules/es.json.to-string-tag');
require('../modules/es.promise');
require('../modules/es.promise.all-settled');
require('../modules/es.promise.finally');
require('../modules/es.map');
require('../modules/es.set');
require('../modules/es.weak-map');
require('../modules/es.weak-set');
require('../modules/es.array-buffer.constructor');
require('../modules/es.array-buffer.is-view');
require('../modules/es.array-buffer.slice');
require('../modules/es.data-view');
require('../modules/es.typed-array.int8-array');
require('../modules/es.typed-array.uint8-array');
require('../modules/es.typed-array.uint8-clamped-array');
require('../modules/es.typed-array.int16-array');
require('../modules/es.typed-array.uint16-array');
require('../modules/es.typed-array.int32-array');
require('../modules/es.typed-array.uint32-array');
require('../modules/es.typed-array.float32-array');
require('../modules/es.typed-array.float64-array');
require('../modules/es.typed-array.from');
require('../modules/es.typed-array.of');
require('../modules/es.typed-array.copy-within');
require('../modules/es.typed-array.every');
require('../modules/es.typed-array.fill');
require('../modules/es.typed-array.filter');
require('../modules/es.typed-array.find');
require('../modules/es.typed-array.find-index');
require('../modules/es.typed-array.for-each');
require('../modules/es.typed-array.includes');
require('../modules/es.typed-array.index-of');
require('../modules/es.typed-array.iterator');
require('../modules/es.typed-array.join');
require('../modules/es.typed-array.last-index-of');
require('../modules/es.typed-array.map');
require('../modules/es.typed-array.reduce');
require('../modules/es.typed-array.reduce-right');
require('../modules/es.typed-array.reverse');
require('../modules/es.typed-array.set');
require('../modules/es.typed-array.slice');
require('../modules/es.typed-array.some');
require('../modules/es.typed-array.sort');
require('../modules/es.typed-array.subarray');
require('../modules/es.typed-array.to-locale-string');
require('../modules/es.typed-array.to-string');
require('../modules/es.reflect.apply');
require('../modules/es.reflect.construct');
require('../modules/es.reflect.define-property');
require('../modules/es.reflect.delete-property');
require('../modules/es.reflect.get');
require('../modules/es.reflect.get-own-property-descriptor');
require('../modules/es.reflect.get-prototype-of');
require('../modules/es.reflect.has');
require('../modules/es.reflect.is-extensible');
require('../modules/es.reflect.own-keys');
require('../modules/es.reflect.prevent-extensions');
require('../modules/es.reflect.set');
require('../modules/es.reflect.set-prototype-of');
var path = require('../internals/path');

module.exports = path;

},{"../modules/es.symbol":"node_modules/core-js/modules/es.symbol.js","../modules/es.symbol.async-iterator":"node_modules/core-js/modules/es.symbol.async-iterator.js","../modules/es.symbol.description":"node_modules/core-js/modules/es.symbol.description.js","../modules/es.symbol.has-instance":"node_modules/core-js/modules/es.symbol.has-instance.js","../modules/es.symbol.is-concat-spreadable":"node_modules/core-js/modules/es.symbol.is-concat-spreadable.js","../modules/es.symbol.iterator":"node_modules/core-js/modules/es.symbol.iterator.js","../modules/es.symbol.match":"node_modules/core-js/modules/es.symbol.match.js","../modules/es.symbol.match-all":"node_modules/core-js/modules/es.symbol.match-all.js","../modules/es.symbol.replace":"node_modules/core-js/modules/es.symbol.replace.js","../modules/es.symbol.search":"node_modules/core-js/modules/es.symbol.search.js","../modules/es.symbol.species":"node_modules/core-js/modules/es.symbol.species.js","../modules/es.symbol.split":"node_modules/core-js/modules/es.symbol.split.js","../modules/es.symbol.to-primitive":"node_modules/core-js/modules/es.symbol.to-primitive.js","../modules/es.symbol.to-string-tag":"node_modules/core-js/modules/es.symbol.to-string-tag.js","../modules/es.symbol.unscopables":"node_modules/core-js/modules/es.symbol.unscopables.js","../modules/es.object.assign":"node_modules/core-js/modules/es.object.assign.js","../modules/es.object.create":"node_modules/core-js/modules/es.object.create.js","../modules/es.object.define-property":"node_modules/core-js/modules/es.object.define-property.js","../modules/es.object.define-properties":"node_modules/core-js/modules/es.object.define-properties.js","../modules/es.object.entries":"node_modules/core-js/modules/es.object.entries.js","../modules/es.object.freeze":"node_modules/core-js/modules/es.object.freeze.js","../modules/es.object.from-entries":"node_modules/core-js/modules/es.object.from-entries.js","../modules/es.object.get-own-property-descriptor":"node_modules/core-js/modules/es.object.get-own-property-descriptor.js","../modules/es.object.get-own-property-descriptors":"node_modules/core-js/modules/es.object.get-own-property-descriptors.js","../modules/es.object.get-own-property-names":"node_modules/core-js/modules/es.object.get-own-property-names.js","../modules/es.object.get-prototype-of":"node_modules/core-js/modules/es.object.get-prototype-of.js","../modules/es.object.is":"node_modules/core-js/modules/es.object.is.js","../modules/es.object.is-extensible":"node_modules/core-js/modules/es.object.is-extensible.js","../modules/es.object.is-frozen":"node_modules/core-js/modules/es.object.is-frozen.js","../modules/es.object.is-sealed":"node_modules/core-js/modules/es.object.is-sealed.js","../modules/es.object.keys":"node_modules/core-js/modules/es.object.keys.js","../modules/es.object.prevent-extensions":"node_modules/core-js/modules/es.object.prevent-extensions.js","../modules/es.object.seal":"node_modules/core-js/modules/es.object.seal.js","../modules/es.object.set-prototype-of":"node_modules/core-js/modules/es.object.set-prototype-of.js","../modules/es.object.values":"node_modules/core-js/modules/es.object.values.js","../modules/es.object.to-string":"node_modules/core-js/modules/es.object.to-string.js","../modules/es.object.define-getter":"node_modules/core-js/modules/es.object.define-getter.js","../modules/es.object.define-setter":"node_modules/core-js/modules/es.object.define-setter.js","../modules/es.object.lookup-getter":"node_modules/core-js/modules/es.object.lookup-getter.js","../modules/es.object.lookup-setter":"node_modules/core-js/modules/es.object.lookup-setter.js","../modules/es.function.bind":"node_modules/core-js/modules/es.function.bind.js","../modules/es.function.name":"node_modules/core-js/modules/es.function.name.js","../modules/es.function.has-instance":"node_modules/core-js/modules/es.function.has-instance.js","../modules/es.global-this":"node_modules/core-js/modules/es.global-this.js","../modules/es.array.from":"node_modules/core-js/modules/es.array.from.js","../modules/es.array.is-array":"node_modules/core-js/modules/es.array.is-array.js","../modules/es.array.of":"node_modules/core-js/modules/es.array.of.js","../modules/es.array.concat":"node_modules/core-js/modules/es.array.concat.js","../modules/es.array.copy-within":"node_modules/core-js/modules/es.array.copy-within.js","../modules/es.array.every":"node_modules/core-js/modules/es.array.every.js","../modules/es.array.fill":"node_modules/core-js/modules/es.array.fill.js","../modules/es.array.filter":"node_modules/core-js/modules/es.array.filter.js","../modules/es.array.find":"node_modules/core-js/modules/es.array.find.js","../modules/es.array.find-index":"node_modules/core-js/modules/es.array.find-index.js","../modules/es.array.flat":"node_modules/core-js/modules/es.array.flat.js","../modules/es.array.flat-map":"node_modules/core-js/modules/es.array.flat-map.js","../modules/es.array.for-each":"node_modules/core-js/modules/es.array.for-each.js","../modules/es.array.includes":"node_modules/core-js/modules/es.array.includes.js","../modules/es.array.index-of":"node_modules/core-js/modules/es.array.index-of.js","../modules/es.array.join":"node_modules/core-js/modules/es.array.join.js","../modules/es.array.last-index-of":"node_modules/core-js/modules/es.array.last-index-of.js","../modules/es.array.map":"node_modules/core-js/modules/es.array.map.js","../modules/es.array.reduce":"node_modules/core-js/modules/es.array.reduce.js","../modules/es.array.reduce-right":"node_modules/core-js/modules/es.array.reduce-right.js","../modules/es.array.reverse":"node_modules/core-js/modules/es.array.reverse.js","../modules/es.array.slice":"node_modules/core-js/modules/es.array.slice.js","../modules/es.array.some":"node_modules/core-js/modules/es.array.some.js","../modules/es.array.sort":"node_modules/core-js/modules/es.array.sort.js","../modules/es.array.splice":"node_modules/core-js/modules/es.array.splice.js","../modules/es.array.species":"node_modules/core-js/modules/es.array.species.js","../modules/es.array.unscopables.flat":"node_modules/core-js/modules/es.array.unscopables.flat.js","../modules/es.array.unscopables.flat-map":"node_modules/core-js/modules/es.array.unscopables.flat-map.js","../modules/es.array.iterator":"node_modules/core-js/modules/es.array.iterator.js","../modules/es.string.from-code-point":"node_modules/core-js/modules/es.string.from-code-point.js","../modules/es.string.raw":"node_modules/core-js/modules/es.string.raw.js","../modules/es.string.code-point-at":"node_modules/core-js/modules/es.string.code-point-at.js","../modules/es.string.ends-with":"node_modules/core-js/modules/es.string.ends-with.js","../modules/es.string.includes":"node_modules/core-js/modules/es.string.includes.js","../modules/es.string.match":"node_modules/core-js/modules/es.string.match.js","../modules/es.string.match-all":"node_modules/core-js/modules/es.string.match-all.js","../modules/es.string.pad-end":"node_modules/core-js/modules/es.string.pad-end.js","../modules/es.string.pad-start":"node_modules/core-js/modules/es.string.pad-start.js","../modules/es.string.repeat":"node_modules/core-js/modules/es.string.repeat.js","../modules/es.string.replace":"node_modules/core-js/modules/es.string.replace.js","../modules/es.string.search":"node_modules/core-js/modules/es.string.search.js","../modules/es.string.split":"node_modules/core-js/modules/es.string.split.js","../modules/es.string.starts-with":"node_modules/core-js/modules/es.string.starts-with.js","../modules/es.string.trim":"node_modules/core-js/modules/es.string.trim.js","../modules/es.string.trim-start":"node_modules/core-js/modules/es.string.trim-start.js","../modules/es.string.trim-end":"node_modules/core-js/modules/es.string.trim-end.js","../modules/es.string.iterator":"node_modules/core-js/modules/es.string.iterator.js","../modules/es.string.anchor":"node_modules/core-js/modules/es.string.anchor.js","../modules/es.string.big":"node_modules/core-js/modules/es.string.big.js","../modules/es.string.blink":"node_modules/core-js/modules/es.string.blink.js","../modules/es.string.bold":"node_modules/core-js/modules/es.string.bold.js","../modules/es.string.fixed":"node_modules/core-js/modules/es.string.fixed.js","../modules/es.string.fontcolor":"node_modules/core-js/modules/es.string.fontcolor.js","../modules/es.string.fontsize":"node_modules/core-js/modules/es.string.fontsize.js","../modules/es.string.italics":"node_modules/core-js/modules/es.string.italics.js","../modules/es.string.link":"node_modules/core-js/modules/es.string.link.js","../modules/es.string.small":"node_modules/core-js/modules/es.string.small.js","../modules/es.string.strike":"node_modules/core-js/modules/es.string.strike.js","../modules/es.string.sub":"node_modules/core-js/modules/es.string.sub.js","../modules/es.string.sup":"node_modules/core-js/modules/es.string.sup.js","../modules/es.regexp.constructor":"node_modules/core-js/modules/es.regexp.constructor.js","../modules/es.regexp.exec":"node_modules/core-js/modules/es.regexp.exec.js","../modules/es.regexp.flags":"node_modules/core-js/modules/es.regexp.flags.js","../modules/es.regexp.sticky":"node_modules/core-js/modules/es.regexp.sticky.js","../modules/es.regexp.test":"node_modules/core-js/modules/es.regexp.test.js","../modules/es.regexp.to-string":"node_modules/core-js/modules/es.regexp.to-string.js","../modules/es.parse-int":"node_modules/core-js/modules/es.parse-int.js","../modules/es.parse-float":"node_modules/core-js/modules/es.parse-float.js","../modules/es.number.constructor":"node_modules/core-js/modules/es.number.constructor.js","../modules/es.number.epsilon":"node_modules/core-js/modules/es.number.epsilon.js","../modules/es.number.is-finite":"node_modules/core-js/modules/es.number.is-finite.js","../modules/es.number.is-integer":"node_modules/core-js/modules/es.number.is-integer.js","../modules/es.number.is-nan":"node_modules/core-js/modules/es.number.is-nan.js","../modules/es.number.is-safe-integer":"node_modules/core-js/modules/es.number.is-safe-integer.js","../modules/es.number.max-safe-integer":"node_modules/core-js/modules/es.number.max-safe-integer.js","../modules/es.number.min-safe-integer":"node_modules/core-js/modules/es.number.min-safe-integer.js","../modules/es.number.parse-float":"node_modules/core-js/modules/es.number.parse-float.js","../modules/es.number.parse-int":"node_modules/core-js/modules/es.number.parse-int.js","../modules/es.number.to-fixed":"node_modules/core-js/modules/es.number.to-fixed.js","../modules/es.number.to-precision":"node_modules/core-js/modules/es.number.to-precision.js","../modules/es.math.acosh":"node_modules/core-js/modules/es.math.acosh.js","../modules/es.math.asinh":"node_modules/core-js/modules/es.math.asinh.js","../modules/es.math.atanh":"node_modules/core-js/modules/es.math.atanh.js","../modules/es.math.cbrt":"node_modules/core-js/modules/es.math.cbrt.js","../modules/es.math.clz32":"node_modules/core-js/modules/es.math.clz32.js","../modules/es.math.cosh":"node_modules/core-js/modules/es.math.cosh.js","../modules/es.math.expm1":"node_modules/core-js/modules/es.math.expm1.js","../modules/es.math.fround":"node_modules/core-js/modules/es.math.fround.js","../modules/es.math.hypot":"node_modules/core-js/modules/es.math.hypot.js","../modules/es.math.imul":"node_modules/core-js/modules/es.math.imul.js","../modules/es.math.log10":"node_modules/core-js/modules/es.math.log10.js","../modules/es.math.log1p":"node_modules/core-js/modules/es.math.log1p.js","../modules/es.math.log2":"node_modules/core-js/modules/es.math.log2.js","../modules/es.math.sign":"node_modules/core-js/modules/es.math.sign.js","../modules/es.math.sinh":"node_modules/core-js/modules/es.math.sinh.js","../modules/es.math.tanh":"node_modules/core-js/modules/es.math.tanh.js","../modules/es.math.to-string-tag":"node_modules/core-js/modules/es.math.to-string-tag.js","../modules/es.math.trunc":"node_modules/core-js/modules/es.math.trunc.js","../modules/es.date.now":"node_modules/core-js/modules/es.date.now.js","../modules/es.date.to-json":"node_modules/core-js/modules/es.date.to-json.js","../modules/es.date.to-iso-string":"node_modules/core-js/modules/es.date.to-iso-string.js","../modules/es.date.to-string":"node_modules/core-js/modules/es.date.to-string.js","../modules/es.date.to-primitive":"node_modules/core-js/modules/es.date.to-primitive.js","../modules/es.json.stringify":"node_modules/core-js/modules/es.json.stringify.js","../modules/es.json.to-string-tag":"node_modules/core-js/modules/es.json.to-string-tag.js","../modules/es.promise":"node_modules/core-js/modules/es.promise.js","../modules/es.promise.all-settled":"node_modules/core-js/modules/es.promise.all-settled.js","../modules/es.promise.finally":"node_modules/core-js/modules/es.promise.finally.js","../modules/es.map":"node_modules/core-js/modules/es.map.js","../modules/es.set":"node_modules/core-js/modules/es.set.js","../modules/es.weak-map":"node_modules/core-js/modules/es.weak-map.js","../modules/es.weak-set":"node_modules/core-js/modules/es.weak-set.js","../modules/es.array-buffer.constructor":"node_modules/core-js/modules/es.array-buffer.constructor.js","../modules/es.array-buffer.is-view":"node_modules/core-js/modules/es.array-buffer.is-view.js","../modules/es.array-buffer.slice":"node_modules/core-js/modules/es.array-buffer.slice.js","../modules/es.data-view":"node_modules/core-js/modules/es.data-view.js","../modules/es.typed-array.int8-array":"node_modules/core-js/modules/es.typed-array.int8-array.js","../modules/es.typed-array.uint8-array":"node_modules/core-js/modules/es.typed-array.uint8-array.js","../modules/es.typed-array.uint8-clamped-array":"node_modules/core-js/modules/es.typed-array.uint8-clamped-array.js","../modules/es.typed-array.int16-array":"node_modules/core-js/modules/es.typed-array.int16-array.js","../modules/es.typed-array.uint16-array":"node_modules/core-js/modules/es.typed-array.uint16-array.js","../modules/es.typed-array.int32-array":"node_modules/core-js/modules/es.typed-array.int32-array.js","../modules/es.typed-array.uint32-array":"node_modules/core-js/modules/es.typed-array.uint32-array.js","../modules/es.typed-array.float32-array":"node_modules/core-js/modules/es.typed-array.float32-array.js","../modules/es.typed-array.float64-array":"node_modules/core-js/modules/es.typed-array.float64-array.js","../modules/es.typed-array.from":"node_modules/core-js/modules/es.typed-array.from.js","../modules/es.typed-array.of":"node_modules/core-js/modules/es.typed-array.of.js","../modules/es.typed-array.copy-within":"node_modules/core-js/modules/es.typed-array.copy-within.js","../modules/es.typed-array.every":"node_modules/core-js/modules/es.typed-array.every.js","../modules/es.typed-array.fill":"node_modules/core-js/modules/es.typed-array.fill.js","../modules/es.typed-array.filter":"node_modules/core-js/modules/es.typed-array.filter.js","../modules/es.typed-array.find":"node_modules/core-js/modules/es.typed-array.find.js","../modules/es.typed-array.find-index":"node_modules/core-js/modules/es.typed-array.find-index.js","../modules/es.typed-array.for-each":"node_modules/core-js/modules/es.typed-array.for-each.js","../modules/es.typed-array.includes":"node_modules/core-js/modules/es.typed-array.includes.js","../modules/es.typed-array.index-of":"node_modules/core-js/modules/es.typed-array.index-of.js","../modules/es.typed-array.iterator":"node_modules/core-js/modules/es.typed-array.iterator.js","../modules/es.typed-array.join":"node_modules/core-js/modules/es.typed-array.join.js","../modules/es.typed-array.last-index-of":"node_modules/core-js/modules/es.typed-array.last-index-of.js","../modules/es.typed-array.map":"node_modules/core-js/modules/es.typed-array.map.js","../modules/es.typed-array.reduce":"node_modules/core-js/modules/es.typed-array.reduce.js","../modules/es.typed-array.reduce-right":"node_modules/core-js/modules/es.typed-array.reduce-right.js","../modules/es.typed-array.reverse":"node_modules/core-js/modules/es.typed-array.reverse.js","../modules/es.typed-array.set":"node_modules/core-js/modules/es.typed-array.set.js","../modules/es.typed-array.slice":"node_modules/core-js/modules/es.typed-array.slice.js","../modules/es.typed-array.some":"node_modules/core-js/modules/es.typed-array.some.js","../modules/es.typed-array.sort":"node_modules/core-js/modules/es.typed-array.sort.js","../modules/es.typed-array.subarray":"node_modules/core-js/modules/es.typed-array.subarray.js","../modules/es.typed-array.to-locale-string":"node_modules/core-js/modules/es.typed-array.to-locale-string.js","../modules/es.typed-array.to-string":"node_modules/core-js/modules/es.typed-array.to-string.js","../modules/es.reflect.apply":"node_modules/core-js/modules/es.reflect.apply.js","../modules/es.reflect.construct":"node_modules/core-js/modules/es.reflect.construct.js","../modules/es.reflect.define-property":"node_modules/core-js/modules/es.reflect.define-property.js","../modules/es.reflect.delete-property":"node_modules/core-js/modules/es.reflect.delete-property.js","../modules/es.reflect.get":"node_modules/core-js/modules/es.reflect.get.js","../modules/es.reflect.get-own-property-descriptor":"node_modules/core-js/modules/es.reflect.get-own-property-descriptor.js","../modules/es.reflect.get-prototype-of":"node_modules/core-js/modules/es.reflect.get-prototype-of.js","../modules/es.reflect.has":"node_modules/core-js/modules/es.reflect.has.js","../modules/es.reflect.is-extensible":"node_modules/core-js/modules/es.reflect.is-extensible.js","../modules/es.reflect.own-keys":"node_modules/core-js/modules/es.reflect.own-keys.js","../modules/es.reflect.prevent-extensions":"node_modules/core-js/modules/es.reflect.prevent-extensions.js","../modules/es.reflect.set":"node_modules/core-js/modules/es.reflect.set.js","../modules/es.reflect.set-prototype-of":"node_modules/core-js/modules/es.reflect.set-prototype-of.js","../internals/path":"node_modules/core-js/internals/path.js"}],"node_modules/core-js/internals/dom-iterables.js":[function(require,module,exports) {
// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};

},{}],"node_modules/core-js/modules/web.dom-collections.for-each.js":[function(require,module,exports) {

var global = require('../internals/global');
var DOMIterables = require('../internals/dom-iterables');
var forEach = require('../internals/array-for-each');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
}

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/dom-iterables":"node_modules/core-js/internals/dom-iterables.js","../internals/array-for-each":"node_modules/core-js/internals/array-for-each.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js"}],"node_modules/core-js/modules/web.dom-collections.iterator.js":[function(require,module,exports) {

var global = require('../internals/global');
var DOMIterables = require('../internals/dom-iterables');
var ArrayIteratorMethods = require('../modules/es.array.iterator');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
}

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/dom-iterables":"node_modules/core-js/internals/dom-iterables.js","../modules/es.array.iterator":"node_modules/core-js/modules/es.array.iterator.js","../internals/create-non-enumerable-property":"node_modules/core-js/internals/create-non-enumerable-property.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/modules/web.immediate.js":[function(require,module,exports) {

var $ = require('../internals/export');
var global = require('../internals/global');
var task = require('../internals/task');

var FORCED = !global.setImmediate || !global.clearImmediate;

// http://w3c.github.io/setImmediate/
$({ global: true, bind: true, enumerable: true, forced: FORCED }, {
  // `setImmediate` method
  // http://w3c.github.io/setImmediate/#si-setImmediate
  setImmediate: task.set,
  // `clearImmediate` method
  // http://w3c.github.io/setImmediate/#si-clearImmediate
  clearImmediate: task.clear
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/task":"node_modules/core-js/internals/task.js"}],"node_modules/core-js/modules/web.queue-microtask.js":[function(require,module,exports) {


var $ = require('../internals/export');
var global = require('../internals/global');
var microtask = require('../internals/microtask');
var classof = require('../internals/classof-raw');

var process = global.process;
var isNode = classof(process) == 'process';

// `queueMicrotask` method
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask
$({ global: true, enumerable: true, noTargetGet: true }, {
  queueMicrotask: function queueMicrotask(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/microtask":"node_modules/core-js/internals/microtask.js","../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js"}],"node_modules/core-js/modules/web.timers.js":[function(require,module,exports) {

var $ = require('../internals/export');
var global = require('../internals/global');
var userAgent = require('../internals/engine-user-agent');

var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check

var wrap = function (scheduler) {
  return function (handler, timeout /* , ...arguments */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : undefined;
    return scheduler(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
    } : handler, timeout);
  };
};

// ie9- setTimeout & setInterval additional parameters fix
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
$({ global: true, bind: true, forced: MSIE }, {
  // `setTimeout` method
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
  setTimeout: wrap(global.setTimeout),
  // `setInterval` method
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
  setInterval: wrap(global.setInterval)
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/engine-user-agent":"node_modules/core-js/internals/engine-user-agent.js"}],"node_modules/core-js/internals/native-url.js":[function(require,module,exports) {
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');

var ITERATOR = wellKnownSymbol('iterator');

module.exports = !fails(function () {
  var url = new URL('b?a=1&b=2&c=3', 'http://a');
  var searchParams = url.searchParams;
  var result = '';
  url.pathname = 'c%20d';
  searchParams.forEach(function (value, key) {
    searchParams['delete']('b');
    result += key + value;
  });
  return (IS_PURE && !url.toJSON)
    || !searchParams.sort
    || url.href !== 'http://a/c%20d?a=1&c=3'
    || searchParams.get('c') !== '3'
    || String(new URLSearchParams('?a=1')) !== 'a=1'
    || !searchParams[ITERATOR]
    // throws in Edge
    || new URL('https://a@b').username !== 'a'
    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
    // not punycoded in Edge
    || new URL('http://тест').host !== 'xn--e1aybc'
    // not escaped in Chrome 62-
    || new URL('http://a#б').hash !== '#%D0%B1'
    // fails in Chrome 66-
    || result !== 'a1c3'
    // throws in Safari
    || new URL('http://x', undefined).host !== 'x';
});

},{"../internals/fails":"node_modules/core-js/internals/fails.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js"}],"node_modules/core-js/internals/string-punycode-to-ascii.js":[function(require,module,exports) {
'use strict';
// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'
var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */
var ucs2decode = function (string) {
  var output = [];
  var counter = 0;
  var length = string.length;
  while (counter < length) {
    var value = string.charCodeAt(counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      var extra = string.charCodeAt(counter++);
      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
};

/**
 * Converts a digit/integer into a basic code point.
 */
var digitToBasic = function (digit) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */
var adapt = function (delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */
// eslint-disable-next-line  max-statements
var encode = function (input) {
  var output = [];

  // Convert the input in UCS-2 to an array of Unicode code points.
  input = ucs2decode(input);

  // Cache the length.
  var inputLength = input.length;

  // Initialize the state.
  var n = initialN;
  var delta = 0;
  var bias = initialBias;
  var i, currentValue;

  // Handle the basic code points.
  for (i = 0; i < input.length; i++) {
    currentValue = input[i];
    if (currentValue < 0x80) {
      output.push(stringFromCharCode(currentValue));
    }
  }

  var basicLength = output.length; // number of basic code points.
  var handledCPCount = basicLength; // number of code points that have been handled;

  // Finish the basic string with a delimiter unless it's empty.
  if (basicLength) {
    output.push(delimiter);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next larger one:
    var m = maxInt;
    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
    var handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      throw RangeError(OVERFLOW_ERROR);
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue < n && ++delta > maxInt) {
        throw RangeError(OVERFLOW_ERROR);
      }
      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer.
        var q = delta;
        for (var k = base; /* no condition */; k += base) {
          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
          if (q < t) break;
          var qMinusT = q - t;
          var baseMinusT = base - t;
          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
          q = floor(qMinusT / baseMinusT);
        }

        output.push(stringFromCharCode(digitToBasic(q)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }

    ++delta;
    ++n;
  }
  return output.join('');
};

module.exports = function (input) {
  var encoded = [];
  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
  var i, label;
  for (i = 0; i < labels.length; i++) {
    label = labels[i];
    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
  }
  return encoded.join('.');
};

},{}],"node_modules/core-js/internals/get-iterator.js":[function(require,module,exports) {
var anObject = require('../internals/an-object');
var getIteratorMethod = require('../internals/get-iterator-method');

module.exports = function (it) {
  var iteratorMethod = getIteratorMethod(it);
  if (typeof iteratorMethod != 'function') {
    throw TypeError(String(it) + ' is not iterable');
  } return anObject(iteratorMethod.call(it));
};

},{"../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/get-iterator-method":"node_modules/core-js/internals/get-iterator-method.js"}],"node_modules/core-js/modules/web.url-search-params.js":[function(require,module,exports) {
'use strict';
// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
require('../modules/es.array.iterator');
var $ = require('../internals/export');
var getBuiltIn = require('../internals/get-built-in');
var USE_NATIVE_URL = require('../internals/native-url');
var redefine = require('../internals/redefine');
var redefineAll = require('../internals/redefine-all');
var setToStringTag = require('../internals/set-to-string-tag');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var InternalStateModule = require('../internals/internal-state');
var anInstance = require('../internals/an-instance');
var hasOwn = require('../internals/has');
var bind = require('../internals/function-bind-context');
var classof = require('../internals/classof');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var create = require('../internals/object-create');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var getIterator = require('../internals/get-iterator');
var getIteratorMethod = require('../internals/get-iterator-method');
var wellKnownSymbol = require('../internals/well-known-symbol');

var $fetch = getBuiltIn('fetch');
var Headers = getBuiltIn('Headers');
var ITERATOR = wellKnownSymbol('iterator');
var URL_SEARCH_PARAMS = 'URLSearchParams';
var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
var setInternalState = InternalStateModule.set;
var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);

var plus = /\+/g;
var sequences = Array(4);

var percentSequence = function (bytes) {
  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
};

var percentDecode = function (sequence) {
  try {
    return decodeURIComponent(sequence);
  } catch (error) {
    return sequence;
  }
};

var deserialize = function (it) {
  var result = it.replace(plus, ' ');
  var bytes = 4;
  try {
    return decodeURIComponent(result);
  } catch (error) {
    while (bytes) {
      result = result.replace(percentSequence(bytes--), percentDecode);
    }
    return result;
  }
};

var find = /[!'()~]|%20/g;

var replace = {
  '!': '%21',
  "'": '%27',
  '(': '%28',
  ')': '%29',
  '~': '%7E',
  '%20': '+'
};

var replacer = function (match) {
  return replace[match];
};

var serialize = function (it) {
  return encodeURIComponent(it).replace(find, replacer);
};

var parseSearchParams = function (result, query) {
  if (query) {
    var attributes = query.split('&');
    var index = 0;
    var attribute, entry;
    while (index < attributes.length) {
      attribute = attributes[index++];
      if (attribute.length) {
        entry = attribute.split('=');
        result.push({
          key: deserialize(entry.shift()),
          value: deserialize(entry.join('='))
        });
      }
    }
  }
};

var updateSearchParams = function (query) {
  this.entries.length = 0;
  parseSearchParams(this.entries, query);
};

var validateArgumentsLength = function (passed, required) {
  if (passed < required) throw TypeError('Not enough arguments');
};

var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
  setInternalState(this, {
    type: URL_SEARCH_PARAMS_ITERATOR,
    iterator: getIterator(getInternalParamsState(params).entries),
    kind: kind
  });
}, 'Iterator', function next() {
  var state = getInternalIteratorState(this);
  var kind = state.kind;
  var step = state.iterator.next();
  var entry = step.value;
  if (!step.done) {
    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
  } return step;
});

// `URLSearchParams` constructor
// https://url.spec.whatwg.org/#interface-urlsearchparams
var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
  var init = arguments.length > 0 ? arguments[0] : undefined;
  var that = this;
  var entries = [];
  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

  setInternalState(that, {
    type: URL_SEARCH_PARAMS,
    entries: entries,
    updateURL: function () { /* empty */ },
    updateSearchParams: updateSearchParams
  });

  if (init !== undefined) {
    if (isObject(init)) {
      iteratorMethod = getIteratorMethod(init);
      if (typeof iteratorMethod === 'function') {
        iterator = iteratorMethod.call(init);
        next = iterator.next;
        while (!(step = next.call(iterator)).done) {
          entryIterator = getIterator(anObject(step.value));
          entryNext = entryIterator.next;
          if (
            (first = entryNext.call(entryIterator)).done ||
            (second = entryNext.call(entryIterator)).done ||
            !entryNext.call(entryIterator).done
          ) throw TypeError('Expected sequence with length 2');
          entries.push({ key: first.value + '', value: second.value + '' });
        }
      } else for (key in init) if (hasOwn(init, key)) entries.push({ key: key, value: init[key] + '' });
    } else {
      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
    }
  }
};

var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

redefineAll(URLSearchParamsPrototype, {
  // `URLSearchParams.prototype.appent` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
  append: function append(name, value) {
    validateArgumentsLength(arguments.length, 2);
    var state = getInternalParamsState(this);
    state.entries.push({ key: name + '', value: value + '' });
    state.updateURL();
  },
  // `URLSearchParams.prototype.delete` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
  'delete': function (name) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var key = name + '';
    var index = 0;
    while (index < entries.length) {
      if (entries[index].key === key) entries.splice(index, 1);
      else index++;
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.get` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
  get: function get(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) return entries[index].value;
    }
    return null;
  },
  // `URLSearchParams.prototype.getAll` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
  getAll: function getAll(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var result = [];
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) result.push(entries[index].value);
    }
    return result;
  },
  // `URLSearchParams.prototype.has` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
  has: function has(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var index = 0;
    while (index < entries.length) {
      if (entries[index++].key === key) return true;
    }
    return false;
  },
  // `URLSearchParams.prototype.set` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
  set: function set(name, value) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var found = false;
    var key = name + '';
    var val = value + '';
    var index = 0;
    var entry;
    for (; index < entries.length; index++) {
      entry = entries[index];
      if (entry.key === key) {
        if (found) entries.splice(index--, 1);
        else {
          found = true;
          entry.value = val;
        }
      }
    }
    if (!found) entries.push({ key: key, value: val });
    state.updateURL();
  },
  // `URLSearchParams.prototype.sort` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
  sort: function sort() {
    var state = getInternalParamsState(this);
    var entries = state.entries;
    // Array#sort is not stable in some engines
    var slice = entries.slice();
    var entry, entriesIndex, sliceIndex;
    entries.length = 0;
    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
      entry = slice[sliceIndex];
      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
        if (entries[entriesIndex].key > entry.key) {
          entries.splice(entriesIndex, 0, entry);
          break;
        }
      }
      if (entriesIndex === sliceIndex) entries.push(entry);
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.forEach` method
  forEach: function forEach(callback /* , thisArg */) {
    var entries = getInternalParamsState(this).entries;
    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      boundFunction(entry.value, entry.key, this);
    }
  },
  // `URLSearchParams.prototype.keys` method
  keys: function keys() {
    return new URLSearchParamsIterator(this, 'keys');
  },
  // `URLSearchParams.prototype.values` method
  values: function values() {
    return new URLSearchParamsIterator(this, 'values');
  },
  // `URLSearchParams.prototype.entries` method
  entries: function entries() {
    return new URLSearchParamsIterator(this, 'entries');
  }
}, { enumerable: true });

// `URLSearchParams.prototype[@@iterator]` method
redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);

// `URLSearchParams.prototype.toString` method
// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
redefine(URLSearchParamsPrototype, 'toString', function toString() {
  var entries = getInternalParamsState(this).entries;
  var result = [];
  var index = 0;
  var entry;
  while (index < entries.length) {
    entry = entries[index++];
    result.push(serialize(entry.key) + '=' + serialize(entry.value));
  } return result.join('&');
}, { enumerable: true });

setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

$({ global: true, forced: !USE_NATIVE_URL }, {
  URLSearchParams: URLSearchParamsConstructor
});

// Wrap `fetch` for correct work with polyfilled `URLSearchParams`
// https://github.com/zloirock/core-js/issues/674
if (!USE_NATIVE_URL && typeof $fetch == 'function' && typeof Headers == 'function') {
  $({ global: true, enumerable: true, forced: true }, {
    fetch: function fetch(input /* , init */) {
      var args = [input];
      var init, body, headers;
      if (arguments.length > 1) {
        init = arguments[1];
        if (isObject(init)) {
          body = init.body;
          if (classof(body) === URL_SEARCH_PARAMS) {
            headers = init.headers ? new Headers(init.headers) : new Headers();
            if (!headers.has('content-type')) {
              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            }
            init = create(init, {
              body: createPropertyDescriptor(0, String(body)),
              headers: createPropertyDescriptor(0, headers)
            });
          }
        }
        args.push(init);
      } return $fetch.apply(this, args);
    }
  });
}

module.exports = {
  URLSearchParams: URLSearchParamsConstructor,
  getState: getInternalParamsState
};

},{"../modules/es.array.iterator":"node_modules/core-js/modules/es.array.iterator.js","../internals/export":"node_modules/core-js/internals/export.js","../internals/get-built-in":"node_modules/core-js/internals/get-built-in.js","../internals/native-url":"node_modules/core-js/internals/native-url.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/redefine-all":"node_modules/core-js/internals/redefine-all.js","../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js","../internals/create-iterator-constructor":"node_modules/core-js/internals/create-iterator-constructor.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/an-instance":"node_modules/core-js/internals/an-instance.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/function-bind-context":"node_modules/core-js/internals/function-bind-context.js","../internals/classof":"node_modules/core-js/internals/classof.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/object-create":"node_modules/core-js/internals/object-create.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js","../internals/get-iterator":"node_modules/core-js/internals/get-iterator.js","../internals/get-iterator-method":"node_modules/core-js/internals/get-iterator-method.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/modules/web.url.js":[function(require,module,exports) {

'use strict';
// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
require('../modules/es.string.iterator');
var $ = require('../internals/export');
var DESCRIPTORS = require('../internals/descriptors');
var USE_NATIVE_URL = require('../internals/native-url');
var global = require('../internals/global');
var defineProperties = require('../internals/object-define-properties');
var redefine = require('../internals/redefine');
var anInstance = require('../internals/an-instance');
var has = require('../internals/has');
var assign = require('../internals/object-assign');
var arrayFrom = require('../internals/array-from');
var codeAt = require('../internals/string-multibyte').codeAt;
var toASCII = require('../internals/string-punycode-to-ascii');
var setToStringTag = require('../internals/set-to-string-tag');
var URLSearchParamsModule = require('../modules/web.url-search-params');
var InternalStateModule = require('../internals/internal-state');

var NativeURL = global.URL;
var URLSearchParams = URLSearchParamsModule.URLSearchParams;
var getInternalSearchParamsState = URLSearchParamsModule.getState;
var setInternalState = InternalStateModule.set;
var getInternalURLState = InternalStateModule.getterFor('URL');
var floor = Math.floor;
var pow = Math.pow;

var INVALID_AUTHORITY = 'Invalid authority';
var INVALID_SCHEME = 'Invalid scheme';
var INVALID_HOST = 'Invalid host';
var INVALID_PORT = 'Invalid port';

var ALPHA = /[A-Za-z]/;
var ALPHANUMERIC = /[\d+\-.A-Za-z]/;
var DIGIT = /\d/;
var HEX_START = /^(0x|0X)/;
var OCT = /^[0-7]+$/;
var DEC = /^\d+$/;
var HEX = /^[\dA-Fa-f]+$/;
// eslint-disable-next-line no-control-regex
var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
// eslint-disable-next-line no-control-regex
var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
// eslint-disable-next-line no-control-regex
var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
// eslint-disable-next-line no-control-regex
var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
var EOF;

var parseHost = function (url, input) {
  var result, codePoints, index;
  if (input.charAt(0) == '[') {
    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
    result = parseIPv6(input.slice(1, -1));
    if (!result) return INVALID_HOST;
    url.host = result;
  // opaque host
  } else if (!isSpecial(url)) {
    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
    result = '';
    codePoints = arrayFrom(input);
    for (index = 0; index < codePoints.length; index++) {
      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
    }
    url.host = result;
  } else {
    input = toASCII(input);
    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
    result = parseIPv4(input);
    if (result === null) return INVALID_HOST;
    url.host = result;
  }
};

var parseIPv4 = function (input) {
  var parts = input.split('.');
  var partsLength, numbers, index, part, radix, number, ipv4;
  if (parts.length && parts[parts.length - 1] == '') {
    parts.pop();
  }
  partsLength = parts.length;
  if (partsLength > 4) return input;
  numbers = [];
  for (index = 0; index < partsLength; index++) {
    part = parts[index];
    if (part == '') return input;
    radix = 10;
    if (part.length > 1 && part.charAt(0) == '0') {
      radix = HEX_START.test(part) ? 16 : 8;
      part = part.slice(radix == 8 ? 1 : 2);
    }
    if (part === '') {
      number = 0;
    } else {
      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
      number = parseInt(part, radix);
    }
    numbers.push(number);
  }
  for (index = 0; index < partsLength; index++) {
    number = numbers[index];
    if (index == partsLength - 1) {
      if (number >= pow(256, 5 - partsLength)) return null;
    } else if (number > 255) return null;
  }
  ipv4 = numbers.pop();
  for (index = 0; index < numbers.length; index++) {
    ipv4 += numbers[index] * pow(256, 3 - index);
  }
  return ipv4;
};

// eslint-disable-next-line max-statements
var parseIPv6 = function (input) {
  var address = [0, 0, 0, 0, 0, 0, 0, 0];
  var pieceIndex = 0;
  var compress = null;
  var pointer = 0;
  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

  var char = function () {
    return input.charAt(pointer);
  };

  if (char() == ':') {
    if (input.charAt(1) != ':') return;
    pointer += 2;
    pieceIndex++;
    compress = pieceIndex;
  }
  while (char()) {
    if (pieceIndex == 8) return;
    if (char() == ':') {
      if (compress !== null) return;
      pointer++;
      pieceIndex++;
      compress = pieceIndex;
      continue;
    }
    value = length = 0;
    while (length < 4 && HEX.test(char())) {
      value = value * 16 + parseInt(char(), 16);
      pointer++;
      length++;
    }
    if (char() == '.') {
      if (length == 0) return;
      pointer -= length;
      if (pieceIndex > 6) return;
      numbersSeen = 0;
      while (char()) {
        ipv4Piece = null;
        if (numbersSeen > 0) {
          if (char() == '.' && numbersSeen < 4) pointer++;
          else return;
        }
        if (!DIGIT.test(char())) return;
        while (DIGIT.test(char())) {
          number = parseInt(char(), 10);
          if (ipv4Piece === null) ipv4Piece = number;
          else if (ipv4Piece == 0) return;
          else ipv4Piece = ipv4Piece * 10 + number;
          if (ipv4Piece > 255) return;
          pointer++;
        }
        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
        numbersSeen++;
        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
      }
      if (numbersSeen != 4) return;
      break;
    } else if (char() == ':') {
      pointer++;
      if (!char()) return;
    } else if (char()) return;
    address[pieceIndex++] = value;
  }
  if (compress !== null) {
    swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex != 0 && swaps > 0) {
      swap = address[pieceIndex];
      address[pieceIndex--] = address[compress + swaps - 1];
      address[compress + --swaps] = swap;
    }
  } else if (pieceIndex != 8) return;
  return address;
};

var findLongestZeroSequence = function (ipv6) {
  var maxIndex = null;
  var maxLength = 1;
  var currStart = null;
  var currLength = 0;
  var index = 0;
  for (; index < 8; index++) {
    if (ipv6[index] !== 0) {
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      currStart = null;
      currLength = 0;
    } else {
      if (currStart === null) currStart = index;
      ++currLength;
    }
  }
  if (currLength > maxLength) {
    maxIndex = currStart;
    maxLength = currLength;
  }
  return maxIndex;
};

var serializeHost = function (host) {
  var result, index, compress, ignore0;
  // ipv4
  if (typeof host == 'number') {
    result = [];
    for (index = 0; index < 4; index++) {
      result.unshift(host % 256);
      host = floor(host / 256);
    } return result.join('.');
  // ipv6
  } else if (typeof host == 'object') {
    result = '';
    compress = findLongestZeroSequence(host);
    for (index = 0; index < 8; index++) {
      if (ignore0 && host[index] === 0) continue;
      if (ignore0) ignore0 = false;
      if (compress === index) {
        result += index ? ':' : '::';
        ignore0 = true;
      } else {
        result += host[index].toString(16);
        if (index < 7) result += ':';
      }
    }
    return '[' + result + ']';
  } return host;
};

var C0ControlPercentEncodeSet = {};
var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
});
var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
  '#': 1, '?': 1, '{': 1, '}': 1
});
var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
});

var percentEncode = function (char, set) {
  var code = codeAt(char, 0);
  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
};

var specialSchemes = {
  ftp: 21,
  file: null,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

var isSpecial = function (url) {
  return has(specialSchemes, url.scheme);
};

var includesCredentials = function (url) {
  return url.username != '' || url.password != '';
};

var cannotHaveUsernamePasswordPort = function (url) {
  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
};

var isWindowsDriveLetter = function (string, normalized) {
  var second;
  return string.length == 2 && ALPHA.test(string.charAt(0))
    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
};

var startsWithWindowsDriveLetter = function (string) {
  var third;
  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
    string.length == 2 ||
    ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
  );
};

var shortenURLsPath = function (url) {
  var path = url.path;
  var pathSize = path.length;
  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
    path.pop();
  }
};

var isSingleDot = function (segment) {
  return segment === '.' || segment.toLowerCase() === '%2e';
};

var isDoubleDot = function (segment) {
  segment = segment.toLowerCase();
  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
};

// States:
var SCHEME_START = {};
var SCHEME = {};
var NO_SCHEME = {};
var SPECIAL_RELATIVE_OR_AUTHORITY = {};
var PATH_OR_AUTHORITY = {};
var RELATIVE = {};
var RELATIVE_SLASH = {};
var SPECIAL_AUTHORITY_SLASHES = {};
var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
var AUTHORITY = {};
var HOST = {};
var HOSTNAME = {};
var PORT = {};
var FILE = {};
var FILE_SLASH = {};
var FILE_HOST = {};
var PATH_START = {};
var PATH = {};
var CANNOT_BE_A_BASE_URL_PATH = {};
var QUERY = {};
var FRAGMENT = {};

// eslint-disable-next-line max-statements
var parseURL = function (url, input, stateOverride, base) {
  var state = stateOverride || SCHEME_START;
  var pointer = 0;
  var buffer = '';
  var seenAt = false;
  var seenBracket = false;
  var seenPasswordToken = false;
  var codePoints, char, bufferCodePoints, failure;

  if (!stateOverride) {
    url.scheme = '';
    url.username = '';
    url.password = '';
    url.host = null;
    url.port = null;
    url.path = [];
    url.query = null;
    url.fragment = null;
    url.cannotBeABaseURL = false;
    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
  }

  input = input.replace(TAB_AND_NEW_LINE, '');

  codePoints = arrayFrom(input);

  while (pointer <= codePoints.length) {
    char = codePoints[pointer];
    switch (state) {
      case SCHEME_START:
        if (char && ALPHA.test(char)) {
          buffer += char.toLowerCase();
          state = SCHEME;
        } else if (!stateOverride) {
          state = NO_SCHEME;
          continue;
        } else return INVALID_SCHEME;
        break;

      case SCHEME:
        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
          buffer += char.toLowerCase();
        } else if (char == ':') {
          if (stateOverride && (
            (isSpecial(url) != has(specialSchemes, buffer)) ||
            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
            (url.scheme == 'file' && !url.host)
          )) return;
          url.scheme = buffer;
          if (stateOverride) {
            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
            return;
          }
          buffer = '';
          if (url.scheme == 'file') {
            state = FILE;
          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
            state = SPECIAL_RELATIVE_OR_AUTHORITY;
          } else if (isSpecial(url)) {
            state = SPECIAL_AUTHORITY_SLASHES;
          } else if (codePoints[pointer + 1] == '/') {
            state = PATH_OR_AUTHORITY;
            pointer++;
          } else {
            url.cannotBeABaseURL = true;
            url.path.push('');
            state = CANNOT_BE_A_BASE_URL_PATH;
          }
        } else if (!stateOverride) {
          buffer = '';
          state = NO_SCHEME;
          pointer = 0;
          continue;
        } else return INVALID_SCHEME;
        break;

      case NO_SCHEME:
        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
        if (base.cannotBeABaseURL && char == '#') {
          url.scheme = base.scheme;
          url.path = base.path.slice();
          url.query = base.query;
          url.fragment = '';
          url.cannotBeABaseURL = true;
          state = FRAGMENT;
          break;
        }
        state = base.scheme == 'file' ? FILE : RELATIVE;
        continue;

      case SPECIAL_RELATIVE_OR_AUTHORITY:
        if (char == '/' && codePoints[pointer + 1] == '/') {
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          pointer++;
        } else {
          state = RELATIVE;
          continue;
        } break;

      case PATH_OR_AUTHORITY:
        if (char == '/') {
          state = AUTHORITY;
          break;
        } else {
          state = PATH;
          continue;
        }

      case RELATIVE:
        url.scheme = base.scheme;
        if (char == EOF) {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = base.query;
        } else if (char == '/' || (char == '\\' && isSpecial(url))) {
          state = RELATIVE_SLASH;
        } else if (char == '?') {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = '';
          state = QUERY;
        } else if (char == '#') {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = base.query;
          url.fragment = '';
          state = FRAGMENT;
        } else {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.path.pop();
          state = PATH;
          continue;
        } break;

      case RELATIVE_SLASH:
        if (isSpecial(url) && (char == '/' || char == '\\')) {
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
        } else if (char == '/') {
          state = AUTHORITY;
        } else {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          state = PATH;
          continue;
        } break;

      case SPECIAL_AUTHORITY_SLASHES:
        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
        pointer++;
        break;

      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
        if (char != '/' && char != '\\') {
          state = AUTHORITY;
          continue;
        } break;

      case AUTHORITY:
        if (char == '@') {
          if (seenAt) buffer = '%40' + buffer;
          seenAt = true;
          bufferCodePoints = arrayFrom(buffer);
          for (var i = 0; i < bufferCodePoints.length; i++) {
            var codePoint = bufferCodePoints[i];
            if (codePoint == ':' && !seenPasswordToken) {
              seenPasswordToken = true;
              continue;
            }
            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
            if (seenPasswordToken) url.password += encodedCodePoints;
            else url.username += encodedCodePoints;
          }
          buffer = '';
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url))
        ) {
          if (seenAt && buffer == '') return INVALID_AUTHORITY;
          pointer -= arrayFrom(buffer).length + 1;
          buffer = '';
          state = HOST;
        } else buffer += char;
        break;

      case HOST:
      case HOSTNAME:
        if (stateOverride && url.scheme == 'file') {
          state = FILE_HOST;
          continue;
        } else if (char == ':' && !seenBracket) {
          if (buffer == '') return INVALID_HOST;
          failure = parseHost(url, buffer);
          if (failure) return failure;
          buffer = '';
          state = PORT;
          if (stateOverride == HOSTNAME) return;
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url))
        ) {
          if (isSpecial(url) && buffer == '') return INVALID_HOST;
          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
          failure = parseHost(url, buffer);
          if (failure) return failure;
          buffer = '';
          state = PATH_START;
          if (stateOverride) return;
          continue;
        } else {
          if (char == '[') seenBracket = true;
          else if (char == ']') seenBracket = false;
          buffer += char;
        } break;

      case PORT:
        if (DIGIT.test(char)) {
          buffer += char;
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url)) ||
          stateOverride
        ) {
          if (buffer != '') {
            var port = parseInt(buffer, 10);
            if (port > 0xFFFF) return INVALID_PORT;
            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
            buffer = '';
          }
          if (stateOverride) return;
          state = PATH_START;
          continue;
        } else return INVALID_PORT;
        break;

      case FILE:
        url.scheme = 'file';
        if (char == '/' || char == '\\') state = FILE_SLASH;
        else if (base && base.scheme == 'file') {
          if (char == EOF) {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = base.query;
          } else if (char == '?') {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = '';
            state = QUERY;
          } else if (char == '#') {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = base.query;
            url.fragment = '';
            state = FRAGMENT;
          } else {
            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
              url.host = base.host;
              url.path = base.path.slice();
              shortenURLsPath(url);
            }
            state = PATH;
            continue;
          }
        } else {
          state = PATH;
          continue;
        } break;

      case FILE_SLASH:
        if (char == '/' || char == '\\') {
          state = FILE_HOST;
          break;
        }
        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
          else url.host = base.host;
        }
        state = PATH;
        continue;

      case FILE_HOST:
        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
          if (!stateOverride && isWindowsDriveLetter(buffer)) {
            state = PATH;
          } else if (buffer == '') {
            url.host = '';
            if (stateOverride) return;
            state = PATH_START;
          } else {
            failure = parseHost(url, buffer);
            if (failure) return failure;
            if (url.host == 'localhost') url.host = '';
            if (stateOverride) return;
            buffer = '';
            state = PATH_START;
          } continue;
        } else buffer += char;
        break;

      case PATH_START:
        if (isSpecial(url)) {
          state = PATH;
          if (char != '/' && char != '\\') continue;
        } else if (!stateOverride && char == '?') {
          url.query = '';
          state = QUERY;
        } else if (!stateOverride && char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          state = PATH;
          if (char != '/') continue;
        } break;

      case PATH:
        if (
          char == EOF || char == '/' ||
          (char == '\\' && isSpecial(url)) ||
          (!stateOverride && (char == '?' || char == '#'))
        ) {
          if (isDoubleDot(buffer)) {
            shortenURLsPath(url);
            if (char != '/' && !(char == '\\' && isSpecial(url))) {
              url.path.push('');
            }
          } else if (isSingleDot(buffer)) {
            if (char != '/' && !(char == '\\' && isSpecial(url))) {
              url.path.push('');
            }
          } else {
            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
              if (url.host) url.host = '';
              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
            }
            url.path.push(buffer);
          }
          buffer = '';
          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
            while (url.path.length > 1 && url.path[0] === '') {
              url.path.shift();
            }
          }
          if (char == '?') {
            url.query = '';
            state = QUERY;
          } else if (char == '#') {
            url.fragment = '';
            state = FRAGMENT;
          }
        } else {
          buffer += percentEncode(char, pathPercentEncodeSet);
        } break;

      case CANNOT_BE_A_BASE_URL_PATH:
        if (char == '?') {
          url.query = '';
          state = QUERY;
        } else if (char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
        } break;

      case QUERY:
        if (!stateOverride && char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          if (char == "'" && isSpecial(url)) url.query += '%27';
          else if (char == '#') url.query += '%23';
          else url.query += percentEncode(char, C0ControlPercentEncodeSet);
        } break;

      case FRAGMENT:
        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
        break;
    }

    pointer++;
  }
};

// `URL` constructor
// https://url.spec.whatwg.org/#url-class
var URLConstructor = function URL(url /* , base */) {
  var that = anInstance(this, URLConstructor, 'URL');
  var base = arguments.length > 1 ? arguments[1] : undefined;
  var urlString = String(url);
  var state = setInternalState(that, { type: 'URL' });
  var baseState, failure;
  if (base !== undefined) {
    if (base instanceof URLConstructor) baseState = getInternalURLState(base);
    else {
      failure = parseURL(baseState = {}, String(base));
      if (failure) throw TypeError(failure);
    }
  }
  failure = parseURL(state, urlString, null, baseState);
  if (failure) throw TypeError(failure);
  var searchParams = state.searchParams = new URLSearchParams();
  var searchParamsState = getInternalSearchParamsState(searchParams);
  searchParamsState.updateSearchParams(state.query);
  searchParamsState.updateURL = function () {
    state.query = String(searchParams) || null;
  };
  if (!DESCRIPTORS) {
    that.href = serializeURL.call(that);
    that.origin = getOrigin.call(that);
    that.protocol = getProtocol.call(that);
    that.username = getUsername.call(that);
    that.password = getPassword.call(that);
    that.host = getHost.call(that);
    that.hostname = getHostname.call(that);
    that.port = getPort.call(that);
    that.pathname = getPathname.call(that);
    that.search = getSearch.call(that);
    that.searchParams = getSearchParams.call(that);
    that.hash = getHash.call(that);
  }
};

var URLPrototype = URLConstructor.prototype;

var serializeURL = function () {
  var url = getInternalURLState(this);
  var scheme = url.scheme;
  var username = url.username;
  var password = url.password;
  var host = url.host;
  var port = url.port;
  var path = url.path;
  var query = url.query;
  var fragment = url.fragment;
  var output = scheme + ':';
  if (host !== null) {
    output += '//';
    if (includesCredentials(url)) {
      output += username + (password ? ':' + password : '') + '@';
    }
    output += serializeHost(host);
    if (port !== null) output += ':' + port;
  } else if (scheme == 'file') output += '//';
  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
  if (query !== null) output += '?' + query;
  if (fragment !== null) output += '#' + fragment;
  return output;
};

var getOrigin = function () {
  var url = getInternalURLState(this);
  var scheme = url.scheme;
  var port = url.port;
  if (scheme == 'blob') try {
    return new URL(scheme.path[0]).origin;
  } catch (error) {
    return 'null';
  }
  if (scheme == 'file' || !isSpecial(url)) return 'null';
  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
};

var getProtocol = function () {
  return getInternalURLState(this).scheme + ':';
};

var getUsername = function () {
  return getInternalURLState(this).username;
};

var getPassword = function () {
  return getInternalURLState(this).password;
};

var getHost = function () {
  var url = getInternalURLState(this);
  var host = url.host;
  var port = url.port;
  return host === null ? ''
    : port === null ? serializeHost(host)
    : serializeHost(host) + ':' + port;
};

var getHostname = function () {
  var host = getInternalURLState(this).host;
  return host === null ? '' : serializeHost(host);
};

var getPort = function () {
  var port = getInternalURLState(this).port;
  return port === null ? '' : String(port);
};

var getPathname = function () {
  var url = getInternalURLState(this);
  var path = url.path;
  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
};

var getSearch = function () {
  var query = getInternalURLState(this).query;
  return query ? '?' + query : '';
};

var getSearchParams = function () {
  return getInternalURLState(this).searchParams;
};

var getHash = function () {
  var fragment = getInternalURLState(this).fragment;
  return fragment ? '#' + fragment : '';
};

var accessorDescriptor = function (getter, setter) {
  return { get: getter, set: setter, configurable: true, enumerable: true };
};

if (DESCRIPTORS) {
  defineProperties(URLPrototype, {
    // `URL.prototype.href` accessors pair
    // https://url.spec.whatwg.org/#dom-url-href
    href: accessorDescriptor(serializeURL, function (href) {
      var url = getInternalURLState(this);
      var urlString = String(href);
      var failure = parseURL(url, urlString);
      if (failure) throw TypeError(failure);
      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.origin` getter
    // https://url.spec.whatwg.org/#dom-url-origin
    origin: accessorDescriptor(getOrigin),
    // `URL.prototype.protocol` accessors pair
    // https://url.spec.whatwg.org/#dom-url-protocol
    protocol: accessorDescriptor(getProtocol, function (protocol) {
      var url = getInternalURLState(this);
      parseURL(url, String(protocol) + ':', SCHEME_START);
    }),
    // `URL.prototype.username` accessors pair
    // https://url.spec.whatwg.org/#dom-url-username
    username: accessorDescriptor(getUsername, function (username) {
      var url = getInternalURLState(this);
      var codePoints = arrayFrom(String(username));
      if (cannotHaveUsernamePasswordPort(url)) return;
      url.username = '';
      for (var i = 0; i < codePoints.length; i++) {
        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    }),
    // `URL.prototype.password` accessors pair
    // https://url.spec.whatwg.org/#dom-url-password
    password: accessorDescriptor(getPassword, function (password) {
      var url = getInternalURLState(this);
      var codePoints = arrayFrom(String(password));
      if (cannotHaveUsernamePasswordPort(url)) return;
      url.password = '';
      for (var i = 0; i < codePoints.length; i++) {
        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    }),
    // `URL.prototype.host` accessors pair
    // https://url.spec.whatwg.org/#dom-url-host
    host: accessorDescriptor(getHost, function (host) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      parseURL(url, String(host), HOST);
    }),
    // `URL.prototype.hostname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hostname
    hostname: accessorDescriptor(getHostname, function (hostname) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      parseURL(url, String(hostname), HOSTNAME);
    }),
    // `URL.prototype.port` accessors pair
    // https://url.spec.whatwg.org/#dom-url-port
    port: accessorDescriptor(getPort, function (port) {
      var url = getInternalURLState(this);
      if (cannotHaveUsernamePasswordPort(url)) return;
      port = String(port);
      if (port == '') url.port = null;
      else parseURL(url, port, PORT);
    }),
    // `URL.prototype.pathname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-pathname
    pathname: accessorDescriptor(getPathname, function (pathname) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      url.path = [];
      parseURL(url, pathname + '', PATH_START);
    }),
    // `URL.prototype.search` accessors pair
    // https://url.spec.whatwg.org/#dom-url-search
    search: accessorDescriptor(getSearch, function (search) {
      var url = getInternalURLState(this);
      search = String(search);
      if (search == '') {
        url.query = null;
      } else {
        if ('?' == search.charAt(0)) search = search.slice(1);
        url.query = '';
        parseURL(url, search, QUERY);
      }
      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.searchParams` getter
    // https://url.spec.whatwg.org/#dom-url-searchparams
    searchParams: accessorDescriptor(getSearchParams),
    // `URL.prototype.hash` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hash
    hash: accessorDescriptor(getHash, function (hash) {
      var url = getInternalURLState(this);
      hash = String(hash);
      if (hash == '') {
        url.fragment = null;
        return;
      }
      if ('#' == hash.charAt(0)) hash = hash.slice(1);
      url.fragment = '';
      parseURL(url, hash, FRAGMENT);
    })
  });
}

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
redefine(URLPrototype, 'toJSON', function toJSON() {
  return serializeURL.call(this);
}, { enumerable: true });

// `URL.prototype.toString` method
// https://url.spec.whatwg.org/#URL-stringification-behavior
redefine(URLPrototype, 'toString', function toString() {
  return serializeURL.call(this);
}, { enumerable: true });

if (NativeURL) {
  var nativeCreateObjectURL = NativeURL.createObjectURL;
  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
  // `URL.createObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
  // eslint-disable-next-line no-unused-vars
  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
    return nativeCreateObjectURL.apply(NativeURL, arguments);
  });
  // `URL.revokeObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
  // eslint-disable-next-line no-unused-vars
  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
    return nativeRevokeObjectURL.apply(NativeURL, arguments);
  });
}

setToStringTag(URLConstructor, 'URL');

$({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
  URL: URLConstructor
});

},{"../modules/es.string.iterator":"node_modules/core-js/modules/es.string.iterator.js","../internals/export":"node_modules/core-js/internals/export.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/native-url":"node_modules/core-js/internals/native-url.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/object-define-properties":"node_modules/core-js/internals/object-define-properties.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/an-instance":"node_modules/core-js/internals/an-instance.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/object-assign":"node_modules/core-js/internals/object-assign.js","../internals/array-from":"node_modules/core-js/internals/array-from.js","../internals/string-multibyte":"node_modules/core-js/internals/string-multibyte.js","../internals/string-punycode-to-ascii":"node_modules/core-js/internals/string-punycode-to-ascii.js","../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js","../modules/web.url-search-params":"node_modules/core-js/modules/web.url-search-params.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js"}],"node_modules/core-js/modules/web.url.to-json.js":[function(require,module,exports) {
'use strict';
var $ = require('../internals/export');

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
$({ target: 'URL', proto: true, enumerable: true }, {
  toJSON: function toJSON() {
    return URL.prototype.toString.call(this);
  }
});

},{"../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/web/index.js":[function(require,module,exports) {
require('../modules/web.dom-collections.for-each');
require('../modules/web.dom-collections.iterator');
require('../modules/web.immediate');
require('../modules/web.queue-microtask');
require('../modules/web.timers');
require('../modules/web.url');
require('../modules/web.url.to-json');
require('../modules/web.url-search-params');
var path = require('../internals/path');

module.exports = path;

},{"../modules/web.dom-collections.for-each":"node_modules/core-js/modules/web.dom-collections.for-each.js","../modules/web.dom-collections.iterator":"node_modules/core-js/modules/web.dom-collections.iterator.js","../modules/web.immediate":"node_modules/core-js/modules/web.immediate.js","../modules/web.queue-microtask":"node_modules/core-js/modules/web.queue-microtask.js","../modules/web.timers":"node_modules/core-js/modules/web.timers.js","../modules/web.url":"node_modules/core-js/modules/web.url.js","../modules/web.url.to-json":"node_modules/core-js/modules/web.url.to-json.js","../modules/web.url-search-params":"node_modules/core-js/modules/web.url-search-params.js","../internals/path":"node_modules/core-js/internals/path.js"}],"node_modules/core-js/stable/index.js":[function(require,module,exports) {
require('../es');
require('../web');
var path = require('../internals/path');

module.exports = path;

},{"../es":"node_modules/core-js/es/index.js","../web":"node_modules/core-js/web/index.js","../internals/path":"node_modules/core-js/internals/path.js"}],"node_modules/regenerator-runtime/runtime.js":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],"node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"node_modules/ieee754/index.js":[function(require,module,exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"node_modules/base64-js/index.js","ieee754":"node_modules/ieee754/index.js","isarray":"node_modules/isarray/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"node_modules/joi-browser/dist/joi-browser.js":[function(require,module,exports) {
var define;
var Buffer = require("buffer").Buffer;
var process = require("process");
var global = arguments[3];
(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define("Joi", [], factory);else if (typeof exports === 'object') exports["Joi"] = factory();else root["Joi"] = factory();
})(this, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // identity function for calling harmony imports with the correct context

      /******/

      __webpack_require__.i = function (value) {
        return value;
      };
      /******/

      /******/
      // define getter function for harmony exports

      /******/


      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            /******/
            configurable: false,

            /******/
            enumerable: true,

            /******/
            get: getter
            /******/

          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = 32);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer, process) {
        // Load modules
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
          return typeof obj;
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };

        var Assert = __webpack_require__(17);

        var Crypto = __webpack_require__(15);

        var Path = __webpack_require__(37);

        var Util = __webpack_require__(16);

        var Escape = __webpack_require__(18); // Declare internals


        var internals = {}; // Clone object or array

        exports.clone = function (obj, seen) {
          if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null) {
            return obj;
          }

          seen = seen || new Map();
          var lookup = seen.get(obj);

          if (lookup) {
            return lookup;
          }

          var newObj = void 0;
          var cloneDeep = false;

          if (!Array.isArray(obj)) {
            if (Buffer.isBuffer(obj)) {
              newObj = Buffer.from(obj);
            } else if (obj instanceof Date) {
              newObj = new Date(obj.getTime());
            } else if (obj instanceof RegExp) {
              newObj = new RegExp(obj);
            } else {
              var proto = Object.getPrototypeOf(obj);

              if (proto && proto.isImmutable) {
                newObj = obj;
              } else {
                newObj = Object.create(proto);
                cloneDeep = true;
              }
            }
          } else {
            newObj = [];
            cloneDeep = true;
          }

          seen.set(obj, newObj);

          if (cloneDeep) {
            var keys = Object.getOwnPropertyNames(obj);

            for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              var descriptor = Object.getOwnPropertyDescriptor(obj, key);

              if (descriptor && (descriptor.get || descriptor.set)) {
                Object.defineProperty(newObj, key, descriptor);
              } else {
                newObj[key] = exports.clone(obj[key], seen);
              }
            }
          }

          return newObj;
        }; // Merge all the properties of source into target, source wins in conflict, and by default null and undefined from source are applied

        /*eslint-disable */


        exports.merge = function (target, source, isNullOverride
        /* = true */
        , isMergeArrays
        /* = true */
        ) {
          /*eslint-enable */
          exports.assert(target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object', 'Invalid target value: must be an object');
          exports.assert(source === null || source === undefined || (typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object', 'Invalid source value: must be null, undefined, or an object');

          if (!source) {
            return target;
          }

          if (Array.isArray(source)) {
            exports.assert(Array.isArray(target), 'Cannot merge array onto an object');

            if (isMergeArrays === false) {
              // isMergeArrays defaults to true
              target.length = 0; // Must not change target assignment
            }

            for (var i = 0; i < source.length; ++i) {
              target.push(exports.clone(source[i]));
            }

            return target;
          }

          var keys = Object.keys(source);

          for (var _i = 0; _i < keys.length; ++_i) {
            var key = keys[_i];

            if (key === '__proto__') {
              continue;
            }

            var value = source[key];

            if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
              if (!target[key] || _typeof(target[key]) !== 'object' || Array.isArray(target[key]) !== Array.isArray(value) || value instanceof Date || Buffer.isBuffer(value) || value instanceof RegExp) {
                target[key] = exports.clone(value);
              } else {
                exports.merge(target[key], value, isNullOverride, isMergeArrays);
              }
            } else {
              if (value !== null && value !== undefined) {
                // Explicit to preserve empty strings
                target[key] = value;
              } else if (isNullOverride !== false) {
                // Defaults to true
                target[key] = value;
              }
            }
          }

          return target;
        }; // Apply options to a copy of the defaults


        exports.applyToDefaults = function (defaults, options, isNullOverride) {
          exports.assert(defaults && (typeof defaults === 'undefined' ? 'undefined' : _typeof(defaults)) === 'object', 'Invalid defaults value: must be an object');
          exports.assert(!options || options === true || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object', 'Invalid options value: must be true, falsy or an object');

          if (!options) {
            // If no options, return null
            return null;
          }

          var copy = exports.clone(defaults);

          if (options === true) {
            // If options is set to true, use defaults
            return copy;
          }

          return exports.merge(copy, options, isNullOverride === true, false);
        }; // Clone an object except for the listed keys which are shallow copied


        exports.cloneWithShallow = function (source, keys) {
          if (!source || (typeof source === 'undefined' ? 'undefined' : _typeof(source)) !== 'object') {
            return source;
          }

          var storage = internals.store(source, keys); // Move shallow copy items to storage

          var copy = exports.clone(source); // Deep copy the rest

          internals.restore(copy, source, storage); // Shallow copy the stored items and restore

          return copy;
        };

        internals.store = function (source, keys) {
          var storage = {};

          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            var value = exports.reach(source, key);

            if (value !== undefined) {
              storage[key] = value;
              internals.reachSet(source, key, undefined);
            }
          }

          return storage;
        };

        internals.restore = function (copy, source, storage) {
          var keys = Object.keys(storage);

          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            internals.reachSet(copy, key, storage[key]);
            internals.reachSet(source, key, storage[key]);
          }
        };

        internals.reachSet = function (obj, key, value) {
          var path = key.split('.');
          var ref = obj;

          for (var i = 0; i < path.length; ++i) {
            var segment = path[i];

            if (i + 1 === path.length) {
              ref[segment] = value;
            }

            ref = ref[segment];
          }
        }; // Apply options to defaults except for the listed keys which are shallow copied from option without merging


        exports.applyToDefaultsWithShallow = function (defaults, options, keys) {
          exports.assert(defaults && (typeof defaults === 'undefined' ? 'undefined' : _typeof(defaults)) === 'object', 'Invalid defaults value: must be an object');
          exports.assert(!options || options === true || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object', 'Invalid options value: must be true, falsy or an object');
          exports.assert(keys && Array.isArray(keys), 'Invalid keys');

          if (!options) {
            // If no options, return null
            return null;
          }

          var copy = exports.cloneWithShallow(defaults, keys);

          if (options === true) {
            // If options is set to true, use defaults
            return copy;
          }

          var storage = internals.store(options, keys); // Move shallow copy items to storage

          exports.merge(copy, options, false, false); // Deep copy the rest

          internals.restore(copy, options, storage); // Shallow copy the stored items and restore

          return copy;
        }; // Deep object or array comparison


        exports.deepEqual = function (obj, ref, options, seen) {
          options = options || {
            prototype: true
          };
          var type = typeof obj === 'undefined' ? 'undefined' : _typeof(obj);

          if (type !== (typeof ref === 'undefined' ? 'undefined' : _typeof(ref))) {
            return false;
          }

          if (type !== 'object' || obj === null || ref === null) {
            if (obj === ref) {
              // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql
              return obj !== 0 || 1 / obj === 1 / ref; // -0 / +0
            }

            return obj !== obj && ref !== ref; // NaN
          }

          seen = seen || [];

          if (seen.indexOf(obj) !== -1) {
            return true; // If previous comparison failed, it would have stopped execution
          }

          seen.push(obj);

          if (Array.isArray(obj)) {
            if (!Array.isArray(ref)) {
              return false;
            }

            if (!options.part && obj.length !== ref.length) {
              return false;
            }

            for (var i = 0; i < obj.length; ++i) {
              if (options.part) {
                var found = false;

                for (var j = 0; j < ref.length; ++j) {
                  if (exports.deepEqual(obj[i], ref[j], options)) {
                    found = true;
                    break;
                  }
                }

                return found;
              }

              if (!exports.deepEqual(obj[i], ref[i], options)) {
                return false;
              }
            }

            return true;
          }

          if (Buffer.isBuffer(obj)) {
            if (!Buffer.isBuffer(ref)) {
              return false;
            }

            if (obj.length !== ref.length) {
              return false;
            }

            for (var _i2 = 0; _i2 < obj.length; ++_i2) {
              if (obj[_i2] !== ref[_i2]) {
                return false;
              }
            }

            return true;
          }

          if (obj instanceof Date) {
            return ref instanceof Date && obj.getTime() === ref.getTime();
          }

          if (obj instanceof RegExp) {
            return ref instanceof RegExp && obj.toString() === ref.toString();
          }

          if (options.prototype) {
            if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {
              return false;
            }
          }

          var keys = Object.getOwnPropertyNames(obj);

          if (!options.part && keys.length !== Object.getOwnPropertyNames(ref).length) {
            return false;
          }

          for (var _i3 = 0; _i3 < keys.length; ++_i3) {
            var key = keys[_i3];
            var descriptor = Object.getOwnPropertyDescriptor(obj, key);

            if (descriptor.get) {
              if (!exports.deepEqual(descriptor, Object.getOwnPropertyDescriptor(ref, key), options, seen)) {
                return false;
              }
            } else if (!exports.deepEqual(obj[key], ref[key], options, seen)) {
              return false;
            }
          }

          return true;
        }; // Remove duplicate items from array


        exports.unique = function (array, key) {
          var result = void 0;

          if (key) {
            result = [];
            var index = new Set();
            array.forEach(function (item) {
              var identifier = item[key];

              if (!index.has(identifier)) {
                index.add(identifier);
                result.push(item);
              }
            });
          } else {
            result = Array.from(new Set(array));
          }

          return result;
        }; // Convert array into object


        exports.mapToObject = function (array, key) {
          if (!array) {
            return null;
          }

          var obj = {};

          for (var i = 0; i < array.length; ++i) {
            if (key) {
              if (array[i][key]) {
                obj[array[i][key]] = true;
              }
            } else {
              obj[array[i]] = true;
            }
          }

          return obj;
        }; // Find the common unique items in two arrays


        exports.intersect = function (array1, array2, justFirst) {
          if (!array1 || !array2) {
            return [];
          }

          var common = [];
          var hash = Array.isArray(array1) ? exports.mapToObject(array1) : array1;
          var found = {};

          for (var i = 0; i < array2.length; ++i) {
            if (hash[array2[i]] && !found[array2[i]]) {
              if (justFirst) {
                return array2[i];
              }

              common.push(array2[i]);
              found[array2[i]] = true;
            }
          }

          return justFirst ? null : common;
        }; // Test if the reference contains the values


        exports.contain = function (ref, values, options) {
          /*
              string -> string(s)
              array -> item(s)
              object -> key(s)
              object -> object (key:value)
          */
          var valuePairs = null;

          if ((typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) === 'object' && (typeof values === 'undefined' ? 'undefined' : _typeof(values)) === 'object' && !Array.isArray(ref) && !Array.isArray(values)) {
            valuePairs = values;
            values = Object.keys(values);
          } else {
            values = [].concat(values);
          }

          options = options || {}; // deep, once, only, part

          exports.assert(typeof ref === 'string' || (typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) === 'object', 'Reference must be string or an object');
          exports.assert(values.length, 'Values array cannot be empty');
          var compare = void 0;
          var compareFlags = void 0;

          if (options.deep) {
            compare = exports.deepEqual;
            var hasOnly = options.hasOwnProperty('only');
            var hasPart = options.hasOwnProperty('part');
            compareFlags = {
              prototype: hasOnly ? options.only : hasPart ? !options.part : false,
              part: hasOnly ? !options.only : hasPart ? options.part : true
            };
          } else {
            compare = function compare(a, b) {
              return a === b;
            };
          }

          var misses = false;
          var matches = new Array(values.length);

          for (var i = 0; i < matches.length; ++i) {
            matches[i] = 0;
          }

          if (typeof ref === 'string') {
            var pattern = '(';

            for (var _i4 = 0; _i4 < values.length; ++_i4) {
              var value = values[_i4];
              exports.assert(typeof value === 'string', 'Cannot compare string reference to non-string value');
              pattern += (_i4 ? '|' : '') + exports.escapeRegex(value);
            }

            var regex = new RegExp(pattern + ')', 'g');
            var leftovers = ref.replace(regex, function ($0, $1) {
              var index = values.indexOf($1);
              ++matches[index];
              return ''; // Remove from string
            });
            misses = !!leftovers;
          } else if (Array.isArray(ref)) {
            for (var _i5 = 0; _i5 < ref.length; ++_i5) {
              var matched = false;

              for (var j = 0; j < values.length && matched === false; ++j) {
                matched = compare(values[j], ref[_i5], compareFlags) && j;
              }

              if (matched !== false) {
                ++matches[matched];
              } else {
                misses = true;
              }
            }
          } else {
            var keys = Object.getOwnPropertyNames(ref);

            for (var _i6 = 0; _i6 < keys.length; ++_i6) {
              var key = keys[_i6];
              var pos = values.indexOf(key);

              if (pos !== -1) {
                if (valuePairs && !compare(valuePairs[key], ref[key], compareFlags)) {
                  return false;
                }

                ++matches[pos];
              } else {
                misses = true;
              }
            }
          }

          var result = false;

          for (var _i7 = 0; _i7 < matches.length; ++_i7) {
            result = result || !!matches[_i7];

            if (options.once && matches[_i7] > 1 || !options.part && !matches[_i7]) {
              return false;
            }
          }

          if (options.only && misses) {
            return false;
          }

          return result;
        }; // Flatten array


        exports.flatten = function (array, target) {
          var result = target || [];

          for (var i = 0; i < array.length; ++i) {
            if (Array.isArray(array[i])) {
              exports.flatten(array[i], result);
            } else {
              result.push(array[i]);
            }
          }

          return result;
        }; // Convert an object key chain string ('a.b.c') to reference (object[a][b][c])


        exports.reach = function (obj, chain, options) {
          if (chain === false || chain === null || typeof chain === 'undefined') {
            return obj;
          }

          options = options || {};

          if (typeof options === 'string') {
            options = {
              separator: options
            };
          }

          var path = chain.split(options.separator || '.');
          var ref = obj;

          for (var i = 0; i < path.length; ++i) {
            var key = path[i];

            if (key[0] === '-' && Array.isArray(ref)) {
              key = key.slice(1, key.length);
              key = ref.length - key;
            }

            if (!ref || !(((typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) === 'object' || typeof ref === 'function') && key in ref) || (typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) !== 'object' && options.functions === false) {
              // Only object and function can have properties
              exports.assert(!options.strict || i + 1 === path.length, 'Missing segment', key, 'in reach path ', chain);
              exports.assert((typeof ref === 'undefined' ? 'undefined' : _typeof(ref)) === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);
              ref = options.default;
              break;
            }

            ref = ref[key];
          }

          return ref;
        };

        exports.reachTemplate = function (obj, template, options) {
          return template.replace(/{([^}]+)}/g, function ($0, chain) {
            var value = exports.reach(obj, chain, options);
            return value === undefined || value === null ? '' : value;
          });
        };

        exports.formatStack = function (stack) {
          var trace = [];

          for (var i = 0; i < stack.length; ++i) {
            var item = stack[i];
            trace.push([item.getFileName(), item.getLineNumber(), item.getColumnNumber(), item.getFunctionName(), item.isConstructor()]);
          }

          return trace;
        };

        exports.formatTrace = function (trace) {
          var display = [];

          for (var i = 0; i < trace.length; ++i) {
            var row = trace[i];
            display.push((row[4] ? 'new ' : '') + row[3] + ' (' + row[0] + ':' + row[1] + ':' + row[2] + ')');
          }

          return display;
        };

        exports.callStack = function (slice) {
          // http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi
          var v8 = Error.prepareStackTrace;

          Error.prepareStackTrace = function (_, stack) {
            return stack;
          };

          var capture = {};
          Error.captureStackTrace(capture, this);
          var stack = capture.stack;
          Error.prepareStackTrace = v8;
          var trace = exports.formatStack(stack);
          return trace.slice(1 + slice);
        };

        exports.displayStack = function (slice) {
          var trace = exports.callStack(slice === undefined ? 1 : slice + 1);
          return exports.formatTrace(trace);
        };

        exports.abortThrow = false;

        exports.abort = function (message, hideStack) {
          if ("development" === 'test' || exports.abortThrow === true) {
            throw new Error(message || 'Unknown error');
          }

          var stack = '';

          if (!hideStack) {
            stack = exports.displayStack(1).join('\n\t');
          }

          console.log('ABORT: ' + message + '\n\t' + stack);
          process.exit(1);
        };

        exports.assert = function (condition) {
          if (condition) {
            return;
          }

          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (args.length === 1 && args[0] instanceof Error) {
            throw args[0];
          }

          var msgs = args.filter(function (arg) {
            return arg !== '';
          }).map(function (arg) {
            return typeof arg === 'string' ? arg : arg instanceof Error ? arg.message : exports.stringify(arg);
          });
          throw new Assert.AssertionError({
            message: msgs.join(' ') || 'Unknown error',
            actual: false,
            expected: true,
            operator: '==',
            stackStartFunction: exports.assert
          });
        };

        exports.Bench = function () {
          this.ts = 0;
          this.reset();
        };

        exports.Bench.prototype.reset = function () {
          this.ts = exports.Bench.now();
        };

        exports.Bench.prototype.elapsed = function () {
          return exports.Bench.now() - this.ts;
        };

        exports.Bench.now = function () {
          var ts = process.hrtime();
          return ts[0] * 1e3 + ts[1] / 1e6;
        }; // Escape string for Regex construction


        exports.escapeRegex = function (string) {
          // Escape ^$.*+-?=!:|\/()[]{},
          return string.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, '\\$&');
        }; // Base64url (RFC 4648) encode


        exports.base64urlEncode = function (value, encoding) {
          exports.assert(typeof value === 'string' || Buffer.isBuffer(value), 'value must be string or buffer');
          var buf = Buffer.isBuffer(value) ? value : Buffer.from(value, encoding || 'binary');
          return buf.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
        }; // Base64url (RFC 4648) decode


        exports.base64urlDecode = function (value, encoding) {
          if (typeof value !== 'string') {
            throw new Error('Value not a string');
          }

          if (!/^[\w\-]*$/.test(value)) {
            throw new Error('Invalid character');
          }

          var buf = Buffer.from(value, 'base64');
          return encoding === 'buffer' ? buf : buf.toString(encoding || 'binary');
        }; // Escape attribute value for use in HTTP header


        exports.escapeHeaderAttribute = function (attribute) {
          // Allowed value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9, \, "
          exports.assert(/^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~\"\\]*$/.test(attribute), 'Bad attribute value (' + attribute + ')');
          return attribute.replace(/\\/g, '\\\\').replace(/\"/g, '\\"'); // Escape quotes and slash
        };

        exports.escapeHtml = function (string) {
          return Escape.escapeHtml(string);
        };

        exports.escapeJavaScript = function (string) {
          return Escape.escapeJavaScript(string);
        };

        exports.escapeJson = function (string) {
          return Escape.escapeJson(string);
        };

        exports.once = function (method) {
          if (method._hoekOnce) {
            return method;
          }

          var once = false;

          var wrapped = function wrapped() {
            if (!once) {
              once = true;

              for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }

              method.apply(null, args);
            }
          };

          wrapped._hoekOnce = true;
          return wrapped;
        };

        exports.isInteger = Number.isSafeInteger;

        exports.ignore = function () {};

        exports.inherits = Util.inherits;
        exports.format = Util.format;

        exports.transform = function (source, transform, options) {
          exports.assert(source === null || source === undefined || (typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object' || Array.isArray(source), 'Invalid source object: must be null, undefined, an object, or an array');
          var separator = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options !== null ? options.separator || '.' : '.';

          if (Array.isArray(source)) {
            var results = [];

            for (var i = 0; i < source.length; ++i) {
              results.push(exports.transform(source[i], transform, options));
            }

            return results;
          }

          var result = {};
          var keys = Object.keys(transform);

          for (var _i8 = 0; _i8 < keys.length; ++_i8) {
            var key = keys[_i8];
            var path = key.split(separator);
            var sourcePath = transform[key];
            exports.assert(typeof sourcePath === 'string', 'All mappings must be "." delineated strings');
            var segment = void 0;
            var res = result;

            while (path.length > 1) {
              segment = path.shift();

              if (!res[segment]) {
                res[segment] = {};
              }

              res = res[segment];
            }

            segment = path.shift();
            res[segment] = exports.reach(source, sourcePath, options);
          }

          return result;
        };

        exports.uniqueFilename = function (path, extension) {
          if (extension) {
            extension = extension[0] !== '.' ? '.' + extension : extension;
          } else {
            extension = '';
          }

          path = Path.resolve(path);
          var name = [Date.now(), process.pid, Crypto.randomBytes(8).toString('hex')].join('-') + extension;
          return Path.join(path, name);
        };

        exports.stringify = function () {
          try {
            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }

            return JSON.stringify.apply(null, args);
          } catch (err) {
            return '[Cannot display object: ' + err.message + ']';
          }
        };

        exports.shallow = function (source) {
          var target = {};
          var keys = Object.keys(source);

          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            target[key] = source[key];
          }

          return target;
        };

        exports.wait = function (timeout) {
          return new Promise(function (resolve) {
            return setTimeout(resolve, timeout);
          });
        };

        exports.block = function () {
          return new Promise(exports.ignore);
        };
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(3).Buffer, __webpack_require__(7));
      /***/
    },
    /* 1 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {};

      exports.create = function (key, options) {
        Hoek.assert(typeof key === 'string', 'Invalid reference key:', key);
        var settings = Hoek.clone(options); // options can be reused and modified

        var ref = function ref(value, validationOptions) {
          return Hoek.reach(ref.isContext ? validationOptions.context : value, ref.key, settings);
        };

        ref.isContext = key[0] === (settings && settings.contextPrefix || '$');
        ref.key = ref.isContext ? key.slice(1) : key;
        ref.path = ref.key.split(settings && settings.separator || '.');
        ref.depth = ref.path.length;
        ref.root = ref.path[0];
        ref.isJoi = true;

        ref.toString = function () {
          return (ref.isContext ? 'context:' : 'ref:') + ref.key;
        };

        return ref;
      };

      exports.isRef = function (ref) {
        return typeof ref === 'function' && ref.isJoi;
      };

      exports.push = function (array, ref) {
        if (exports.isRef(ref) && !ref.isContext) {
          array.push(ref.root);
        }
      };
      /***/

    },
    /* 2 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };

      var _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var Hoek = __webpack_require__(0);

      var Settings = __webpack_require__(11);

      var Ref = __webpack_require__(1);

      var Errors = __webpack_require__(6);

      var Alternatives = null; // Delay-loaded to prevent circular dependencies

      var Cast = null; // Declare internals

      var internals = {
        Set: __webpack_require__(9)
      };
      internals.defaults = {
        abortEarly: true,
        convert: true,
        allowUnknown: false,
        skipFunctions: false,
        stripUnknown: false,
        language: {},
        presence: 'optional',
        strip: false,
        noDefaults: false,
        escapeHtml: false // context: null

      };

      module.exports = internals.Any = function () {
        function _class() {
          _classCallCheck(this, _class);

          Cast = Cast || __webpack_require__(4);
          this.isJoi = true;
          this._type = 'any';
          this._settings = null;
          this._valids = new internals.Set();
          this._invalids = new internals.Set();
          this._tests = [];
          this._refs = [];
          this._flags = {
            /*
             presence: 'optional',                   // optional, required, forbidden, ignore
             allowOnly: false,
             allowUnknown: undefined,
             default: undefined,
             forbidden: false,
             encoding: undefined,
             insensitive: false,
             trim: false,
             normalize: undefined,                   // NFC, NFD, NFKC, NFKD
             case: undefined,                        // upper, lower
             empty: undefined,
             func: false,
             raw: false
             */
          };
          this._description = null;
          this._unit = null;
          this._notes = [];
          this._tags = [];
          this._examples = [];
          this._meta = [];
          this._inner = {}; // Hash of arrays of immutable objects
        }

        _class.prototype._init = function _init() {
          return this;
        };

        _class.prototype.createError = function createError(type, context, state, options) {
          var flags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this._flags;
          return Errors.create(type, context, state, options, flags);
        };

        _class.prototype.createOverrideError = function createOverrideError(type, context, state, options, message, template) {
          return Errors.create(type, context, state, options, this._flags, message, template);
        };

        _class.prototype.checkOptions = function checkOptions(options) {
          var Schemas = __webpack_require__(21);

          var result = Schemas.options.validate(options);

          if (result.error) {
            throw new Error(result.error.details[0].message);
          }
        };

        _class.prototype.clone = function clone() {
          var obj = Object.create(Object.getPrototypeOf(this));
          obj.isJoi = true;
          obj._currentJoi = this._currentJoi;
          obj._type = this._type;
          obj._settings = this._settings;
          obj._baseType = this._baseType;
          obj._valids = this._valids.slice();
          obj._invalids = this._invalids.slice();
          obj._tests = this._tests.slice();
          obj._refs = this._refs.slice();
          obj._flags = Hoek.clone(this._flags);
          obj._description = this._description;
          obj._unit = this._unit;
          obj._notes = this._notes.slice();
          obj._tags = this._tags.slice();
          obj._examples = this._examples.slice();
          obj._meta = this._meta.slice();
          obj._inner = {};
          var inners = Object.keys(this._inner);

          for (var i = 0; i < inners.length; ++i) {
            var key = inners[i];
            obj._inner[key] = this._inner[key] ? this._inner[key].slice() : null;
          }

          return obj;
        };

        _class.prototype.concat = function concat(schema) {
          Hoek.assert(schema instanceof internals.Any, 'Invalid schema object');
          Hoek.assert(this._type === 'any' || schema._type === 'any' || schema._type === this._type, 'Cannot merge type', this._type, 'with another type:', schema._type);
          var obj = this.clone();

          if (this._type === 'any' && schema._type !== 'any') {
            // Reset values as if we were "this"
            var tmpObj = schema.clone();
            var keysToRestore = ['_settings', '_valids', '_invalids', '_tests', '_refs', '_flags', '_description', '_unit', '_notes', '_tags', '_examples', '_meta', '_inner'];

            for (var i = 0; i < keysToRestore.length; ++i) {
              tmpObj[keysToRestore[i]] = obj[keysToRestore[i]];
            }

            obj = tmpObj;
          }

          obj._settings = obj._settings ? Settings.concat(obj._settings, schema._settings) : schema._settings;

          obj._valids.merge(schema._valids, schema._invalids);

          obj._invalids.merge(schema._invalids, schema._valids);

          obj._tests = obj._tests.concat(schema._tests);
          obj._refs = obj._refs.concat(schema._refs);
          Hoek.merge(obj._flags, schema._flags);
          obj._description = schema._description || obj._description;
          obj._unit = schema._unit || obj._unit;
          obj._notes = obj._notes.concat(schema._notes);
          obj._tags = obj._tags.concat(schema._tags);
          obj._examples = obj._examples.concat(schema._examples);
          obj._meta = obj._meta.concat(schema._meta);
          var inners = Object.keys(schema._inner);
          var isObject = obj._type === 'object';

          for (var _i = 0; _i < inners.length; ++_i) {
            var key = inners[_i];
            var source = schema._inner[key];

            if (source) {
              var target = obj._inner[key];

              if (target) {
                if (isObject && key === 'children') {
                  var keys = {};

                  for (var j = 0; j < target.length; ++j) {
                    keys[target[j].key] = j;
                  }

                  for (var _j = 0; _j < source.length; ++_j) {
                    var sourceKey = source[_j].key;

                    if (keys[sourceKey] >= 0) {
                      target[keys[sourceKey]] = {
                        key: sourceKey,
                        schema: target[keys[sourceKey]].schema.concat(source[_j].schema)
                      };
                    } else {
                      target.push(source[_j]);
                    }
                  }
                } else {
                  obj._inner[key] = obj._inner[key].concat(source);
                }
              } else {
                obj._inner[key] = source.slice();
              }
            }
          }

          return obj;
        };

        _class.prototype._test = function _test(name, arg, func, options) {
          var obj = this.clone();

          obj._tests.push({
            func: func,
            name: name,
            arg: arg,
            options: options
          });

          return obj;
        };

        _class.prototype.options = function options(_options) {
          Hoek.assert(!_options.context, 'Cannot override context');
          this.checkOptions(_options);
          var obj = this.clone();
          obj._settings = Settings.concat(obj._settings, _options);
          return obj;
        };

        _class.prototype.strict = function strict(isStrict) {
          var obj = this.clone();
          var convert = isStrict === undefined ? false : !isStrict;
          obj._settings = Settings.concat(obj._settings, {
            convert: convert
          });
          return obj;
        };

        _class.prototype.raw = function raw(isRaw) {
          var value = isRaw === undefined ? true : isRaw;

          if (this._flags.raw === value) {
            return this;
          }

          var obj = this.clone();
          obj._flags.raw = value;
          return obj;
        };

        _class.prototype.error = function error(err) {
          Hoek.assert(err && (err instanceof Error || typeof err === 'function'), 'Must provide a valid Error object or a function');
          var obj = this.clone();
          obj._flags.error = err;
          return obj;
        };

        _class.prototype.allow = function allow() {
          for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
            values[_key] = arguments[_key];
          }

          var obj = this.clone();
          values = Hoek.flatten(values);

          for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            Hoek.assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');

            obj._invalids.remove(value);

            obj._valids.add(value, obj._refs);
          }

          return obj;
        };

        _class.prototype.valid = function valid() {
          var obj = this.allow.apply(this, arguments);
          obj._flags.allowOnly = true;
          return obj;
        };

        _class.prototype.invalid = function invalid() {
          for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            values[_key2] = arguments[_key2];
          }

          var obj = this.clone();
          values = Hoek.flatten(values);

          for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            Hoek.assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');

            obj._valids.remove(value);

            obj._invalids.add(value, obj._refs);
          }

          return obj;
        };

        _class.prototype.required = function required() {
          if (this._flags.presence === 'required') {
            return this;
          }

          var obj = this.clone();
          obj._flags.presence = 'required';
          return obj;
        };

        _class.prototype.optional = function optional() {
          if (this._flags.presence === 'optional') {
            return this;
          }

          var obj = this.clone();
          obj._flags.presence = 'optional';
          return obj;
        };

        _class.prototype.forbidden = function forbidden() {
          if (this._flags.presence === 'forbidden') {
            return this;
          }

          var obj = this.clone();
          obj._flags.presence = 'forbidden';
          return obj;
        };

        _class.prototype.strip = function strip() {
          if (this._flags.strip) {
            return this;
          }

          var obj = this.clone();
          obj._flags.strip = true;
          return obj;
        };

        _class.prototype.applyFunctionToChildren = function applyFunctionToChildren(children, fn, args, root) {
          children = [].concat(children);

          if (children.length !== 1 || children[0] !== '') {
            root = root ? root + '.' : '';
            var extraChildren = (children[0] === '' ? children.slice(1) : children).map(function (child) {
              return root + child;
            });
            throw new Error('unknown key(s) ' + extraChildren.join(', '));
          }

          return this[fn].apply(this, args);
        };

        _class.prototype.default = function _default(value, description) {
          if (typeof value === 'function' && !Ref.isRef(value)) {
            if (!value.description && description) {
              value.description = description;
            }

            if (!this._flags.func) {
              Hoek.assert(typeof value.description === 'string' && value.description.length > 0, 'description must be provided when default value is a function');
            }
          }

          var obj = this.clone();
          obj._flags.default = value;
          Ref.push(obj._refs, value);
          return obj;
        };

        _class.prototype.empty = function empty(schema) {
          var obj = this.clone();

          if (schema === undefined) {
            delete obj._flags.empty;
          } else {
            obj._flags.empty = Cast.schema(this._currentJoi, schema);
          }

          return obj;
        };

        _class.prototype.when = function when(condition, options) {
          Hoek.assert(options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object', 'Invalid options');
          Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of "then" or "otherwise"');
          var then = options.hasOwnProperty('then') ? this.concat(Cast.schema(this._currentJoi, options.then)) : undefined;
          var otherwise = options.hasOwnProperty('otherwise') ? this.concat(Cast.schema(this._currentJoi, options.otherwise)) : undefined;
          Alternatives = Alternatives || __webpack_require__(10);
          var alternativeOptions = {
            then: then,
            otherwise: otherwise
          };

          if (Object.prototype.hasOwnProperty.call(options, 'is')) {
            alternativeOptions.is = options.is;
          }

          var obj = Alternatives.when(condition, alternativeOptions);
          obj._flags.presence = 'ignore';
          obj._baseType = this;
          return obj;
        };

        _class.prototype.description = function description(desc) {
          Hoek.assert(desc && typeof desc === 'string', 'Description must be a non-empty string');
          var obj = this.clone();
          obj._description = desc;
          return obj;
        };

        _class.prototype.notes = function notes(_notes) {
          Hoek.assert(_notes && (typeof _notes === 'string' || Array.isArray(_notes)), 'Notes must be a non-empty string or array');
          var obj = this.clone();
          obj._notes = obj._notes.concat(_notes);
          return obj;
        };

        _class.prototype.tags = function tags(_tags) {
          Hoek.assert(_tags && (typeof _tags === 'string' || Array.isArray(_tags)), 'Tags must be a non-empty string or array');
          var obj = this.clone();
          obj._tags = obj._tags.concat(_tags);
          return obj;
        };

        _class.prototype.meta = function meta(_meta) {
          Hoek.assert(_meta !== undefined, 'Meta cannot be undefined');
          var obj = this.clone();
          obj._meta = obj._meta.concat(_meta);
          return obj;
        };

        _class.prototype.example = function example() {
          Hoek.assert(arguments.length === 1, 'Missing example');
          var value = arguments.length <= 0 ? undefined : arguments[0];
          var obj = this.clone();

          obj._examples.push(value);

          return obj;
        };

        _class.prototype.unit = function unit(name) {
          Hoek.assert(name && typeof name === 'string', 'Unit name must be a non-empty string');
          var obj = this.clone();
          obj._unit = name;
          return obj;
        };

        _class.prototype._prepareEmptyValue = function _prepareEmptyValue(value) {
          if (typeof value === 'string' && this._flags.trim) {
            return value.trim();
          }

          return value;
        };

        _class.prototype._validate = function _validate(value, state, options, reference) {
          var _this = this;

          var originalValue = value; // Setup state and settings

          state = state || {
            key: '',
            path: [],
            parent: null,
            reference: reference
          };

          if (this._settings) {
            options = Settings.concat(options, this._settings);
          }

          var errors = [];

          var finish = function finish() {
            var finalValue = void 0;

            if (value !== undefined) {
              finalValue = _this._flags.raw ? originalValue : value;
            } else if (options.noDefaults) {
              finalValue = value;
            } else if (Ref.isRef(_this._flags.default)) {
              finalValue = _this._flags.default(state.parent, options);
            } else if (typeof _this._flags.default === 'function' && !(_this._flags.func && !_this._flags.default.description)) {
              var args = void 0;

              if (state.parent !== null && _this._flags.default.length > 0) {
                args = [Hoek.clone(state.parent), options];
              }

              var defaultValue = internals._try(_this._flags.default, args);

              finalValue = defaultValue.value;

              if (defaultValue.error) {
                errors.push(_this.createError('any.default', {
                  error: defaultValue.error
                }, state, options));
              }
            } else {
              finalValue = Hoek.clone(_this._flags.default);
            }

            if (errors.length && typeof _this._flags.error === 'function') {
              var change = _this._flags.error.call(_this, errors);

              if (typeof change === 'string') {
                errors = [_this.createOverrideError('override', {
                  reason: errors
                }, state, options, change)];
              } else {
                errors = [].concat(change).map(function (err) {
                  return err instanceof Error ? err : _this.createOverrideError(err.type || 'override', err.context, state, options, err.message, err.template);
                });
              }
            }

            return {
              value: _this._flags.strip ? undefined : finalValue,
              finalValue: finalValue,
              errors: errors.length ? errors : null
            };
          };

          if (this._coerce) {
            var coerced = this._coerce.call(this, value, state, options);

            if (coerced.errors) {
              value = coerced.value;
              errors = errors.concat(coerced.errors);
              return finish(); // Coerced error always aborts early
            }

            value = coerced.value;
          }

          if (this._flags.empty && !this._flags.empty._validate(this._prepareEmptyValue(value), null, internals.defaults).errors) {
            value = undefined;
          } // Check presence requirements


          var presence = this._flags.presence || options.presence;

          if (presence === 'optional') {
            if (value === undefined) {
              var isDeepDefault = this._flags.hasOwnProperty('default') && this._flags.default === undefined;

              if (isDeepDefault && this._type === 'object') {
                value = {};
              } else {
                return finish();
              }
            }
          } else if (presence === 'required' && value === undefined) {
            errors.push(this.createError('any.required', null, state, options));
            return finish();
          } else if (presence === 'forbidden') {
            if (value === undefined) {
              return finish();
            }

            errors.push(this.createError('any.unknown', null, state, options));
            return finish();
          } // Check allowed and denied values using the original value


          if (this._valids.has(value, state, options, this._flags.insensitive)) {
            return finish();
          }

          if (this._invalids.has(value, state, options, this._flags.insensitive)) {
            errors.push(this.createError(value === '' ? 'any.empty' : 'any.invalid', {
              value: value,
              invalids: this._invalids.values({
                stripUndefined: true
              })
            }, state, options));

            if (options.abortEarly || value === undefined) {
              // No reason to keep validating missing value
              return finish();
            }
          } // Convert value and validate type


          if (this._base) {
            var base = this._base.call(this, value, state, options);

            if (base.errors) {
              value = base.value;
              errors = errors.concat(base.errors);
              return finish(); // Base error always aborts early
            }

            if (base.value !== value) {
              value = base.value; // Check allowed and denied values using the converted value

              if (this._valids.has(value, state, options, this._flags.insensitive)) {
                return finish();
              }

              if (this._invalids.has(value, state, options, this._flags.insensitive)) {
                errors.push(this.createError(value === '' ? 'any.empty' : 'any.invalid', {
                  value: value,
                  invalids: this._invalids.values({
                    stripUndefined: true
                  })
                }, state, options));

                if (options.abortEarly) {
                  return finish();
                }
              }
            }
          } // Required values did not match


          if (this._flags.allowOnly) {
            errors.push(this.createError('any.allowOnly', {
              value: value,
              valids: this._valids.values({
                stripUndefined: true
              })
            }, state, options));

            if (options.abortEarly) {
              return finish();
            }
          } // Validate tests


          for (var i = 0; i < this._tests.length; ++i) {
            var test = this._tests[i];
            var ret = test.func.call(this, value, state, options);

            if (ret instanceof Errors.Err) {
              errors.push(ret);

              if (options.abortEarly) {
                return finish();
              }
            } else {
              value = ret;
            }
          }

          return finish();
        };

        _class.prototype._validateWithOptions = function _validateWithOptions(value, options, callback) {
          if (options) {
            this.checkOptions(options);
          }

          var settings = Settings.concat(internals.defaults, options);

          var result = this._validate(value, null, settings);

          var errors = Errors.process(result.errors, value);

          if (callback) {
            return callback(errors, result.value);
          }

          return {
            error: errors,
            value: result.value,
            then: function then(resolve, reject) {
              if (errors) {
                return Promise.reject(errors).catch(reject);
              }

              return Promise.resolve(result.value).then(resolve);
            },
            catch: function _catch(reject) {
              if (errors) {
                return Promise.reject(errors).catch(reject);
              }

              return Promise.resolve(result.value);
            }
          };
        };

        _class.prototype.validate = function validate(value, options, callback) {
          if (typeof options === 'function') {
            return this._validateWithOptions(value, null, options);
          }

          return this._validateWithOptions(value, options, callback);
        };

        _class.prototype.describe = function describe() {
          var _this2 = this;

          var description = {
            type: this._type
          };
          var flags = Object.keys(this._flags);

          if (flags.length) {
            if (['empty', 'default', 'lazy', 'label'].some(function (flag) {
              return _this2._flags.hasOwnProperty(flag);
            })) {
              description.flags = {};

              for (var i = 0; i < flags.length; ++i) {
                var flag = flags[i];

                if (flag === 'empty') {
                  description.flags[flag] = this._flags[flag].describe();
                } else if (flag === 'default') {
                  if (Ref.isRef(this._flags[flag])) {
                    description.flags[flag] = this._flags[flag].toString();
                  } else if (typeof this._flags[flag] === 'function') {
                    description.flags[flag] = {
                      description: this._flags[flag].description,
                      function: this._flags[flag]
                    };
                  } else {
                    description.flags[flag] = this._flags[flag];
                  }
                } else if (flag === 'lazy' || flag === 'label') {// We don't want it in the description
                } else {
                  description.flags[flag] = this._flags[flag];
                }
              }
            } else {
              description.flags = this._flags;
            }
          }

          if (this._settings) {
            description.options = Hoek.clone(this._settings);
          }

          if (this._baseType) {
            description.base = this._baseType.describe();
          }

          if (this._description) {
            description.description = this._description;
          }

          if (this._notes.length) {
            description.notes = this._notes;
          }

          if (this._tags.length) {
            description.tags = this._tags;
          }

          if (this._meta.length) {
            description.meta = this._meta;
          }

          if (this._examples.length) {
            description.examples = this._examples;
          }

          if (this._unit) {
            description.unit = this._unit;
          }

          var valids = this._valids.values();

          if (valids.length) {
            description.valids = valids.map(function (v) {
              return Ref.isRef(v) ? v.toString() : v;
            });
          }

          var invalids = this._invalids.values();

          if (invalids.length) {
            description.invalids = invalids.map(function (v) {
              return Ref.isRef(v) ? v.toString() : v;
            });
          }

          description.rules = [];

          for (var _i2 = 0; _i2 < this._tests.length; ++_i2) {
            var validator = this._tests[_i2];
            var item = {
              name: validator.name
            };

            if (validator.arg !== void 0) {
              item.arg = Ref.isRef(validator.arg) ? validator.arg.toString() : validator.arg;
            }

            var options = validator.options;

            if (options) {
              if (options.hasRef) {
                item.arg = {};
                var keys = Object.keys(validator.arg);

                for (var j = 0; j < keys.length; ++j) {
                  var key = keys[j];
                  var value = validator.arg[key];
                  item.arg[key] = Ref.isRef(value) ? value.toString() : value;
                }
              }

              if (typeof options.description === 'string') {
                item.description = options.description;
              } else if (typeof options.description === 'function') {
                item.description = options.description(item.arg);
              }
            }

            description.rules.push(item);
          }

          if (!description.rules.length) {
            delete description.rules;
          }

          var label = this._getLabel();

          if (label) {
            description.label = label;
          }

          return description;
        };

        _class.prototype.label = function label(name) {
          Hoek.assert(name && typeof name === 'string', 'Label name must be a non-empty string');
          var obj = this.clone();
          obj._flags.label = name;
          return obj;
        };

        _class.prototype._getLabel = function _getLabel(def) {
          return this._flags.label || def;
        };

        _createClass(_class, [{
          key: 'schemaType',
          get: function get() {
            return this._type;
          }
        }]);

        return _class;
      }();

      internals.Any.prototype.isImmutable = true; // Prevents Hoek from deep cloning schema objects
      // Aliases

      internals.Any.prototype.only = internals.Any.prototype.equal = internals.Any.prototype.valid;
      internals.Any.prototype.disallow = internals.Any.prototype.not = internals.Any.prototype.invalid;
      internals.Any.prototype.exist = internals.Any.prototype.required;

      internals._try = function (fn, args) {
        var err = void 0;
        var result = void 0;

        try {
          result = fn.apply(null, args);
        } catch (e) {
          err = e;
        }

        return {
          value: result,
          error: err
        };
      };
      /***/

    },
    /* 3 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global) {
        /*!
        * The buffer module from node.js, for the browser.
        *
        * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
        * @license  MIT
        */

        /* eslint-disable no-proto */
        var base64 = __webpack_require__(33);

        var ieee754 = __webpack_require__(34);

        var isArray = __webpack_require__(35);

        exports.Buffer = Buffer;
        exports.SlowBuffer = SlowBuffer;
        exports.INSPECT_MAX_BYTES = 50;
        /**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Use Object implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * Due to various browser bugs, sometimes the Object implementation will be used even
         * when the browser supports typed arrays.
         *
         * Note:
         *
         *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
         *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
         *
         *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
         *
         *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
         *     incorrect length in some situations.
        
         * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
         * get the Object implementation, which is slower but behaves correctly.
         */

        Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
        /*
         * Export kMaxLength after typed array support is determined.
         */

        exports.kMaxLength = kMaxLength();

        function typedArraySupport() {
          try {
            var arr = new Uint8Array(1);
            arr.__proto__ = {
              __proto__: Uint8Array.prototype,
              foo: function () {
                return 42;
              }
            };
            return arr.foo() === 42 && // typed array instances can be augmented
            typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
            arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
          } catch (e) {
            return false;
          }
        }

        function kMaxLength() {
          return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
        }

        function createBuffer(that, length) {
          if (kMaxLength() < length) {
            throw new RangeError('Invalid typed array length');
          }

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            // Return an augmented `Uint8Array` instance, for best performance
            that = new Uint8Array(length);
            that.__proto__ = Buffer.prototype;
          } else {
            // Fallback: Return an object instance of the Buffer class
            if (that === null) {
              that = new Buffer(length);
            }

            that.length = length;
          }

          return that;
        }
        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */


        function Buffer(arg, encodingOrOffset, length) {
          if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
            return new Buffer(arg, encodingOrOffset, length);
          } // Common case.


          if (typeof arg === 'number') {
            if (typeof encodingOrOffset === 'string') {
              throw new Error('If encoding is specified then the first argument must be a string');
            }

            return allocUnsafe(this, arg);
          }

          return from(this, arg, encodingOrOffset, length);
        }

        Buffer.poolSize = 8192; // not used by this implementation
        // TODO: Legacy, not needed anymore. Remove in next major version.

        Buffer._augment = function (arr) {
          arr.__proto__ = Buffer.prototype;
          return arr;
        };

        function from(that, value, encodingOrOffset, length) {
          if (typeof value === 'number') {
            throw new TypeError('"value" argument must not be a number');
          }

          if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
            return fromArrayBuffer(that, value, encodingOrOffset, length);
          }

          if (typeof value === 'string') {
            return fromString(that, value, encodingOrOffset);
          }

          return fromObject(that, value);
        }
        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/


        Buffer.from = function (value, encodingOrOffset, length) {
          return from(null, value, encodingOrOffset, length);
        };

        if (Buffer.TYPED_ARRAY_SUPPORT) {
          Buffer.prototype.__proto__ = Uint8Array.prototype;
          Buffer.__proto__ = Uint8Array;

          if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
            // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
            Object.defineProperty(Buffer, Symbol.species, {
              value: null,
              configurable: true
            });
          }
        }

        function assertSize(size) {
          if (typeof size !== 'number') {
            throw new TypeError('"size" argument must be a number');
          } else if (size < 0) {
            throw new RangeError('"size" argument must not be negative');
          }
        }

        function alloc(that, size, fill, encoding) {
          assertSize(size);

          if (size <= 0) {
            return createBuffer(that, size);
          }

          if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpretted as a start offset.
            return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
          }

          return createBuffer(that, size);
        }
        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/


        Buffer.alloc = function (size, fill, encoding) {
          return alloc(null, size, fill, encoding);
        };

        function allocUnsafe(that, size) {
          assertSize(size);
          that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

          if (!Buffer.TYPED_ARRAY_SUPPORT) {
            for (var i = 0; i < size; ++i) {
              that[i] = 0;
            }
          }

          return that;
        }
        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */


        Buffer.allocUnsafe = function (size) {
          return allocUnsafe(null, size);
        };
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */


        Buffer.allocUnsafeSlow = function (size) {
          return allocUnsafe(null, size);
        };

        function fromString(that, string, encoding) {
          if (typeof encoding !== 'string' || encoding === '') {
            encoding = 'utf8';
          }

          if (!Buffer.isEncoding(encoding)) {
            throw new TypeError('"encoding" must be a valid string encoding');
          }

          var length = byteLength(string, encoding) | 0;
          that = createBuffer(that, length);
          var actual = that.write(string, encoding);

          if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            that = that.slice(0, actual);
          }

          return that;
        }

        function fromArrayLike(that, array) {
          var length = array.length < 0 ? 0 : checked(array.length) | 0;
          that = createBuffer(that, length);

          for (var i = 0; i < length; i += 1) {
            that[i] = array[i] & 255;
          }

          return that;
        }

        function fromArrayBuffer(that, array, byteOffset, length) {
          array.byteLength; // this throws if `array` is not a valid ArrayBuffer

          if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError('\'offset\' is out of bounds');
          }

          if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError('\'length\' is out of bounds');
          }

          if (byteOffset === undefined && length === undefined) {
            array = new Uint8Array(array);
          } else if (length === undefined) {
            array = new Uint8Array(array, byteOffset);
          } else {
            array = new Uint8Array(array, byteOffset, length);
          }

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            // Return an augmented `Uint8Array` instance, for best performance
            that = array;
            that.__proto__ = Buffer.prototype;
          } else {
            // Fallback: Return an object instance of the Buffer class
            that = fromArrayLike(that, array);
          }

          return that;
        }

        function fromObject(that, obj) {
          if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0;
            that = createBuffer(that, len);

            if (that.length === 0) {
              return that;
            }

            obj.copy(that, 0, 0, len);
            return that;
          }

          if (obj) {
            if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
              if (typeof obj.length !== 'number' || isnan(obj.length)) {
                return createBuffer(that, 0);
              }

              return fromArrayLike(that, obj);
            }

            if (obj.type === 'Buffer' && isArray(obj.data)) {
              return fromArrayLike(that, obj.data);
            }
          }

          throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
        }

        function checked(length) {
          // Note: cannot use `length < kMaxLength()` here because that fails when
          // length is NaN (which is otherwise coerced to zero.)
          if (length >= kMaxLength()) {
            throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
          }

          return length | 0;
        }

        function SlowBuffer(length) {
          if (+length != length) {
            // eslint-disable-line eqeqeq
            length = 0;
          }

          return Buffer.alloc(+length);
        }

        Buffer.isBuffer = function isBuffer(b) {
          return !!(b != null && b._isBuffer);
        };

        Buffer.compare = function compare(a, b) {
          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError('Arguments must be Buffers');
          }

          if (a === b) return 0;
          var x = a.length;
          var y = b.length;

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i];
              y = b[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        };

        Buffer.isEncoding = function isEncoding(encoding) {
          switch (String(encoding).toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'latin1':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return true;

            default:
              return false;
          }
        };

        Buffer.concat = function concat(list, length) {
          if (!isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }

          if (list.length === 0) {
            return Buffer.alloc(0);
          }

          var i;

          if (length === undefined) {
            length = 0;

            for (i = 0; i < list.length; ++i) {
              length += list[i].length;
            }
          }

          var buffer = Buffer.allocUnsafe(length);
          var pos = 0;

          for (i = 0; i < list.length; ++i) {
            var buf = list[i];

            if (!Buffer.isBuffer(buf)) {
              throw new TypeError('"list" argument must be an Array of Buffers');
            }

            buf.copy(buffer, pos);
            pos += buf.length;
          }

          return buffer;
        };

        function byteLength(string, encoding) {
          if (Buffer.isBuffer(string)) {
            return string.length;
          }

          if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
            return string.byteLength;
          }

          if (typeof string !== 'string') {
            string = '' + string;
          }

          var len = string.length;
          if (len === 0) return 0; // Use a for loop to avoid recursion

          var loweredCase = false;

          for (;;) {
            switch (encoding) {
              case 'ascii':
              case 'latin1':
              case 'binary':
                return len;

              case 'utf8':
              case 'utf-8':
              case undefined:
                return utf8ToBytes(string).length;

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return len * 2;

              case 'hex':
                return len >>> 1;

              case 'base64':
                return base64ToBytes(string).length;

              default:
                if (loweredCase) return utf8ToBytes(string).length; // assume utf8

                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        }

        Buffer.byteLength = byteLength;

        function slowToString(encoding, start, end) {
          var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
          // property of a typed array.
          // This behaves neither like String nor Uint8Array in that we set start/end
          // to their upper/lower bounds if the value passed is out of range.
          // undefined is handled specially as per ECMA-262 6th Edition,
          // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

          if (start === undefined || start < 0) {
            start = 0;
          } // Return early if start > this.length. Done here to prevent potential uint32
          // coercion fail below.


          if (start > this.length) {
            return '';
          }

          if (end === undefined || end > this.length) {
            end = this.length;
          }

          if (end <= 0) {
            return '';
          } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


          end >>>= 0;
          start >>>= 0;

          if (end <= start) {
            return '';
          }

          if (!encoding) encoding = 'utf8';

          while (true) {
            switch (encoding) {
              case 'hex':
                return hexSlice(this, start, end);

              case 'utf8':
              case 'utf-8':
                return utf8Slice(this, start, end);

              case 'ascii':
                return asciiSlice(this, start, end);

              case 'latin1':
              case 'binary':
                return latin1Slice(this, start, end);

              case 'base64':
                return base64Slice(this, start, end);

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return utf16leSlice(this, start, end);

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = (encoding + '').toLowerCase();
                loweredCase = true;
            }
          }
        } // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
        // Buffer instances.


        Buffer.prototype._isBuffer = true;

        function swap(b, n, m) {
          var i = b[n];
          b[n] = b[m];
          b[m] = i;
        }

        Buffer.prototype.swap16 = function swap16() {
          var len = this.length;

          if (len % 2 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 16-bits');
          }

          for (var i = 0; i < len; i += 2) {
            swap(this, i, i + 1);
          }

          return this;
        };

        Buffer.prototype.swap32 = function swap32() {
          var len = this.length;

          if (len % 4 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 32-bits');
          }

          for (var i = 0; i < len; i += 4) {
            swap(this, i, i + 3);
            swap(this, i + 1, i + 2);
          }

          return this;
        };

        Buffer.prototype.swap64 = function swap64() {
          var len = this.length;

          if (len % 8 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 64-bits');
          }

          for (var i = 0; i < len; i += 8) {
            swap(this, i, i + 7);
            swap(this, i + 1, i + 6);
            swap(this, i + 2, i + 5);
            swap(this, i + 3, i + 4);
          }

          return this;
        };

        Buffer.prototype.toString = function toString() {
          var length = this.length | 0;
          if (length === 0) return '';
          if (arguments.length === 0) return utf8Slice(this, 0, length);
          return slowToString.apply(this, arguments);
        };

        Buffer.prototype.equals = function equals(b) {
          if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
          if (this === b) return true;
          return Buffer.compare(this, b) === 0;
        };

        Buffer.prototype.inspect = function inspect() {
          var str = '';
          var max = exports.INSPECT_MAX_BYTES;

          if (this.length > 0) {
            str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
            if (this.length > max) str += ' ... ';
          }

          return '<Buffer ' + str + '>';
        };

        Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
          if (!Buffer.isBuffer(target)) {
            throw new TypeError('Argument must be a Buffer');
          }

          if (start === undefined) {
            start = 0;
          }

          if (end === undefined) {
            end = target ? target.length : 0;
          }

          if (thisStart === undefined) {
            thisStart = 0;
          }

          if (thisEnd === undefined) {
            thisEnd = this.length;
          }

          if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
            throw new RangeError('out of range index');
          }

          if (thisStart >= thisEnd && start >= end) {
            return 0;
          }

          if (thisStart >= thisEnd) {
            return -1;
          }

          if (start >= end) {
            return 1;
          }

          start >>>= 0;
          end >>>= 0;
          thisStart >>>= 0;
          thisEnd >>>= 0;
          if (this === target) return 0;
          var x = thisEnd - thisStart;
          var y = end - start;
          var len = Math.min(x, y);
          var thisCopy = this.slice(thisStart, thisEnd);
          var targetCopy = target.slice(start, end);

          for (var i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
              x = thisCopy[i];
              y = targetCopy[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf


        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
          // Empty buffer means no match
          if (buffer.length === 0) return -1; // Normalize byteOffset

          if (typeof byteOffset === 'string') {
            encoding = byteOffset;
            byteOffset = 0;
          } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff;
          } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000;
          }

          byteOffset = +byteOffset; // Coerce to Number.

          if (isNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : buffer.length - 1;
          } // Normalize byteOffset: negative offsets start from the end of the buffer


          if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

          if (byteOffset >= buffer.length) {
            if (dir) return -1;else byteOffset = buffer.length - 1;
          } else if (byteOffset < 0) {
            if (dir) byteOffset = 0;else return -1;
          } // Normalize val


          if (typeof val === 'string') {
            val = Buffer.from(val, encoding);
          } // Finally, search either indexOf (if dir is true) or lastIndexOf


          if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
              return -1;
            }

            return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
          } else if (typeof val === 'number') {
            val = val & 0xFF; // Search for a byte value [0-255]

            if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
              if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
              } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
              }
            }

            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
          }

          throw new TypeError('val must be string, number or Buffer');
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
          var indexSize = 1;
          var arrLength = arr.length;
          var valLength = val.length;

          if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase();

            if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
              if (arr.length < 2 || val.length < 2) {
                return -1;
              }

              indexSize = 2;
              arrLength /= 2;
              valLength /= 2;
              byteOffset /= 2;
            }
          }

          function read(buf, i) {
            if (indexSize === 1) {
              return buf[i];
            } else {
              return buf.readUInt16BE(i * indexSize);
            }
          }

          var i;

          if (dir) {
            var foundIndex = -1;

            for (i = byteOffset; i < arrLength; i++) {
              if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                if (foundIndex === -1) foundIndex = i;
                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
              } else {
                if (foundIndex !== -1) i -= i - foundIndex;
                foundIndex = -1;
              }
            }
          } else {
            if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

            for (i = byteOffset; i >= 0; i--) {
              var found = true;

              for (var j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                  found = false;
                  break;
                }
              }

              if (found) return i;
            }
          }

          return -1;
        }

        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
          return this.indexOf(val, byteOffset, encoding) !== -1;
        };

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
        };

        Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
        };

        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0;
          var remaining = buf.length - offset;

          if (!length) {
            length = remaining;
          } else {
            length = Number(length);

            if (length > remaining) {
              length = remaining;
            }
          } // must be an even number of digits


          var strLen = string.length;
          if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

          if (length > strLen / 2) {
            length = strLen / 2;
          }

          for (var i = 0; i < length; ++i) {
            var parsed = parseInt(string.substr(i * 2, 2), 16);
            if (isNaN(parsed)) return i;
            buf[offset + i] = parsed;
          }

          return i;
        }

        function utf8Write(buf, string, offset, length) {
          return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
        }

        function asciiWrite(buf, string, offset, length) {
          return blitBuffer(asciiToBytes(string), buf, offset, length);
        }

        function latin1Write(buf, string, offset, length) {
          return asciiWrite(buf, string, offset, length);
        }

        function base64Write(buf, string, offset, length) {
          return blitBuffer(base64ToBytes(string), buf, offset, length);
        }

        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
        }

        Buffer.prototype.write = function write(string, offset, length, encoding) {
          // Buffer#write(string)
          if (offset === undefined) {
            encoding = 'utf8';
            length = this.length;
            offset = 0; // Buffer#write(string, encoding)
          } else if (length === undefined && typeof offset === 'string') {
            encoding = offset;
            length = this.length;
            offset = 0; // Buffer#write(string, offset[, length][, encoding])
          } else if (isFinite(offset)) {
            offset = offset | 0;

            if (isFinite(length)) {
              length = length | 0;
              if (encoding === undefined) encoding = 'utf8';
            } else {
              encoding = length;
              length = undefined;
            } // legacy write(string, encoding, offset, length) - remove in v0.13

          } else {
            throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
          }

          var remaining = this.length - offset;
          if (length === undefined || length > remaining) length = remaining;

          if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
            throw new RangeError('Attempt to write outside buffer bounds');
          }

          if (!encoding) encoding = 'utf8';
          var loweredCase = false;

          for (;;) {
            switch (encoding) {
              case 'hex':
                return hexWrite(this, string, offset, length);

              case 'utf8':
              case 'utf-8':
                return utf8Write(this, string, offset, length);

              case 'ascii':
                return asciiWrite(this, string, offset, length);

              case 'latin1':
              case 'binary':
                return latin1Write(this, string, offset, length);

              case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return ucs2Write(this, string, offset, length);

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        };

        Buffer.prototype.toJSON = function toJSON() {
          return {
            type: 'Buffer',
            data: Array.prototype.slice.call(this._arr || this, 0)
          };
        };

        function base64Slice(buf, start, end) {
          if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf);
          } else {
            return base64.fromByteArray(buf.slice(start, end));
          }
        }

        function utf8Slice(buf, start, end) {
          end = Math.min(buf.length, end);
          var res = [];
          var i = start;

          while (i < end) {
            var firstByte = buf[i];
            var codePoint = null;
            var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint;

              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte;
                  }

                  break;

                case 2:
                  secondByte = buf[i + 1];

                  if ((secondByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                    if (tempCodePoint > 0x7F) {
                      codePoint = tempCodePoint;
                    }
                  }

                  break;

                case 3:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];

                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                      codePoint = tempCodePoint;
                    }
                  }

                  break;

                case 4:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  fourthByte = buf[i + 3];

                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint;
                    }
                  }

              }
            }

            if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xFFFD;
              bytesPerSequence = 1;
            } else if (codePoint > 0xFFFF) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000;
              res.push(codePoint >>> 10 & 0x3FF | 0xD800);
              codePoint = 0xDC00 | codePoint & 0x3FF;
            }

            res.push(codePoint);
            i += bytesPerSequence;
          }

          return decodeCodePointsArray(res);
        } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety


        var MAX_ARGUMENTS_LENGTH = 0x1000;

        function decodeCodePointsArray(codePoints) {
          var len = codePoints.length;

          if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
          } // Decode in chunks to avoid "call stack size exceeded".


          var res = '';
          var i = 0;

          while (i < len) {
            res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
          }

          return res;
        }

        function asciiSlice(buf, start, end) {
          var ret = '';
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7F);
          }

          return ret;
        }

        function latin1Slice(buf, start, end) {
          var ret = '';
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i]);
          }

          return ret;
        }

        function hexSlice(buf, start, end) {
          var len = buf.length;
          if (!start || start < 0) start = 0;
          if (!end || end < 0 || end > len) end = len;
          var out = '';

          for (var i = start; i < end; ++i) {
            out += toHex(buf[i]);
          }

          return out;
        }

        function utf16leSlice(buf, start, end) {
          var bytes = buf.slice(start, end);
          var res = '';

          for (var i = 0; i < bytes.length; i += 2) {
            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
          }

          return res;
        }

        Buffer.prototype.slice = function slice(start, end) {
          var len = this.length;
          start = ~~start;
          end = end === undefined ? len : ~~end;

          if (start < 0) {
            start += len;
            if (start < 0) start = 0;
          } else if (start > len) {
            start = len;
          }

          if (end < 0) {
            end += len;
            if (end < 0) end = 0;
          } else if (end > len) {
            end = len;
          }

          if (end < start) end = start;
          var newBuf;

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            newBuf = this.subarray(start, end);
            newBuf.__proto__ = Buffer.prototype;
          } else {
            var sliceLen = end - start;
            newBuf = new Buffer(sliceLen, undefined);

            for (var i = 0; i < sliceLen; ++i) {
              newBuf[i] = this[i + start];
            }
          }

          return newBuf;
        };
        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */


        function checkOffset(offset, ext, length) {
          if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
          if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
        }

        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var val = this[offset];
          var mul = 1;
          var i = 0;

          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          return val;
        };

        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;

          if (!noAssert) {
            checkOffset(offset, byteLength, this.length);
          }

          var val = this[offset + --byteLength];
          var mul = 1;

          while (byteLength > 0 && (mul *= 0x100)) {
            val += this[offset + --byteLength] * mul;
          }

          return val;
        };

        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 1, this.length);
          return this[offset];
        };

        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] | this[offset + 1] << 8;
        };

        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] << 8 | this[offset + 1];
        };

        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
        };

        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
        };

        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var val = this[offset];
          var mul = 1;
          var i = 0;

          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          mul *= 0x80;
          if (val >= mul) val -= Math.pow(2, 8 * byteLength);
          return val;
        };

        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var i = byteLength;
          var mul = 1;
          var val = this[offset + --i];

          while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul;
          }

          mul *= 0x80;
          if (val >= mul) val -= Math.pow(2, 8 * byteLength);
          return val;
        };

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 1, this.length);
          if (!(this[offset] & 0x80)) return this[offset];
          return (0xff - this[offset] + 1) * -1;
        };

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset] | this[offset + 1] << 8;
          return val & 0x8000 ? val | 0xFFFF0000 : val;
        };

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset + 1] | this[offset] << 8;
          return val & 0x8000 ? val | 0xFFFF0000 : val;
        };

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
        };

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
        };

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, true, 23, 4);
        };

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, false, 23, 4);
        };

        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, true, 52, 8);
        };

        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, false, 52, 8);
        };

        function checkInt(buf, value, offset, ext, max, min) {
          if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
          if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
          if (offset + ext > buf.length) throw new RangeError('Index out of range');
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset | 0;
          byteLength = byteLength | 0;

          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var mul = 1;
          var i = 0;
          this[offset] = value & 0xFF;

          while (++i < byteLength && (mul *= 0x100)) {
            this[offset + i] = value / mul & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset | 0;
          byteLength = byteLength | 0;

          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var i = byteLength - 1;
          var mul = 1;
          this[offset + i] = value & 0xFF;

          while (--i >= 0 && (mul *= 0x100)) {
            this[offset + i] = value / mul & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
          this[offset] = value & 0xff;
          return offset + 1;
        };

        function objectWriteUInt16(buf, value, offset, littleEndian) {
          if (value < 0) value = 0xffff + value + 1;

          for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
            buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
          }
        }

        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
          } else {
            objectWriteUInt16(this, value, offset, true);
          }

          return offset + 2;
        };

        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
          } else {
            objectWriteUInt16(this, value, offset, false);
          }

          return offset + 2;
        };

        function objectWriteUInt32(buf, value, offset, littleEndian) {
          if (value < 0) value = 0xffffffff + value + 1;

          for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
            buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
          }
        }

        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset + 3] = value >>> 24;
            this[offset + 2] = value >>> 16;
            this[offset + 1] = value >>> 8;
            this[offset] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, true);
          }

          return offset + 4;
        };

        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, false);
          }

          return offset + 4;
        };

        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset | 0;

          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = 0;
          var mul = 1;
          var sub = 0;
          this[offset] = value & 0xFF;

          while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
              sub = 1;
            }

            this[offset + i] = (value / mul >> 0) - sub & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset | 0;

          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = byteLength - 1;
          var mul = 1;
          var sub = 0;
          this[offset + i] = value & 0xFF;

          while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
              sub = 1;
            }

            this[offset + i] = (value / mul >> 0) - sub & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
          if (value < 0) value = 0xff + value + 1;
          this[offset] = value & 0xff;
          return offset + 1;
        };

        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
          } else {
            objectWriteUInt16(this, value, offset, true);
          }

          return offset + 2;
        };

        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
          } else {
            objectWriteUInt16(this, value, offset, false);
          }

          return offset + 2;
        };

        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
            this[offset + 2] = value >>> 16;
            this[offset + 3] = value >>> 24;
          } else {
            objectWriteUInt32(this, value, offset, true);
          }

          return offset + 4;
        };

        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset | 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          if (value < 0) value = 0xffffffff + value + 1;

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
          } else {
            objectWriteUInt32(this, value, offset, false);
          }

          return offset + 4;
        };

        function checkIEEE754(buf, value, offset, ext, max, min) {
          if (offset + ext > buf.length) throw new RangeError('Index out of range');
          if (offset < 0) throw new RangeError('Index out of range');
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
          if (!noAssert) {
            checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
          }

          ieee754.write(buf, value, offset, littleEndian, 23, 4);
          return offset + 4;
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
          return writeFloat(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
          return writeFloat(this, value, offset, false, noAssert);
        };

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
          if (!noAssert) {
            checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
          }

          ieee754.write(buf, value, offset, littleEndian, 52, 8);
          return offset + 8;
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
          return writeDouble(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
          return writeDouble(this, value, offset, false, noAssert);
        }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
          if (!start) start = 0;
          if (!end && end !== 0) end = this.length;
          if (targetStart >= target.length) targetStart = target.length;
          if (!targetStart) targetStart = 0;
          if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

          if (end === start) return 0;
          if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

          if (targetStart < 0) {
            throw new RangeError('targetStart out of bounds');
          }

          if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
          if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

          if (end > this.length) end = this.length;

          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start;
          }

          var len = end - start;
          var i;

          if (this === target && start < targetStart && targetStart < end) {
            // descending copy from end
            for (i = len - 1; i >= 0; --i) {
              target[i + targetStart] = this[i + start];
            }
          } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
            // ascending copy from start
            for (i = 0; i < len; ++i) {
              target[i + targetStart] = this[i + start];
            }
          } else {
            Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
          }

          return len;
        }; // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])


        Buffer.prototype.fill = function fill(val, start, end, encoding) {
          // Handle string cases:
          if (typeof val === 'string') {
            if (typeof start === 'string') {
              encoding = start;
              start = 0;
              end = this.length;
            } else if (typeof end === 'string') {
              encoding = end;
              end = this.length;
            }

            if (val.length === 1) {
              var code = val.charCodeAt(0);

              if (code < 256) {
                val = code;
              }
            }

            if (encoding !== undefined && typeof encoding !== 'string') {
              throw new TypeError('encoding must be a string');
            }

            if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
              throw new TypeError('Unknown encoding: ' + encoding);
            }
          } else if (typeof val === 'number') {
            val = val & 255;
          } // Invalid ranges are not set to a default, so can range check early.


          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError('Out of range index');
          }

          if (end <= start) {
            return this;
          }

          start = start >>> 0;
          end = end === undefined ? this.length : end >>> 0;
          if (!val) val = 0;
          var i;

          if (typeof val === 'number') {
            for (i = start; i < end; ++i) {
              this[i] = val;
            }
          } else {
            var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
            var len = bytes.length;

            for (i = 0; i < end - start; ++i) {
              this[i + start] = bytes[i % len];
            }
          }

          return this;
        }; // HELPER FUNCTIONS
        // ================


        var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

        function base64clean(str) {
          // Node strips out invalid characters like \n and \t from the string, base64-js does not
          str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

          if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

          while (str.length % 4 !== 0) {
            str = str + '=';
          }

          return str;
        }

        function stringtrim(str) {
          if (str.trim) return str.trim();
          return str.replace(/^\s+|\s+$/g, '');
        }

        function toHex(n) {
          if (n < 16) return '0' + n.toString(16);
          return n.toString(16);
        }

        function utf8ToBytes(string, units) {
          units = units || Infinity;
          var codePoint;
          var length = string.length;
          var leadSurrogate = null;
          var bytes = [];

          for (var i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i); // is surrogate component

            if (codePoint > 0xD7FF && codePoint < 0xE000) {
              // last char was a lead
              if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                  // unexpected trail
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  continue;
                } else if (i + 1 === length) {
                  // unpaired lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  continue;
                } // valid lead


                leadSurrogate = codePoint;
                continue;
              } // 2 leads in a row


              if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
              } // valid surrogate pair


              codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
            } else if (leadSurrogate) {
              // valid bmp char, but last char was a lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            }

            leadSurrogate = null; // encode utf8

            if (codePoint < 0x80) {
              if ((units -= 1) < 0) break;
              bytes.push(codePoint);
            } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break;
              bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
            } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break;
              bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
            } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break;
              bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
            } else {
              throw new Error('Invalid code point');
            }
          }

          return bytes;
        }

        function asciiToBytes(str) {
          var byteArray = [];

          for (var i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xFF);
          }

          return byteArray;
        }

        function utf16leToBytes(str, units) {
          var c, hi, lo;
          var byteArray = [];

          for (var i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break;
            c = str.charCodeAt(i);
            hi = c >> 8;
            lo = c % 256;
            byteArray.push(lo);
            byteArray.push(hi);
          }

          return byteArray;
        }

        function base64ToBytes(str) {
          return base64.toByteArray(base64clean(str));
        }

        function blitBuffer(src, dst, offset, length) {
          for (var i = 0; i < length; ++i) {
            if (i + offset >= dst.length || i >= src.length) break;
            dst[i + offset] = src[i];
          }

          return i;
        }

        function isnan(val) {
          return val !== val; // eslint-disable-line no-self-compare
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(5));
      /***/
    },
    /* 4 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };

      var Hoek = __webpack_require__(0);

      var Ref = __webpack_require__(1); // Type modules are delay-loaded to prevent circular dependencies
      // Declare internals


      var internals = {};

      exports.schema = function (Joi, config) {
        if (config !== undefined && config !== null && (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {
          if (config.isJoi) {
            return config;
          }

          if (Array.isArray(config)) {
            return Joi.alternatives().try(config);
          }

          if (config instanceof RegExp) {
            return Joi.string().regex(config);
          }

          if (config instanceof Date) {
            return Joi.date().valid(config);
          }

          return Joi.object().keys(config);
        }

        if (typeof config === 'string') {
          return Joi.string().valid(config);
        }

        if (typeof config === 'number') {
          return Joi.number().valid(config);
        }

        if (typeof config === 'boolean') {
          return Joi.boolean().valid(config);
        }

        if (Ref.isRef(config)) {
          return Joi.valid(config);
        }

        Hoek.assert(config === null, 'Invalid schema content:', config);
        return Joi.valid(null);
      };

      exports.ref = function (id) {
        return Ref.isRef(id) ? id : Ref.create(id);
      };
      /***/

    },
    /* 5 */

    /***/
    function (module, exports) {
      var g; // This works in non-strict mode

      g = function () {
        return this;
      }();

      try {
        // This works if eval is allowed (see CSP)
        g = g || Function("return this")() || (1, eval)("this");
      } catch (e) {
        // This works if the window reference is available
        if (typeof window === "object") g = window;
      } // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}


      module.exports = g;
      /***/
    },
    /* 6 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var Hoek = __webpack_require__(0);

      var Language = __webpack_require__(20); // Declare internals


      var internals = {
        annotations: Symbol('joi-annotations')
      };

      internals.stringify = function (value, wrapArrays) {
        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

        if (value === null) {
          return 'null';
        }

        if (type === 'string') {
          return value;
        }

        if (value instanceof exports.Err || type === 'function' || type === 'symbol') {
          return value.toString();
        }

        if (type === 'object') {
          if (Array.isArray(value)) {
            var partial = '';

            for (var i = 0; i < value.length; ++i) {
              partial = partial + (partial.length ? ', ' : '') + internals.stringify(value[i], wrapArrays);
            }

            return wrapArrays ? '[' + partial + ']' : partial;
          }

          return value.toString();
        }

        return JSON.stringify(value);
      };

      exports.Err = function () {
        function _class(type, context, state, options, flags, message, template) {
          _classCallCheck(this, _class);

          this.isJoi = true;
          this.type = type;
          this.context = context || {};
          this.context.key = state.path[state.path.length - 1];
          this.context.label = state.key;
          this.path = state.path;
          this.options = options;
          this.flags = flags;
          this.message = message;
          this.template = template;
          var localized = this.options.language;

          if (this.flags.label) {
            this.context.label = this.flags.label;
          } else if (localized && ( // language can be null for arrays exclusion check
          this.context.label === '' || this.context.label === null)) {
            this.context.label = localized.root || Language.errors.root;
          }
        }

        _class.prototype.toString = function toString() {
          var _this = this;

          if (this.message) {
            return this.message;
          }

          var format = void 0;

          if (this.template) {
            format = this.template;
          }

          var localized = this.options.language;
          format = format || Hoek.reach(localized, this.type) || Hoek.reach(Language.errors, this.type);

          if (format === undefined) {
            return 'Error code "' + this.type + '" is not defined, your custom type is missing the correct language definition';
          }

          var wrapArrays = Hoek.reach(localized, 'messages.wrapArrays');

          if (typeof wrapArrays !== 'boolean') {
            wrapArrays = Language.errors.messages.wrapArrays;
          }

          if (format === null) {
            var childrenString = internals.stringify(this.context.reason, wrapArrays);

            if (wrapArrays) {
              return childrenString.slice(1, -1);
            }

            return childrenString;
          }

          var hasKey = /\{\{\!?label\}\}/.test(format);
          var skipKey = format.length > 2 && format[0] === '!' && format[1] === '!';

          if (skipKey) {
            format = format.slice(2);
          }

          if (!hasKey && !skipKey) {
            var localizedKey = Hoek.reach(localized, 'key');

            if (typeof localizedKey === 'string') {
              format = localizedKey + format;
            } else {
              format = Hoek.reach(Language.errors, 'key') + format;
            }
          }

          return format.replace(/\{\{(\!?)([^}]+)\}\}/g, function ($0, isSecure, name) {
            var value = Hoek.reach(_this.context, name);
            var normalized = internals.stringify(value, wrapArrays);
            return isSecure && _this.options.escapeHtml ? Hoek.escapeHtml(normalized) : normalized;
          });
        };

        return _class;
      }();

      exports.create = function (type, context, state, options, flags, message, template) {
        return new exports.Err(type, context, state, options, flags, message, template);
      };

      exports.process = function (errors, object) {
        if (!errors || !errors.length) {
          return null;
        } // Construct error


        var message = '';
        var details = [];

        var processErrors = function processErrors(localErrors, parent) {
          for (var i = 0; i < localErrors.length; ++i) {
            var item = localErrors[i];

            if (item instanceof Error) {
              return item;
            }

            if (item.flags.error && typeof item.flags.error !== 'function') {
              return item.flags.error;
            }

            var itemMessage = void 0;

            if (parent === undefined) {
              itemMessage = item.toString();
              message = message + (message ? '. ' : '') + itemMessage;
            } // Do not push intermediate errors, we're only interested in leafs


            if (item.context.reason && item.context.reason.length) {
              var _override = processErrors(item.context.reason, item.path);

              if (_override) {
                return _override;
              }
            } else {
              details.push({
                message: itemMessage || item.toString(),
                path: item.path,
                type: item.type,
                context: item.context
              });
            }
          }
        };

        var override = processErrors(errors);

        if (override) {
          return override;
        }

        var error = new Error(message);
        error.isJoi = true;
        error.name = 'ValidationError';
        error.details = details;
        error._object = object;
        error.annotate = internals.annotate;
        return error;
      }; // Inspired by json-stringify-safe


      internals.safeStringify = function (obj, spaces) {
        return JSON.stringify(obj, internals.serializer(), spaces);
      };

      internals.serializer = function () {
        var keys = [];
        var stack = [];

        var cycleReplacer = function cycleReplacer(key, value) {
          if (stack[0] === value) {
            return '[Circular ~]';
          }

          return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';
        };

        return function (key, value) {
          if (stack.length > 0) {
            var thisPos = stack.indexOf(this);

            if (~thisPos) {
              stack.length = thisPos + 1;
              keys.length = thisPos + 1;
              keys[thisPos] = key;
            } else {
              stack.push(this);
              keys.push(key);
            }

            if (~stack.indexOf(value)) {
              value = cycleReplacer.call(this, key, value);
            }
          } else {
            stack.push(value);
          }

          if (value) {
            var annotations = value[internals.annotations];

            if (annotations) {
              if (Array.isArray(value)) {
                var annotated = [];

                for (var i = 0; i < value.length; ++i) {
                  if (annotations.errors[i]) {
                    annotated.push('_$idx$_' + annotations.errors[i].sort().join(', ') + '_$end$_');
                  }

                  annotated.push(value[i]);
                }

                value = annotated;
              } else {
                var errorKeys = Object.keys(annotations.errors);

                for (var _i = 0; _i < errorKeys.length; ++_i) {
                  var errorKey = errorKeys[_i];
                  value[errorKey + '_$key$_' + annotations.errors[errorKey].sort().join(', ') + '_$end$_'] = value[errorKey];
                  value[errorKey] = undefined;
                }

                var missingKeys = Object.keys(annotations.missing);

                for (var _i2 = 0; _i2 < missingKeys.length; ++_i2) {
                  var missingKey = missingKeys[_i2];
                  value['_$miss$_' + missingKey + '|' + annotations.missing[missingKey] + '_$end$_'] = '__missing__';
                }
              }

              return value;
            }
          }

          if (value === Infinity || value === -Infinity || Number.isNaN(value) || typeof value === 'function' || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'symbol') {
            return '[' + value.toString() + ']';
          }

          return value;
        };
      };

      internals.annotate = function (stripColorCodes) {
        var redFgEscape = stripColorCodes ? '' : '\x1B[31m';
        var redBgEscape = stripColorCodes ? '' : '\x1B[41m';
        var endColor = stripColorCodes ? '' : '\x1B[0m';

        if (_typeof(this._object) !== 'object') {
          return this.details[0].message;
        }

        var obj = Hoek.clone(this._object || {});

        for (var i = this.details.length - 1; i >= 0; --i) {
          // Reverse order to process deepest child first
          var pos = i + 1;
          var error = this.details[i];
          var path = error.path;
          var ref = obj;

          for (var j = 0;; ++j) {
            var seg = path[j];

            if (ref.isImmutable) {
              ref = ref.clone(); // joi schemas are not cloned by hoek, we have to take this extra step
            }

            if (j + 1 < path.length && ref[seg] && typeof ref[seg] !== 'string') {
              ref = ref[seg];
            } else {
              var refAnnotations = ref[internals.annotations] = ref[internals.annotations] || {
                errors: {},
                missing: {}
              };
              var value = ref[seg];
              var cacheKey = seg || error.context.label;

              if (value !== undefined) {
                refAnnotations.errors[cacheKey] = refAnnotations.errors[cacheKey] || [];
                refAnnotations.errors[cacheKey].push(pos);
              } else {
                refAnnotations.missing[cacheKey] = pos;
              }

              break;
            }
          }
        }

        var replacers = {
          key: /_\$key\$_([, \d]+)_\$end\$_\"/g,
          missing: /\"_\$miss\$_([^\|]+)\|(\d+)_\$end\$_\"\: \"__missing__\"/g,
          arrayIndex: /\s*\"_\$idx\$_([, \d]+)_\$end\$_\",?\n(.*)/g,
          specials: /"\[(NaN|Symbol.*|-?Infinity|function.*|\(.*)\]"/g
        };
        var message = internals.safeStringify(obj, 2).replace(replacers.key, function ($0, $1) {
          return '" ' + redFgEscape + '[' + $1 + ']' + endColor;
        }).replace(replacers.missing, function ($0, $1, $2) {
          return redBgEscape + '"' + $1 + '"' + endColor + redFgEscape + ' [' + $2 + ']: -- missing --' + endColor;
        }).replace(replacers.arrayIndex, function ($0, $1, $2) {
          return '\n' + $2 + ' ' + redFgEscape + '[' + $1 + ']' + endColor;
        }).replace(replacers.specials, function ($0, $1) {
          return $1;
        });
        message = message + '\n' + redFgEscape;

        for (var _i3 = 0; _i3 < this.details.length; ++_i3) {
          var _pos = _i3 + 1;

          message = message + '\n[' + _pos + '] ' + this.details[_i3].message;
        }

        message = message + endColor;
        return message;
      };
      /***/

    },
    /* 7 */

    /***/
    function (module, exports) {
      // shim for using process in browser
      var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.

      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }

      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
      }

      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }

        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();

      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
        } // if setTimeout wasn't available but was latter defined


        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }

        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }

      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
        } // if clearTimeout wasn't available but was latter defined


        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }

        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
          }
        }
      }

      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }

        draining = false;

        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }

        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }

        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;

        while (len) {
          currentQueue = queue;
          queue = [];

          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }

          queueIndex = -1;
          len = queue.length;
        }

        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);

        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }

        queue.push(new Item(fun, args));

        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      }; // v8 likes predictible objects


      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }

      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };

      process.title = 'browser';
      process.env = {};
      process.argv = [];
      process.version = ''; // empty string to avoid regexp issues

      process.versions = {};

      function noop() {}

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) {
        return [];
      };

      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };

      process.cwd = function () {
        return '/';
      };

      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };

      process.umask = function () {
        return 0;
      };
      /***/

    },
    /* 8 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        } else {
          return Array.from(arr);
        }
      }

      var Hoek = __webpack_require__(0);

      var Any = __webpack_require__(2);

      var Cast = __webpack_require__(4);

      var Errors = __webpack_require__(6);

      var Lazy = __webpack_require__(26);

      var Ref = __webpack_require__(1);

      var Settings = __webpack_require__(11); // Declare internals


      var internals = {
        alternatives: __webpack_require__(10),
        array: __webpack_require__(22),
        boolean: __webpack_require__(24),
        binary: __webpack_require__(23),
        date: __webpack_require__(12),
        func: __webpack_require__(25),
        number: __webpack_require__(27),
        object: __webpack_require__(13),
        string: __webpack_require__(28)
      };

      internals.callWithDefaults = function (schema, args) {
        var _schema;

        Hoek.assert(this, 'Must be invoked on a Joi instance.');

        if (this._defaults) {
          schema = this._defaults(schema);
        }

        schema._currentJoi = this;
        return (_schema = schema)._init.apply(_schema, _toConsumableArray(args));
      };

      internals.root = function () {
        var any = new Any();
        var root = any.clone();
        Any.prototype._currentJoi = root;
        root._currentJoi = root;

        root.any = function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          Hoek.assert(args.length === 0, 'Joi.any() does not allow arguments.');
          return internals.callWithDefaults.call(this, any, args);
        };

        root.alternatives = root.alt = function () {
          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return internals.callWithDefaults.call(this, internals.alternatives, args);
        };

        root.array = function () {
          for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          Hoek.assert(args.length === 0, 'Joi.array() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.array, args);
        };

        root.boolean = root.bool = function () {
          for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }

          Hoek.assert(args.length === 0, 'Joi.boolean() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.boolean, args);
        };

        root.binary = function () {
          for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }

          Hoek.assert(args.length === 0, 'Joi.binary() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.binary, args);
        };

        root.date = function () {
          for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
          }

          Hoek.assert(args.length === 0, 'Joi.date() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.date, args);
        };

        root.func = function () {
          for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }

          Hoek.assert(args.length === 0, 'Joi.func() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.func, args);
        };

        root.number = function () {
          for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
            args[_key8] = arguments[_key8];
          }

          Hoek.assert(args.length === 0, 'Joi.number() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.number, args);
        };

        root.object = function () {
          for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
          }

          return internals.callWithDefaults.call(this, internals.object, args);
        };

        root.string = function () {
          for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
            args[_key10] = arguments[_key10];
          }

          Hoek.assert(args.length === 0, 'Joi.string() does not allow arguments.');
          return internals.callWithDefaults.call(this, internals.string, args);
        };

        root.ref = function () {
          return Ref.create.apply(Ref, arguments);
        };

        root.isRef = function (ref) {
          return Ref.isRef(ref);
        };

        root.validate = function (value)
        /*, [schema], [options], callback */
        {
          var _ref;

          var last = (_ref = (arguments.length <= 1 ? 0 : arguments.length - 1) - 1 + 1, arguments.length <= _ref ? undefined : arguments[_ref]);
          var callback = typeof last === 'function' ? last : null;
          var count = (arguments.length <= 1 ? 0 : arguments.length - 1) - (callback ? 1 : 0);

          if (count === 0) {
            return any.validate(value, callback);
          }

          var options = count === 2 ? arguments.length <= 2 ? undefined : arguments[2] : {};
          var schema = root.compile(arguments.length <= 1 ? undefined : arguments[1]);
          return schema._validateWithOptions(value, options, callback);
        };

        root.describe = function () {
          var schema = arguments.length ? root.compile(arguments.length <= 0 ? undefined : arguments[0]) : any;
          return schema.describe();
        };

        root.compile = function (schema) {
          try {
            return Cast.schema(this, schema);
          } catch (err) {
            if (err.hasOwnProperty('path')) {
              err.message = err.message + '(' + err.path + ')';
            }

            throw err;
          }
        };

        root.assert = function (value, schema, message) {
          root.attempt(value, schema, message);
        };

        root.attempt = function (value, schema, message) {
          var result = root.validate(value, schema);
          var error = result.error;

          if (error) {
            if (!message) {
              if (typeof error.annotate === 'function') {
                error.message = error.annotate();
              }

              throw error;
            }

            if (!(message instanceof Error)) {
              if (typeof error.annotate === 'function') {
                error.message = message + ' ' + error.annotate();
              }

              throw error;
            }

            throw message;
          }

          return result.value;
        };

        root.reach = function (schema, path) {
          Hoek.assert(schema && schema instanceof Any, 'you must provide a joi schema');
          Hoek.assert(Array.isArray(path) || typeof path === 'string', 'path must be a string or an array of strings');

          var reach = function reach(sourceSchema, schemaPath) {
            if (!schemaPath.length) {
              return sourceSchema;
            }

            var children = sourceSchema._inner.children;

            if (!children) {
              return;
            }

            var key = schemaPath.shift();

            for (var i = 0; i < children.length; ++i) {
              var child = children[i];

              if (child.key === key) {
                return reach(child.schema, schemaPath);
              }
            }
          };

          var schemaPath = typeof path === 'string' ? path ? path.split('.') : [] : path.slice();
          return reach(schema, schemaPath);
        };

        root.lazy = function (fn) {
          return Lazy.set(fn);
        };

        root.defaults = function (fn) {
          var _this = this;

          Hoek.assert(typeof fn === 'function', 'Defaults must be a function');
          var joi = Object.create(this.any());
          joi = fn(joi);
          Hoek.assert(joi && joi instanceof this.constructor, 'defaults() must return a schema');

          _extends(joi, this, joi.clone()); // Re-add the types from `this` but also keep the settings from joi's potential new defaults


          joi._defaults = function (schema) {
            if (_this._defaults) {
              schema = _this._defaults(schema);
              Hoek.assert(schema instanceof _this.constructor, 'defaults() must return a schema');
            }

            schema = fn(schema);
            Hoek.assert(schema instanceof _this.constructor, 'defaults() must return a schema');
            return schema;
          };

          return joi;
        };

        root.extend = function () {
          var _this2 = this;

          for (var _len11 = arguments.length, args = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
            args[_key11] = arguments[_key11];
          }

          var extensions = Hoek.flatten(args);
          Hoek.assert(extensions.length > 0, 'You need to provide at least one extension');
          this.assert(extensions, root.extensionsSchema);
          var joi = Object.create(this.any());

          _extends(joi, this);

          var _loop = function _loop(i) {
            var extension = extensions[i];

            if (typeof extension === 'function') {
              extension = extension(joi);
            }

            _this2.assert(extension, root.extensionSchema);

            var base = (extension.base || _this2.any()).clone(); // Cloning because we're going to override language afterwards


            var ctor = base.constructor;

            var type = function (_ctor) {
              _inherits(type, _ctor); // eslint-disable-line no-loop-func


              function type() {
                _classCallCheck(this, type);

                var _this3 = _possibleConstructorReturn(this, _ctor.call(this));

                if (extension.base) {
                  _extends(_this3, base);
                }

                _this3._type = extension.name;

                if (extension.language) {
                  _this3._settings = Settings.concat(_this3._settings, {
                    language: _defineProperty({}, extension.name, extension.language)
                  });
                }

                return _this3;
              }

              return type;
            }(ctor);

            if (extension.coerce) {
              type.prototype._coerce = function (value, state, options) {
                if (ctor.prototype._coerce) {
                  var baseRet = ctor.prototype._coerce.call(this, value, state, options);

                  if (baseRet.errors) {
                    return baseRet;
                  }

                  value = baseRet.value;
                }

                var ret = extension.coerce.call(this, value, state, options);

                if (ret instanceof Errors.Err) {
                  return {
                    value: value,
                    errors: ret
                  };
                }

                return {
                  value: ret
                };
              };
            }

            if (extension.pre) {
              type.prototype._base = function (value, state, options) {
                if (ctor.prototype._base) {
                  var baseRet = ctor.prototype._base.call(this, value, state, options);

                  if (baseRet.errors) {
                    return baseRet;
                  }

                  value = baseRet.value;
                }

                var ret = extension.pre.call(this, value, state, options);

                if (ret instanceof Errors.Err) {
                  return {
                    value: value,
                    errors: ret
                  };
                }

                return {
                  value: ret
                };
              };
            }

            if (extension.rules) {
              var _loop2 = function _loop2(j) {
                var rule = extension.rules[j];
                var ruleArgs = rule.params ? rule.params instanceof Any ? rule.params._inner.children.map(function (k) {
                  return k.key;
                }) : Object.keys(rule.params) : [];
                var validateArgs = rule.params ? Cast.schema(_this2, rule.params) : null;

                type.prototype[rule.name] = function () {
                  for (var _len12 = arguments.length, rArgs = Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
                    rArgs[_key12] = arguments[_key12];
                  } // eslint-disable-line no-loop-func


                  if (rArgs.length > ruleArgs.length) {
                    throw new Error('Unexpected number of arguments');
                  }

                  var hasRef = false;
                  var arg = {};

                  for (var k = 0; k < ruleArgs.length; ++k) {
                    arg[ruleArgs[k]] = rArgs[k];

                    if (!hasRef && Ref.isRef(rArgs[k])) {
                      hasRef = true;
                    }
                  }

                  if (validateArgs) {
                    arg = joi.attempt(arg, validateArgs);
                  }

                  var schema = void 0;

                  if (rule.validate) {
                    var validate = function validate(value, state, options) {
                      return rule.validate.call(this, arg, value, state, options);
                    };

                    schema = this._test(rule.name, arg, validate, {
                      description: rule.description,
                      hasRef: hasRef
                    });
                  } else {
                    schema = this.clone();
                  }

                  if (rule.setup) {
                    var newSchema = rule.setup.call(schema, arg);

                    if (newSchema !== undefined) {
                      Hoek.assert(newSchema instanceof Any, 'Setup of extension Joi.' + this._type + '().' + rule.name + '() must return undefined or a Joi object');
                      schema = newSchema;
                    }
                  }

                  return schema;
                };
              };

              for (var j = 0; j < extension.rules.length; ++j) {
                _loop2(j);
              }
            }

            if (extension.describe) {
              type.prototype.describe = function () {
                var description = ctor.prototype.describe.call(this);
                return extension.describe.call(this, description);
              };
            }

            var instance = new type();

            joi[extension.name] = function () {
              for (var _len13 = arguments.length, extArgs = Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
                extArgs[_key13] = arguments[_key13];
              }

              return internals.callWithDefaults.call(this, instance, extArgs);
            };
          };

          for (var i = 0; i < extensions.length; ++i) {
            _loop(i);
          }

          return joi;
        };

        root.extensionSchema = internals.object.keys({
          base: internals.object.type(Any, 'Joi object'),
          name: internals.string.required(),
          coerce: internals.func.arity(3),
          pre: internals.func.arity(3),
          language: internals.object,
          describe: internals.func.arity(1),
          rules: internals.array.items(internals.object.keys({
            name: internals.string.required(),
            setup: internals.func.arity(1),
            validate: internals.func.arity(4),
            params: [internals.object.pattern(/.*/, internals.object.type(Any, 'Joi object')), internals.object.type(internals.object.constructor, 'Joi object')],
            description: [internals.string, internals.func.arity(1)]
          }).or('setup', 'validate'))
        }).strict();
        root.extensionsSchema = internals.array.items([internals.object, internals.func.arity(1)]).strict();
        root.version = __webpack_require__(36).version;
        return root;
      };

      module.exports = internals.root();
      /***/
    },
    /* 9 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
          return typeof obj;
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };

        function _toConsumableArray(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }

            return arr2;
          } else {
            return Array.from(arr);
          }
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        var Ref = __webpack_require__(1);

        var internals = {};

        internals.extendedCheckForValue = function (value, insensitive) {
          var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);

          if (valueType === 'object') {
            if (value instanceof Date) {
              return function (item) {
                return item instanceof Date && value.getTime() === item.getTime();
              };
            }

            if (Buffer.isBuffer(value)) {
              return function (item) {
                return Buffer.isBuffer(item) && value.length === item.length && value.toString('binary') === item.toString('binary');
              };
            }
          } else if (insensitive && valueType === 'string') {
            var lowercaseValue = value.toLowerCase();
            return function (item) {
              return typeof item === 'string' && lowercaseValue === item.toLowerCase();
            };
          }

          return null;
        };

        module.exports = function () {
          function InternalSet(from) {
            _classCallCheck(this, InternalSet);

            this._set = new Set(from);
            this._hasRef = false;
          }

          InternalSet.prototype.add = function add(value, refs) {
            var isRef = Ref.isRef(value);

            if (!isRef && this.has(value, null, null, false)) {
              return this;
            }

            if (refs !== undefined) {
              // If it's a merge, we don't have any refs
              Ref.push(refs, value);
            }

            this._set.add(value);

            this._hasRef |= isRef;
            return this;
          };

          InternalSet.prototype.merge = function merge(add, remove) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = add._set[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var item = _step.value;
                this.add(item);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = remove._set[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _item = _step2.value;
                this.remove(_item);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            return this;
          };

          InternalSet.prototype.remove = function remove(value) {
            this._set.delete(value);

            return this;
          };

          InternalSet.prototype.has = function has(value, state, options, insensitive) {
            if (!this._set.size) {
              return false;
            }

            var hasValue = this._set.has(value);

            if (hasValue) {
              return hasValue;
            }

            var extendedCheck = internals.extendedCheckForValue(value, insensitive);

            if (!extendedCheck) {
              if (state && this._hasRef) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = this._set[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var item = _step3.value;

                    if (Ref.isRef(item)) {
                      item = item(state.reference || state.parent, options);

                      if (value === item || Array.isArray(item) && item.includes(value)) {
                        return true;
                      }
                    }
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                      _iterator3.return();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
              }

              return false;
            }

            return this._has(value, state, options, extendedCheck);
          };

          InternalSet.prototype._has = function _has(value, state, options, check) {
            var checkRef = !!(state && this._hasRef);

            var isReallyEqual = function isReallyEqual(item) {
              if (value === item) {
                return true;
              }

              return check(item);
            };

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = this._set[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var item = _step4.value;

                if (checkRef && Ref.isRef(item)) {
                  // Only resolve references if there is a state, otherwise it's a merge
                  item = item(state.reference || state.parent, options);

                  if (Array.isArray(item)) {
                    if (item.find(isReallyEqual)) {
                      return true;
                    }

                    continue;
                  }
                }

                if (isReallyEqual(item)) {
                  return true;
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            return false;
          };

          InternalSet.prototype.values = function values(options) {
            if (options && options.stripUndefined) {
              var values = [];
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = undefined;

              try {
                for (var _iterator5 = this._set[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var item = _step5.value;

                  if (item !== undefined) {
                    values.push(item);
                  }
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5.return) {
                    _iterator5.return();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }

              return values;
            }

            return Array.from(this._set);
          };

          InternalSet.prototype.slice = function slice() {
            var set = new InternalSet(this._set);
            set._hasRef = this._hasRef;
            return set;
          };

          InternalSet.prototype.concat = function concat(source) {
            var set = new InternalSet([].concat(_toConsumableArray(this._set), _toConsumableArray(source._set)));
            set._hasRef = !!(this._hasRef | source._hasRef);
            return set;
          };

          return InternalSet;
        }();
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(3).Buffer);
      /***/
    },
    /* 10 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Hoek = __webpack_require__(0);

      var Any = __webpack_require__(2);

      var Cast = __webpack_require__(4);

      var Ref = __webpack_require__(1); // Declare internals


      var internals = {};

      internals.Alternatives = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'alternatives';

          _this._invalids.remove(null);

          _this._inner.matches = [];
          return _this;
        }

        _class.prototype._init = function _init() {
          return arguments.length ? this.try.apply(this, arguments) : this;
        };

        _class.prototype._base = function _base(value, state, options) {
          var errors = [];
          var il = this._inner.matches.length;
          var baseType = this._baseType;

          for (var i = 0; i < il; ++i) {
            var item = this._inner.matches[i];

            if (!item.schema) {
              var schema = item.peek || item.is;
              var input = item.is ? item.ref(state.reference || state.parent, options) : value;

              var failed = schema._validate(input, null, options, state.parent).errors;

              if (failed) {
                if (item.otherwise) {
                  return item.otherwise._validate(value, state, options);
                }
              } else if (item.then) {
                return item.then._validate(value, state, options);
              }

              if (i === il - 1 && baseType) {
                return baseType._validate(value, state, options);
              }

              continue;
            }

            var result = item.schema._validate(value, state, options);

            if (!result.errors) {
              // Found a valid match
              return result;
            }

            errors = errors.concat(result.errors);
          }

          if (errors.length) {
            return {
              errors: this.createError('alternatives.child', {
                reason: errors
              }, state, options)
            };
          }

          return {
            errors: this.createError('alternatives.base', null, state, options)
          };
        };

        _class.prototype.try = function _try() {
          for (var _len = arguments.length, schemas = Array(_len), _key = 0; _key < _len; _key++) {
            schemas[_key] = arguments[_key];
          }

          schemas = Hoek.flatten(schemas);
          Hoek.assert(schemas.length, 'Cannot add other alternatives without at least one schema');
          var obj = this.clone();

          for (var i = 0; i < schemas.length; ++i) {
            var cast = Cast.schema(this._currentJoi, schemas[i]);

            if (cast._refs.length) {
              obj._refs = obj._refs.concat(cast._refs);
            }

            obj._inner.matches.push({
              schema: cast
            });
          }

          return obj;
        };

        _class.prototype.when = function when(condition, options) {
          var schemaCondition = false;
          Hoek.assert(Ref.isRef(condition) || typeof condition === 'string' || (schemaCondition = condition instanceof Any), 'Invalid condition:', condition);
          Hoek.assert(options, 'Missing options');
          Hoek.assert((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object', 'Invalid options');

          if (schemaCondition) {
            Hoek.assert(!options.hasOwnProperty('is'), '"is" can not be used with a schema condition');
          } else {
            Hoek.assert(options.hasOwnProperty('is'), 'Missing "is" directive');
          }

          Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of "then" or "otherwise"');
          var obj = this.clone();
          var is = void 0;

          if (!schemaCondition) {
            is = Cast.schema(this._currentJoi, options.is);

            if (options.is === null || !(Ref.isRef(options.is) || options.is instanceof Any)) {
              // Only apply required if this wasn't already a schema or a ref, we'll suppose people know what they're doing
              is = is.required();
            }
          }

          var item = {
            ref: schemaCondition ? null : Cast.ref(condition),
            peek: schemaCondition ? condition : null,
            is: is,
            then: options.then !== undefined ? Cast.schema(this._currentJoi, options.then) : undefined,
            otherwise: options.otherwise !== undefined ? Cast.schema(this._currentJoi, options.otherwise) : undefined
          };

          if (obj._baseType) {
            item.then = item.then && obj._baseType.concat(item.then);
            item.otherwise = item.otherwise && obj._baseType.concat(item.otherwise);
          }

          if (!schemaCondition) {
            Ref.push(obj._refs, item.ref);
            obj._refs = obj._refs.concat(item.is._refs);
          }

          if (item.then && item.then._refs) {
            obj._refs = obj._refs.concat(item.then._refs);
          }

          if (item.otherwise && item.otherwise._refs) {
            obj._refs = obj._refs.concat(item.otherwise._refs);
          }

          obj._inner.matches.push(item);

          return obj;
        };

        _class.prototype.describe = function describe() {
          var description = Any.prototype.describe.call(this);
          var alternatives = [];

          for (var i = 0; i < this._inner.matches.length; ++i) {
            var item = this._inner.matches[i];

            if (item.schema) {
              // try()
              alternatives.push(item.schema.describe());
            } else {
              // when()
              var when = item.is ? {
                ref: item.ref.toString(),
                is: item.is.describe()
              } : {
                peek: item.peek.describe()
              };

              if (item.then) {
                when.then = item.then.describe();
              }

              if (item.otherwise) {
                when.otherwise = item.otherwise.describe();
              }

              alternatives.push(when);
            }
          }

          description.alternatives = alternatives;
          return description;
        };

        return _class;
      }(Any);

      module.exports = new internals.Alternatives();
      /***/
    },
    /* 11 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {};

      exports.concat = function (target, source) {
        if (!source) {
          return target;
        }

        var obj = _extends({}, target);

        var sKeys = Object.keys(source);

        for (var i = 0; i < sKeys.length; ++i) {
          var key = sKeys[i];

          if (key !== 'language' || !obj.hasOwnProperty(key)) {
            obj[key] = source[key];
          } else {
            obj[key] = Hoek.applyToDefaults(obj[key], source[key]);
          }
        }

        return obj;
      };
      /***/

    },
    /* 12 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Any = __webpack_require__(2);

      var Ref = __webpack_require__(1);

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {};
      internals.isoDate = /^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/;
      internals.invalidDate = new Date('');

      internals.isIsoDate = function () {
        var isoString = internals.isoDate.toString();
        return function (date) {
          return date && date.toString() === isoString;
        };
      }();

      internals.Date = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'date';
          return _this;
        }

        _class.prototype._base = function _base(value, state, options) {
          var result = {
            value: options.convert && internals.Date.toDate(value, this._flags.format, this._flags.timestamp, this._flags.multiplier) || value
          };

          if (result.value instanceof Date && !isNaN(result.value.getTime())) {
            result.errors = null;
          } else if (!options.convert) {
            result.errors = this.createError('date.strict', null, state, options);
          } else {
            var type = void 0;

            if (internals.isIsoDate(this._flags.format)) {
              type = 'isoDate';
            } else if (this._flags.timestamp) {
              type = 'timestamp.' + this._flags.timestamp;
            } else {
              type = 'base';
            }

            result.errors = this.createError('date.' + type, null, state, options);
          }

          return result;
        };

        _class.toDate = function toDate(value, format, timestamp, multiplier) {
          if (value instanceof Date) {
            return value;
          }

          if (typeof value === 'string' || typeof value === 'number' && !isNaN(value) && isFinite(value)) {
            if (typeof value === 'string' && /^[+-]?\d+(\.\d+)?$/.test(value)) {
              value = parseFloat(value);
            }

            var date = void 0;

            if (format && internals.isIsoDate(format)) {
              date = format.test(value) ? new Date(value) : internals.invalidDate;
            } else if (timestamp && multiplier) {
              date = /^\s*$/.test(value) ? internals.invalidDate : new Date(value * multiplier);
            } else {
              date = new Date(value);
            }

            if (!isNaN(date.getTime())) {
              return date;
            }
          }

          return null;
        };

        _class.prototype.iso = function iso() {
          if (this._flags.format === internals.isoDate) {
            return this;
          }

          var obj = this.clone();
          obj._flags.format = internals.isoDate;
          return obj;
        };

        _class.prototype.timestamp = function timestamp() {
          var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'javascript';
          var allowed = ['javascript', 'unix'];
          Hoek.assert(allowed.includes(type), '"type" must be one of "' + allowed.join('", "') + '"');

          if (this._flags.timestamp === type) {
            return this;
          }

          var obj = this.clone();
          obj._flags.timestamp = type;
          obj._flags.multiplier = type === 'unix' ? 1000 : 1;
          return obj;
        };

        _class.prototype._isIsoDate = function _isIsoDate(value) {
          return internals.isoDate.test(value);
        };

        return _class;
      }(Any);

      internals.compare = function (type, compare) {
        return function (date) {
          var isNow = date === 'now';
          var isRef = Ref.isRef(date);

          if (!isNow && !isRef) {
            date = internals.Date.toDate(date);
          }

          Hoek.assert(date, 'Invalid date format');
          return this._test(type, date, function (value, state, options) {
            var compareTo = void 0;

            if (isNow) {
              compareTo = Date.now();
            } else if (isRef) {
              compareTo = internals.Date.toDate(date(state.reference || state.parent, options));

              if (!compareTo) {
                return this.createError('date.ref', {
                  ref: date.key
                }, state, options);
              }

              compareTo = compareTo.getTime();
            } else {
              compareTo = date.getTime();
            }

            if (compare(value.getTime(), compareTo)) {
              return value;
            }

            return this.createError('date.' + type, {
              limit: new Date(compareTo)
            }, state, options);
          });
        };
      };

      internals.Date.prototype.min = internals.compare('min', function (value, date) {
        return value >= date;
      });
      internals.Date.prototype.max = internals.compare('max', function (value, date) {
        return value <= date;
      });
      internals.Date.prototype.greater = internals.compare('greater', function (value, date) {
        return value > date;
      });
      internals.Date.prototype.less = internals.compare('less', function (value, date) {
        return value < date;
      });
      module.exports = new internals.Date();
      /***/
    },
    /* 13 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Hoek = __webpack_require__(0);

      var Topo = __webpack_require__(31);

      var Any = __webpack_require__(2);

      var Errors = __webpack_require__(6);

      var Cast = __webpack_require__(4); // Declare internals


      var internals = {};

      internals.Object = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'object';
          _this._inner.children = null;
          _this._inner.renames = [];
          _this._inner.dependencies = [];
          _this._inner.patterns = [];
          return _this;
        }

        _class.prototype._init = function _init() {
          return arguments.length ? this.keys.apply(this, arguments) : this;
        };

        _class.prototype._base = function _base(value, state, options) {
          var target = value;
          var errors = [];

          var finish = function finish() {
            return {
              value: target,
              errors: errors.length ? errors : null
            };
          };

          if (typeof value === 'string' && options.convert) {
            value = internals.safeParse(value);
          }

          var type = this._flags.func ? 'function' : 'object';

          if (!value || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== type || Array.isArray(value)) {
            errors.push(this.createError(type + '.base', null, state, options));
            return finish();
          } // Skip if there are no other rules to test


          if (!this._inner.renames.length && !this._inner.dependencies.length && !this._inner.children && // null allows any keys
          !this._inner.patterns.length) {
            target = value;
            return finish();
          } // Ensure target is a local copy (parsed) or shallow copy


          if (target === value) {
            if (type === 'object') {
              target = Object.create(Object.getPrototypeOf(value));
            } else {
              target = function target() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                return value.apply(this, args);
              };

              target.prototype = Hoek.clone(value.prototype);
            }

            var valueKeys = Object.keys(value);

            for (var i = 0; i < valueKeys.length; ++i) {
              target[valueKeys[i]] = value[valueKeys[i]];
            }
          } else {
            target = value;
          } // Rename keys


          var renamed = {};

          for (var _i = 0; _i < this._inner.renames.length; ++_i) {
            var rename = this._inner.renames[_i];

            if (rename.isRegExp) {
              var targetKeys = Object.keys(target);
              var matchedTargetKeys = [];

              for (var j = 0; j < targetKeys.length; ++j) {
                if (rename.from.test(targetKeys[j])) {
                  matchedTargetKeys.push(targetKeys[j]);
                }
              }

              var allUndefined = matchedTargetKeys.every(function (key) {
                return target[key] === undefined;
              });

              if (rename.options.ignoreUndefined && allUndefined) {
                continue;
              }

              if (!rename.options.multiple && renamed[rename.to]) {
                errors.push(this.createError('object.rename.regex.multiple', {
                  from: matchedTargetKeys,
                  to: rename.to
                }, state, options));

                if (options.abortEarly) {
                  return finish();
                }
              }

              if (Object.prototype.hasOwnProperty.call(target, rename.to) && !rename.options.override && !renamed[rename.to]) {
                errors.push(this.createError('object.rename.regex.override', {
                  from: matchedTargetKeys,
                  to: rename.to
                }, state, options));

                if (options.abortEarly) {
                  return finish();
                }
              }

              if (allUndefined) {
                delete target[rename.to];
              } else {
                target[rename.to] = target[matchedTargetKeys[matchedTargetKeys.length - 1]];
              }

              renamed[rename.to] = true;

              if (!rename.options.alias) {
                for (var _j = 0; _j < matchedTargetKeys.length; ++_j) {
                  delete target[matchedTargetKeys[_j]];
                }
              }
            } else {
              if (rename.options.ignoreUndefined && target[rename.from] === undefined) {
                continue;
              }

              if (!rename.options.multiple && renamed[rename.to]) {
                errors.push(this.createError('object.rename.multiple', {
                  from: rename.from,
                  to: rename.to
                }, state, options));

                if (options.abortEarly) {
                  return finish();
                }
              }

              if (Object.prototype.hasOwnProperty.call(target, rename.to) && !rename.options.override && !renamed[rename.to]) {
                errors.push(this.createError('object.rename.override', {
                  from: rename.from,
                  to: rename.to
                }, state, options));

                if (options.abortEarly) {
                  return finish();
                }
              }

              if (target[rename.from] === undefined) {
                delete target[rename.to];
              } else {
                target[rename.to] = target[rename.from];
              }

              renamed[rename.to] = true;

              if (!rename.options.alias) {
                delete target[rename.from];
              }
            }
          } // Validate schema


          if (!this._inner.children && // null allows any keys
          !this._inner.patterns.length && !this._inner.dependencies.length) {
            return finish();
          }

          var unprocessed = new Set(Object.keys(target));

          if (this._inner.children) {
            var stripProps = [];

            for (var _i2 = 0; _i2 < this._inner.children.length; ++_i2) {
              var child = this._inner.children[_i2];
              var key = child.key;
              var item = target[key];
              unprocessed.delete(key);
              var localState = {
                key: key,
                path: state.path.concat(key),
                parent: target,
                reference: state.reference
              };

              var result = child.schema._validate(item, localState, options);

              if (result.errors) {
                errors.push(this.createError('object.child', {
                  key: key,
                  child: child.schema._getLabel(key),
                  reason: result.errors
                }, localState, options));

                if (options.abortEarly) {
                  return finish();
                }
              } else {
                if (child.schema._flags.strip || result.value === undefined && result.value !== item) {
                  stripProps.push(key);
                  target[key] = result.finalValue;
                } else if (result.value !== undefined) {
                  target[key] = result.value;
                }
              }
            }

            for (var _i3 = 0; _i3 < stripProps.length; ++_i3) {
              delete target[stripProps[_i3]];
            }
          } // Unknown keys


          if (unprocessed.size && this._inner.patterns.length) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = unprocessed[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _key2 = _step.value;
                var _localState = {
                  key: _key2,
                  path: state.path.concat(_key2),
                  parent: target,
                  reference: state.reference
                };
                var _item = target[_key2];

                for (var _i4 = 0; _i4 < this._inner.patterns.length; ++_i4) {
                  var pattern = this._inner.patterns[_i4];

                  if (pattern.regex ? pattern.regex.test(_key2) : !pattern.schema.validate(_key2).error) {
                    unprocessed.delete(_key2);

                    var _result = pattern.rule._validate(_item, _localState, options);

                    if (_result.errors) {
                      errors.push(this.createError('object.child', {
                        key: _key2,
                        child: pattern.rule._getLabel(_key2),
                        reason: _result.errors
                      }, _localState, options));

                      if (options.abortEarly) {
                        return finish();
                      }
                    }

                    target[_key2] = _result.value;
                  }
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }

          if (unprocessed.size && (this._inner.children || this._inner.patterns.length)) {
            if (options.stripUnknown && this._flags.allowUnknown !== true || options.skipFunctions) {
              var stripUnknown = options.stripUnknown ? options.stripUnknown === true ? true : !!options.stripUnknown.objects : false;
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = unprocessed[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var _key3 = _step2.value;

                  if (stripUnknown) {
                    delete target[_key3];
                    unprocessed.delete(_key3);
                  } else if (typeof target[_key3] === 'function') {
                    unprocessed.delete(_key3);
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            }

            if (this._flags.allowUnknown !== undefined ? !this._flags.allowUnknown : !options.allowUnknown) {
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (var _iterator3 = unprocessed[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var unprocessedKey = _step3.value;
                  errors.push(this.createError('object.allowUnknown', {
                    child: unprocessedKey
                  }, {
                    key: unprocessedKey,
                    path: state.path.concat(unprocessedKey)
                  }, options, {}));
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
            }
          } // Validate dependencies


          for (var _i5 = 0; _i5 < this._inner.dependencies.length; ++_i5) {
            var dep = this._inner.dependencies[_i5];
            var err = internals[dep.type].call(this, dep.key !== null && target[dep.key], dep.peers, target, {
              key: dep.key,
              path: dep.key === null ? state.path : state.path.concat(dep.key)
            }, options);

            if (err instanceof Errors.Err) {
              errors.push(err);

              if (options.abortEarly) {
                return finish();
              }
            }
          }

          return finish();
        };

        _class.prototype.keys = function keys(schema) {
          Hoek.assert(schema === null || schema === undefined || (typeof schema === 'undefined' ? 'undefined' : _typeof(schema)) === 'object', 'Object schema must be a valid object');
          Hoek.assert(!schema || !(schema instanceof Any), 'Object schema cannot be a joi schema');
          var obj = this.clone();

          if (!schema) {
            obj._inner.children = null;
            return obj;
          }

          var children = Object.keys(schema);

          if (!children.length) {
            obj._inner.children = [];
            return obj;
          }

          var topo = new Topo();

          if (obj._inner.children) {
            for (var i = 0; i < obj._inner.children.length; ++i) {
              var child = obj._inner.children[i]; // Only add the key if we are not going to replace it later

              if (!children.includes(child.key)) {
                topo.add(child, {
                  after: child._refs,
                  group: child.key
                });
              }
            }
          }

          for (var _i6 = 0; _i6 < children.length; ++_i6) {
            var key = children[_i6];
            var _child = schema[key];

            try {
              var cast = Cast.schema(this._currentJoi, _child);
              topo.add({
                key: key,
                schema: cast
              }, {
                after: cast._refs,
                group: key
              });
            } catch (castErr) {
              if (castErr.hasOwnProperty('path')) {
                castErr.path = key + '.' + castErr.path;
              } else {
                castErr.path = key;
              }

              throw castErr;
            }
          }

          obj._inner.children = topo.nodes;
          return obj;
        };

        _class.prototype.append = function append(schema) {
          // Skip any changes
          if (schema === null || schema === undefined || Object.keys(schema).length === 0) {
            return this;
          }

          return this.keys(schema);
        };

        _class.prototype.unknown = function unknown(allow) {
          var value = allow !== false;

          if (this._flags.allowUnknown === value) {
            return this;
          }

          var obj = this.clone();
          obj._flags.allowUnknown = value;
          return obj;
        };

        _class.prototype.length = function length(limit) {
          Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');
          return this._test('length', limit, function (value, state, options) {
            if (Object.keys(value).length === limit) {
              return value;
            }

            return this.createError('object.length', {
              limit: limit
            }, state, options);
          });
        };

        _class.prototype.min = function min(limit) {
          Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');
          return this._test('min', limit, function (value, state, options) {
            if (Object.keys(value).length >= limit) {
              return value;
            }

            return this.createError('object.min', {
              limit: limit
            }, state, options);
          });
        };

        _class.prototype.max = function max(limit) {
          Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');
          return this._test('max', limit, function (value, state, options) {
            if (Object.keys(value).length <= limit) {
              return value;
            }

            return this.createError('object.max', {
              limit: limit
            }, state, options);
          });
        };

        _class.prototype.pattern = function pattern(_pattern, schema) {
          var isRegExp = _pattern instanceof RegExp;
          Hoek.assert(isRegExp || _pattern instanceof Any, 'pattern must be a regex or schema');
          Hoek.assert(schema !== undefined, 'Invalid rule');

          if (isRegExp) {
            _pattern = new RegExp(_pattern.source, _pattern.ignoreCase ? 'i' : undefined); // Future version should break this and forbid unsupported regex flags
          }

          try {
            schema = Cast.schema(this._currentJoi, schema);
          } catch (castErr) {
            if (castErr.hasOwnProperty('path')) {
              castErr.message = castErr.message + '(' + castErr.path + ')';
            }

            throw castErr;
          }

          var obj = this.clone();

          if (isRegExp) {
            obj._inner.patterns.push({
              regex: _pattern,
              rule: schema
            });
          } else {
            obj._inner.patterns.push({
              schema: _pattern,
              rule: schema
            });
          }

          return obj;
        };

        _class.prototype.schema = function schema() {
          return this._test('schema', null, function (value, state, options) {
            if (value instanceof Any) {
              return value;
            }

            return this.createError('object.schema', null, state, options);
          });
        };

        _class.prototype.with = function _with(key, peers) {
          Hoek.assert(arguments.length === 2, 'Invalid number of arguments, expected 2.');
          return this._dependency('with', key, peers);
        };

        _class.prototype.without = function without(key, peers) {
          Hoek.assert(arguments.length === 2, 'Invalid number of arguments, expected 2.');
          return this._dependency('without', key, peers);
        };

        _class.prototype.xor = function xor() {
          for (var _len2 = arguments.length, peers = Array(_len2), _key4 = 0; _key4 < _len2; _key4++) {
            peers[_key4] = arguments[_key4];
          }

          peers = Hoek.flatten(peers);
          return this._dependency('xor', null, peers);
        };

        _class.prototype.or = function or() {
          for (var _len3 = arguments.length, peers = Array(_len3), _key5 = 0; _key5 < _len3; _key5++) {
            peers[_key5] = arguments[_key5];
          }

          peers = Hoek.flatten(peers);
          return this._dependency('or', null, peers);
        };

        _class.prototype.and = function and() {
          for (var _len4 = arguments.length, peers = Array(_len4), _key6 = 0; _key6 < _len4; _key6++) {
            peers[_key6] = arguments[_key6];
          }

          peers = Hoek.flatten(peers);
          return this._dependency('and', null, peers);
        };

        _class.prototype.nand = function nand() {
          for (var _len5 = arguments.length, peers = Array(_len5), _key7 = 0; _key7 < _len5; _key7++) {
            peers[_key7] = arguments[_key7];
          }

          peers = Hoek.flatten(peers);
          return this._dependency('nand', null, peers);
        };

        _class.prototype.requiredKeys = function requiredKeys() {
          for (var _len6 = arguments.length, children = Array(_len6), _key8 = 0; _key8 < _len6; _key8++) {
            children[_key8] = arguments[_key8];
          }

          children = Hoek.flatten(children);
          return this.applyFunctionToChildren(children, 'required');
        };

        _class.prototype.optionalKeys = function optionalKeys() {
          for (var _len7 = arguments.length, children = Array(_len7), _key9 = 0; _key9 < _len7; _key9++) {
            children[_key9] = arguments[_key9];
          }

          children = Hoek.flatten(children);
          return this.applyFunctionToChildren(children, 'optional');
        };

        _class.prototype.forbiddenKeys = function forbiddenKeys() {
          for (var _len8 = arguments.length, children = Array(_len8), _key10 = 0; _key10 < _len8; _key10++) {
            children[_key10] = arguments[_key10];
          }

          children = Hoek.flatten(children);
          return this.applyFunctionToChildren(children, 'forbidden');
        };

        _class.prototype.rename = function rename(from, to, options) {
          Hoek.assert(typeof from === 'string' || from instanceof RegExp, 'Rename missing the from argument');
          Hoek.assert(typeof to === 'string', 'Rename missing the to argument');
          Hoek.assert(to !== from, 'Cannot rename key to same name:', from);

          for (var i = 0; i < this._inner.renames.length; ++i) {
            Hoek.assert(this._inner.renames[i].from !== from, 'Cannot rename the same key multiple times');
          }

          var obj = this.clone();

          obj._inner.renames.push({
            from: from,
            to: to,
            options: Hoek.applyToDefaults(internals.renameDefaults, options || {}),
            isRegExp: from instanceof RegExp
          });

          return obj;
        };

        _class.prototype.applyFunctionToChildren = function applyFunctionToChildren(children, fn, args, root) {
          children = [].concat(children);
          Hoek.assert(children.length > 0, 'expected at least one children');
          var groupedChildren = internals.groupChildren(children);
          var obj = void 0;

          if ('' in groupedChildren) {
            obj = this[fn].apply(this, args);
            delete groupedChildren[''];
          } else {
            obj = this.clone();
          }

          if (obj._inner.children) {
            root = root ? root + '.' : '';

            for (var i = 0; i < obj._inner.children.length; ++i) {
              var child = obj._inner.children[i];
              var group = groupedChildren[child.key];

              if (group) {
                obj._inner.children[i] = {
                  key: child.key,
                  _refs: child._refs,
                  schema: child.schema.applyFunctionToChildren(group, fn, args, root + child.key)
                };
                delete groupedChildren[child.key];
              }
            }
          }

          var remaining = Object.keys(groupedChildren);
          Hoek.assert(remaining.length === 0, 'unknown key(s)', remaining.join(', '));
          return obj;
        };

        _class.prototype._dependency = function _dependency(type, key, peers) {
          peers = [].concat(peers);

          for (var i = 0; i < peers.length; ++i) {
            Hoek.assert(typeof peers[i] === 'string', type, 'peers must be a string or array of strings');
          }

          var obj = this.clone();

          obj._inner.dependencies.push({
            type: type,
            key: key,
            peers: peers
          });

          return obj;
        };

        _class.prototype.describe = function describe(shallow) {
          var description = Any.prototype.describe.call(this);

          if (description.rules) {
            for (var i = 0; i < description.rules.length; ++i) {
              var rule = description.rules[i]; // Coverage off for future-proof descriptions, only object().assert() is use right now

              if (
              /* $lab:coverage:off$ */
              rule.arg && _typeof(rule.arg) === 'object' && rule.arg.schema && rule.arg.ref
              /* $lab:coverage:on$ */
              ) {
                  rule.arg = {
                    schema: rule.arg.schema.describe(),
                    ref: rule.arg.ref.toString()
                  };
                }
            }
          }

          if (this._inner.children && !shallow) {
            description.children = {};

            for (var _i7 = 0; _i7 < this._inner.children.length; ++_i7) {
              var child = this._inner.children[_i7];
              description.children[child.key] = child.schema.describe();
            }
          }

          if (this._inner.dependencies.length) {
            description.dependencies = Hoek.clone(this._inner.dependencies);
          }

          if (this._inner.patterns.length) {
            description.patterns = [];

            for (var _i8 = 0; _i8 < this._inner.patterns.length; ++_i8) {
              var pattern = this._inner.patterns[_i8];

              if (pattern.regex) {
                description.patterns.push({
                  regex: pattern.regex.toString(),
                  rule: pattern.rule.describe()
                });
              } else {
                description.patterns.push({
                  schema: pattern.schema.describe(),
                  rule: pattern.rule.describe()
                });
              }
            }
          }

          if (this._inner.renames.length > 0) {
            description.renames = Hoek.clone(this._inner.renames);
          }

          return description;
        };

        _class.prototype.assert = function assert(ref, schema, message) {
          ref = Cast.ref(ref);
          Hoek.assert(ref.isContext || ref.depth > 1, 'Cannot use assertions for root level references - use direct key rules instead');
          message = message || 'pass the assertion test';

          try {
            schema = Cast.schema(this._currentJoi, schema);
          } catch (castErr) {
            if (castErr.hasOwnProperty('path')) {
              castErr.message = castErr.message + '(' + castErr.path + ')';
            }

            throw castErr;
          }

          var key = ref.path[ref.path.length - 1];
          var path = ref.path.join('.');
          return this._test('assert', {
            schema: schema,
            ref: ref
          }, function (value, state, options) {
            var result = schema._validate(ref(value), null, options, value);

            if (!result.errors) {
              return value;
            }

            var localState = Hoek.merge({}, state);
            localState.key = key;
            localState.path = ref.path;
            return this.createError('object.assert', {
              ref: path,
              message: message
            }, localState, options);
          });
        };

        _class.prototype.type = function type(constructor) {
          var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constructor.name;
          Hoek.assert(typeof constructor === 'function', 'type must be a constructor function');
          var typeData = {
            name: name,
            ctor: constructor
          };
          return this._test('type', typeData, function (value, state, options) {
            if (value instanceof constructor) {
              return value;
            }

            return this.createError('object.type', {
              type: typeData.name
            }, state, options);
          });
        };

        return _class;
      }(Any);

      internals.safeParse = function (value) {
        try {
          return JSON.parse(value);
        } catch (parseErr) {}

        return value;
      };

      internals.renameDefaults = {
        alias: false,
        // Keep old value in place
        multiple: false,
        // Allow renaming multiple keys into the same target
        override: false // Overrides an existing key

      };

      internals.groupChildren = function (children) {
        children.sort();
        var grouped = {};

        for (var i = 0; i < children.length; ++i) {
          var child = children[i];
          Hoek.assert(typeof child === 'string', 'children must be strings');
          var group = child.split('.')[0];
          var childGroup = grouped[group] = grouped[group] || [];
          childGroup.push(child.substring(group.length + 1));
        }

        return grouped;
      };

      internals.keysToLabels = function (schema, keys) {
        var children = schema._inner.children;

        if (!children) {
          return keys;
        }

        var findLabel = function findLabel(key) {
          var matchingChild = children.find(function (child) {
            return child.key === key;
          });
          return matchingChild ? matchingChild.schema._getLabel(key) : key;
        };

        if (Array.isArray(keys)) {
          return keys.map(findLabel);
        }

        return findLabel(keys);
      };

      internals.with = function (value, peers, parent, state, options) {
        if (value === undefined) {
          return value;
        }

        for (var i = 0; i < peers.length; ++i) {
          var peer = peers[i];

          if (!Object.prototype.hasOwnProperty.call(parent, peer) || parent[peer] === undefined) {
            return this.createError('object.with', {
              main: state.key,
              mainWithLabel: internals.keysToLabels(this, state.key),
              peer: peer,
              peerWithLabel: internals.keysToLabels(this, peer)
            }, state, options);
          }
        }

        return value;
      };

      internals.without = function (value, peers, parent, state, options) {
        if (value === undefined) {
          return value;
        }

        for (var i = 0; i < peers.length; ++i) {
          var peer = peers[i];

          if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {
            return this.createError('object.without', {
              main: state.key,
              mainWithLabel: internals.keysToLabels(this, state.key),
              peer: peer,
              peerWithLabel: internals.keysToLabels(this, peer)
            }, state, options);
          }
        }

        return value;
      };

      internals.xor = function (value, peers, parent, state, options) {
        var present = [];

        for (var i = 0; i < peers.length; ++i) {
          var peer = peers[i];

          if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {
            present.push(peer);
          }
        }

        if (present.length === 1) {
          return value;
        }

        var context = {
          peers: peers,
          peersWithLabels: internals.keysToLabels(this, peers)
        };

        if (present.length === 0) {
          return this.createError('object.missing', context, state, options);
        }

        return this.createError('object.xor', context, state, options);
      };

      internals.or = function (value, peers, parent, state, options) {
        for (var i = 0; i < peers.length; ++i) {
          var peer = peers[i];

          if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {
            return value;
          }
        }

        return this.createError('object.missing', {
          peers: peers,
          peersWithLabels: internals.keysToLabels(this, peers)
        }, state, options);
      };

      internals.and = function (value, peers, parent, state, options) {
        var missing = [];
        var present = [];
        var count = peers.length;

        for (var i = 0; i < count; ++i) {
          var peer = peers[i];

          if (!Object.prototype.hasOwnProperty.call(parent, peer) || parent[peer] === undefined) {
            missing.push(peer);
          } else {
            present.push(peer);
          }
        }

        var aon = missing.length === count || present.length === count;

        if (!aon) {
          return this.createError('object.and', {
            present: present,
            presentWithLabels: internals.keysToLabels(this, present),
            missing: missing,
            missingWithLabels: internals.keysToLabels(this, missing)
          }, state, options);
        }
      };

      internals.nand = function (value, peers, parent, state, options) {
        var present = [];

        for (var i = 0; i < peers.length; ++i) {
          var peer = peers[i];

          if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {
            present.push(peer);
          }
        }

        var values = Hoek.clone(peers);
        var main = values.splice(0, 1)[0];
        var allPresent = present.length === peers.length;
        return allPresent ? this.createError('object.nand', {
          main: main,
          mainWithLabel: internals.keysToLabels(this, main),
          peers: values,
          peersWithLabels: internals.keysToLabels(this, values)
        }, state, options) : null;
      };

      module.exports = new internals.Object();
      /***/
    },
    /* 14 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules
      // Delcare internals

      var internals = {
        rfc3986: {}
      };

      internals.generate = function () {
        /**
         * elements separated by forward slash ("/") are alternatives.
         */
        var or = '|';
        /**
         * Rule to support zero-padded addresses.
         */

        var zeroPad = '0?';
        /**
         * DIGIT = %x30-39 ; 0-9
         */

        var digit = '0-9';
        var digitOnly = '[' + digit + ']';
        /**
         * ALPHA = %x41-5A / %x61-7A   ; A-Z / a-z
         */

        var alpha = 'a-zA-Z';
        var alphaOnly = '[' + alpha + ']';
        /**
         * IPv4
         * cidr       = DIGIT                ; 0-9
         *            / %x31-32 DIGIT         ; 10-29
         *            / "3" %x30-32           ; 30-32
         */

        internals.rfc3986.ipv4Cidr = digitOnly + or + '[1-2]' + digitOnly + or + '3' + '[0-2]';
        /**
         * IPv6
         * cidr       = DIGIT                 ; 0-9
         *            / %x31-39 DIGIT         ; 10-99
         *            / "1" %x0-1 DIGIT       ; 100-119
         *            / "12" %x0-8            ; 120-128
         */

        internals.rfc3986.ipv6Cidr = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + '[01]' + digitOnly + or + '12[0-8])';
        /**
         * HEXDIG = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
         */

        var hexDigit = digit + 'A-Fa-f';
        var hexDigitOnly = '[' + hexDigit + ']';
        /**
         * unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
         */

        var unreserved = alpha + digit + '-\\._~';
        /**
         * sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
         */

        var subDelims = '!\\$&\'\\(\\)\\*\\+,;=';
        /**
         * pct-encoded = "%" HEXDIG HEXDIG
         */

        var pctEncoded = '%' + hexDigit;
        /**
         * pchar = unreserved / pct-encoded / sub-delims / ":" / "@"
         */

        var pchar = unreserved + pctEncoded + subDelims + ':@';
        var pcharOnly = '[' + pchar + ']';
        /**
         * dec-octet   = DIGIT                 ; 0-9
         *            / %x31-39 DIGIT         ; 10-99
         *            / "1" 2DIGIT            ; 100-199
         *            / "2" %x30-34 DIGIT     ; 200-249
         *            / "25" %x30-35          ; 250-255
         */

        var decOctect = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + digitOnly + digitOnly + or + '2' + '[0-4]' + digitOnly + or + '25' + '[0-5])';
        /**
         * IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
         */

        internals.rfc3986.IPv4address = '(?:' + decOctect + '\\.){3}' + decOctect;
        /**
         * h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal
         * ls32 = ( h16 ":" h16 ) / IPv4address ; least-significant 32 bits of address
         * IPv6address =                            6( h16 ":" ) ls32
         *             /                       "::" 5( h16 ":" ) ls32
         *             / [               h16 ] "::" 4( h16 ":" ) ls32
         *             / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
         *             / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
         *             / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
         *             / [ *4( h16 ":" ) h16 ] "::"              ls32
         *             / [ *5( h16 ":" ) h16 ] "::"              h16
         *             / [ *6( h16 ":" ) h16 ] "::"
         */

        var h16 = hexDigitOnly + '{1,4}';
        var ls32 = '(?:' + h16 + ':' + h16 + '|' + internals.rfc3986.IPv4address + ')';
        var IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;
        var IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;
        var IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;
        var IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;
        var IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;
        var IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;
        var IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;
        var IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;
        var IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';
        internals.rfc3986.IPv6address = '(?:' + IPv6SixHex + or + IPv6FiveHex + or + IPv6FourHex + or + IPv6ThreeHex + or + IPv6TwoHex + or + IPv6OneHex + or + IPv6NoneHex + or + IPv6NoneHex2 + or + IPv6NoneHex3 + ')';
        /**
         * IPvFuture = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
         */

        internals.rfc3986.IPvFuture = 'v' + hexDigitOnly + '+\\.[' + unreserved + subDelims + ':]+';
        /**
         * scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
         */

        internals.rfc3986.scheme = alphaOnly + '[' + alpha + digit + '+-\\.]*';
        /**
         * userinfo = *( unreserved / pct-encoded / sub-delims / ":" )
         */

        var userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';
        /**
         * IP-literal = "[" ( IPv6address / IPvFuture  ) "]"
         */

        var IPLiteral = '\\[(?:' + internals.rfc3986.IPv6address + or + internals.rfc3986.IPvFuture + ')\\]';
        /**
         * reg-name = *( unreserved / pct-encoded / sub-delims )
         */

        var regName = '[' + unreserved + pctEncoded + subDelims + ']{0,255}';
        /**
         * host = IP-literal / IPv4address / reg-name
         */

        var host = '(?:' + IPLiteral + or + internals.rfc3986.IPv4address + or + regName + ')';
        /**
         * port = *DIGIT
         */

        var port = digitOnly + '*';
        /**
         * authority   = [ userinfo "@" ] host [ ":" port ]
         */

        var authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';
        /**
         * segment       = *pchar
         * segment-nz    = 1*pchar
         * path          = path-abempty    ; begins with "/" or is empty
         *               / path-absolute   ; begins with "/" but not "//"
         *               / path-noscheme   ; begins with a non-colon segment
         *               / path-rootless   ; begins with a segment
         *               / path-empty      ; zero characters
         * path-abempty  = *( "/" segment )
         * path-absolute = "/" [ segment-nz *( "/" segment ) ]
         * path-rootless = segment-nz *( "/" segment )
         */

        var segment = pcharOnly + '*';
        var segmentNz = pcharOnly + '+';
        var segmentNzNc = '[' + unreserved + pctEncoded + subDelims + '@' + ']+';
        var pathEmpty = '';
        var pathAbEmpty = '(?:\\/' + segment + ')*';
        var pathAbsolute = '\\/(?:' + segmentNz + pathAbEmpty + ')?';
        var pathRootless = segmentNz + pathAbEmpty;
        var pathNoScheme = segmentNzNc + pathAbEmpty;
        /**
         * hier-part = "//" authority path
         */

        internals.rfc3986.hierPart = '(?:' + '(?:\\/\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathRootless + ')';
        /**
         * relative-part = "//" authority path-abempty
         *                 / path-absolute
         *                 / path-noscheme
         *                 / path-empty
         */

        internals.rfc3986.relativeRef = '(?:' + '(?:\\/\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathNoScheme + or + pathEmpty + ')';
        /**
         * query = *( pchar / "/" / "?" )
         */

        internals.rfc3986.query = '[' + pchar + '\\/\\?]*(?=#|$)'; //Finish matching either at the fragment part or end of the line.

        /**
         * fragment = *( pchar / "/" / "?" )
         */

        internals.rfc3986.fragment = '[' + pchar + '\\/\\?]*';
      };

      internals.generate();
      module.exports = internals.rfc3986;
      /***/
    },
    /* 15 */

    /***/
    function (module, exports) {
      /***/
    },
    /* 16 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (global, process) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        var formatRegExp = /%[sdj%]/g;

        exports.format = function (f) {
          if (!isString(f)) {
            var objects = [];

            for (var i = 0; i < arguments.length; i++) {
              objects.push(inspect(arguments[i]));
            }

            return objects.join(' ');
          }

          var i = 1;
          var args = arguments;
          var len = args.length;
          var str = String(f).replace(formatRegExp, function (x) {
            if (x === '%%') return '%';
            if (i >= len) return x;

            switch (x) {
              case '%s':
                return String(args[i++]);

              case '%d':
                return Number(args[i++]);

              case '%j':
                try {
                  return JSON.stringify(args[i++]);
                } catch (_) {
                  return '[Circular]';
                }

              default:
                return x;
            }
          });

          for (var x = args[i]; i < len; x = args[++i]) {
            if (isNull(x) || !isObject(x)) {
              str += ' ' + x;
            } else {
              str += ' ' + inspect(x);
            }
          }

          return str;
        }; // Mark that a method should not be used.
        // Returns a modified function which warns once by default.
        // If --no-deprecation is set, then it is a no-op.


        exports.deprecate = function (fn, msg) {
          // Allow for deprecating things in the process of starting up.
          if (isUndefined(global.process)) {
            return function () {
              return exports.deprecate(fn, msg).apply(this, arguments);
            };
          }

          if (process.noDeprecation === true) {
            return fn;
          }

          var warned = false;

          function deprecated() {
            if (!warned) {
              if (process.throwDeprecation) {
                throw new Error(msg);
              } else if (process.traceDeprecation) {
                console.trace(msg);
              } else {
                console.error(msg);
              }

              warned = true;
            }

            return fn.apply(this, arguments);
          }

          return deprecated;
        };

        var debugs = {};
        var debugEnviron;

        exports.debuglog = function (set) {
          if (isUndefined(debugEnviron)) debugEnviron = undefined || '';
          set = set.toUpperCase();

          if (!debugs[set]) {
            if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
              var pid = process.pid;

              debugs[set] = function () {
                var msg = exports.format.apply(exports, arguments);
                console.error('%s %d: %s', set, pid, msg);
              };
            } else {
              debugs[set] = function () {};
            }
          }

          return debugs[set];
        };
        /**
         * Echos the value of a value. Trys to print the value out
         * in the best way possible given the different types.
         *
         * @param {Object} obj The object to print out.
         * @param {Object} opts Optional options object that alters the output.
         */

        /* legacy: obj, showHidden, depth, colors*/


        function inspect(obj, opts) {
          // default options
          var ctx = {
            seen: [],
            stylize: stylizeNoColor
          }; // legacy...

          if (arguments.length >= 3) ctx.depth = arguments[2];
          if (arguments.length >= 4) ctx.colors = arguments[3];

          if (isBoolean(opts)) {
            // legacy...
            ctx.showHidden = opts;
          } else if (opts) {
            // got an "options" object
            exports._extend(ctx, opts);
          } // set default options


          if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
          if (isUndefined(ctx.depth)) ctx.depth = 2;
          if (isUndefined(ctx.colors)) ctx.colors = false;
          if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
          if (ctx.colors) ctx.stylize = stylizeWithColor;
          return formatValue(ctx, obj, ctx.depth);
        }

        exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

        inspect.colors = {
          'bold': [1, 22],
          'italic': [3, 23],
          'underline': [4, 24],
          'inverse': [7, 27],
          'white': [37, 39],
          'grey': [90, 39],
          'black': [30, 39],
          'blue': [34, 39],
          'cyan': [36, 39],
          'green': [32, 39],
          'magenta': [35, 39],
          'red': [31, 39],
          'yellow': [33, 39]
        }; // Don't use 'blue' not visible on cmd.exe

        inspect.styles = {
          'special': 'cyan',
          'number': 'yellow',
          'boolean': 'yellow',
          'undefined': 'grey',
          'null': 'bold',
          'string': 'green',
          'date': 'magenta',
          // "name": intentionally not styling
          'regexp': 'red'
        };

        function stylizeWithColor(str, styleType) {
          var style = inspect.styles[styleType];

          if (style) {
            return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
          } else {
            return str;
          }
        }

        function stylizeNoColor(str, styleType) {
          return str;
        }

        function arrayToHash(array) {
          var hash = {};
          array.forEach(function (val, idx) {
            hash[val] = true;
          });
          return hash;
        }

        function formatValue(ctx, value, recurseTimes) {
          // Provide a hook for user-specified inspect functions.
          // Check that value is an object with an inspect function on it
          if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
          value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
            var ret = value.inspect(recurseTimes, ctx);

            if (!isString(ret)) {
              ret = formatValue(ctx, ret, recurseTimes);
            }

            return ret;
          } // Primitive types cannot have properties


          var primitive = formatPrimitive(ctx, value);

          if (primitive) {
            return primitive;
          } // Look up the keys of the object.


          var keys = Object.keys(value);
          var visibleKeys = arrayToHash(keys);

          if (ctx.showHidden) {
            keys = Object.getOwnPropertyNames(value);
          } // IE doesn't make error fields non-enumerable
          // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


          if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
            return formatError(value);
          } // Some type of object without properties can be shortcutted.


          if (keys.length === 0) {
            if (isFunction(value)) {
              var name = value.name ? ': ' + value.name : '';
              return ctx.stylize('[Function' + name + ']', 'special');
            }

            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            }

            if (isDate(value)) {
              return ctx.stylize(Date.prototype.toString.call(value), 'date');
            }

            if (isError(value)) {
              return formatError(value);
            }
          }

          var base = '',
              array = false,
              braces = ['{', '}']; // Make Array say that they are Array

          if (isArray(value)) {
            array = true;
            braces = ['[', ']'];
          } // Make functions say that they are functions


          if (isFunction(value)) {
            var n = value.name ? ': ' + value.name : '';
            base = ' [Function' + n + ']';
          } // Make RegExps say that they are RegExps


          if (isRegExp(value)) {
            base = ' ' + RegExp.prototype.toString.call(value);
          } // Make dates with properties first say the date


          if (isDate(value)) {
            base = ' ' + Date.prototype.toUTCString.call(value);
          } // Make error with message first say the error


          if (isError(value)) {
            base = ' ' + formatError(value);
          }

          if (keys.length === 0 && (!array || value.length == 0)) {
            return braces[0] + base + braces[1];
          }

          if (recurseTimes < 0) {
            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            } else {
              return ctx.stylize('[Object]', 'special');
            }
          }

          ctx.seen.push(value);
          var output;

          if (array) {
            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
          } else {
            output = keys.map(function (key) {
              return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
            });
          }

          ctx.seen.pop();
          return reduceToSingleString(output, base, braces);
        }

        function formatPrimitive(ctx, value) {
          if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

          if (isString(value)) {
            var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
            return ctx.stylize(simple, 'string');
          }

          if (isNumber(value)) return ctx.stylize('' + value, 'number');
          if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

          if (isNull(value)) return ctx.stylize('null', 'null');
        }

        function formatError(value) {
          return '[' + Error.prototype.toString.call(value) + ']';
        }

        function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
          var output = [];

          for (var i = 0, l = value.length; i < l; ++i) {
            if (hasOwnProperty(value, String(i))) {
              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
            } else {
              output.push('');
            }
          }

          keys.forEach(function (key) {
            if (!key.match(/^\d+$/)) {
              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
            }
          });
          return output;
        }

        function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
          var name, str, desc;
          desc = Object.getOwnPropertyDescriptor(value, key) || {
            value: value[key]
          };

          if (desc.get) {
            if (desc.set) {
              str = ctx.stylize('[Getter/Setter]', 'special');
            } else {
              str = ctx.stylize('[Getter]', 'special');
            }
          } else {
            if (desc.set) {
              str = ctx.stylize('[Setter]', 'special');
            }
          }

          if (!hasOwnProperty(visibleKeys, key)) {
            name = '[' + key + ']';
          }

          if (!str) {
            if (ctx.seen.indexOf(desc.value) < 0) {
              if (isNull(recurseTimes)) {
                str = formatValue(ctx, desc.value, null);
              } else {
                str = formatValue(ctx, desc.value, recurseTimes - 1);
              }

              if (str.indexOf('\n') > -1) {
                if (array) {
                  str = str.split('\n').map(function (line) {
                    return '  ' + line;
                  }).join('\n').substr(2);
                } else {
                  str = '\n' + str.split('\n').map(function (line) {
                    return '   ' + line;
                  }).join('\n');
                }
              }
            } else {
              str = ctx.stylize('[Circular]', 'special');
            }
          }

          if (isUndefined(name)) {
            if (array && key.match(/^\d+$/)) {
              return str;
            }

            name = JSON.stringify('' + key);

            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
              name = name.substr(1, name.length - 2);
              name = ctx.stylize(name, 'name');
            } else {
              name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
              name = ctx.stylize(name, 'string');
            }
          }

          return name + ': ' + str;
        }

        function reduceToSingleString(output, base, braces) {
          var numLinesEst = 0;
          var length = output.reduce(function (prev, cur) {
            numLinesEst++;
            if (cur.indexOf('\n') >= 0) numLinesEst++;
            return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
          }, 0);

          if (length > 60) {
            return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
          }

          return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
        } // NOTE: These type checking functions intentionally don't use `instanceof`
        // because it is fragile and can be easily faked with `Object.create()`.


        function isArray(ar) {
          return Array.isArray(ar);
        }

        exports.isArray = isArray;

        function isBoolean(arg) {
          return typeof arg === 'boolean';
        }

        exports.isBoolean = isBoolean;

        function isNull(arg) {
          return arg === null;
        }

        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
          return arg == null;
        }

        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
          return typeof arg === 'number';
        }

        exports.isNumber = isNumber;

        function isString(arg) {
          return typeof arg === 'string';
        }

        exports.isString = isString;

        function isSymbol(arg) {
          return typeof arg === 'symbol';
        }

        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
          return arg === void 0;
        }

        exports.isUndefined = isUndefined;

        function isRegExp(re) {
          return isObject(re) && objectToString(re) === '[object RegExp]';
        }

        exports.isRegExp = isRegExp;

        function isObject(arg) {
          return typeof arg === 'object' && arg !== null;
        }

        exports.isObject = isObject;

        function isDate(d) {
          return isObject(d) && objectToString(d) === '[object Date]';
        }

        exports.isDate = isDate;

        function isError(e) {
          return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
        }

        exports.isError = isError;

        function isFunction(arg) {
          return typeof arg === 'function';
        }

        exports.isFunction = isFunction;

        function isPrimitive(arg) {
          return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
          typeof arg === 'undefined';
        }

        exports.isPrimitive = isPrimitive;
        exports.isBuffer = __webpack_require__(40);

        function objectToString(o) {
          return Object.prototype.toString.call(o);
        }

        function pad(n) {
          return n < 10 ? '0' + n.toString(10) : n.toString(10);
        }

        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

        function timestamp() {
          var d = new Date();
          var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
          return [d.getDate(), months[d.getMonth()], time].join(' ');
        } // log is just a thin wrapper to console.log that prepends a timestamp


        exports.log = function () {
          console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
        };
        /**
         * Inherit the prototype methods from one constructor into another.
         *
         * The Function.prototype.inherits from lang.js rewritten as a standalone
         * function (not on Function.prototype). NOTE: If this file is to be loaded
         * during bootstrapping this function needs to be rewritten using some native
         * functions as prototype setup using normal JavaScript does not work as
         * expected during bootstrapping (see mirror.js in r114903).
         *
         * @param {function} ctor Constructor function which needs to inherit the
         *     prototype.
         * @param {function} superCtor Constructor function to inherit prototype from.
         */


        exports.inherits = __webpack_require__(39);

        exports._extend = function (origin, add) {
          // Don't do anything if add isn't an object
          if (!add || !isObject(add)) return origin;
          var keys = Object.keys(add);
          var i = keys.length;

          while (i--) {
            origin[keys[i]] = add[keys[i]];
          }

          return origin;
        };

        function hasOwnProperty(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(5), __webpack_require__(7));
      /***/
    },
    /* 17 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global) {
        // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
        // original notice:

        /*!
         * The buffer module from node.js, for the browser.
         *
         * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
         * @license  MIT
         */
        function compare(a, b) {
          if (a === b) {
            return 0;
          }

          var x = a.length;
          var y = b.length;

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i];
              y = b[i];
              break;
            }
          }

          if (x < y) {
            return -1;
          }

          if (y < x) {
            return 1;
          }

          return 0;
        }

        function isBuffer(b) {
          if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
            return global.Buffer.isBuffer(b);
          }

          return !!(b != null && b._isBuffer);
        } // based on node assert, original notice:
        // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
        //
        // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
        //
        // Originally from narwhal.js (http://narwhaljs.org)
        // Copyright (c) 2009 Thomas Robinson <280north.com>
        //
        // Permission is hereby granted, free of charge, to any person obtaining a copy
        // of this software and associated documentation files (the 'Software'), to
        // deal in the Software without restriction, including without limitation the
        // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
        // sell copies of the Software, and to permit persons to whom the Software is
        // furnished to do so, subject to the following conditions:
        //
        // The above copyright notice and this permission notice shall be included in
        // all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
        // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
        // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


        var util = __webpack_require__(16);

        var hasOwn = Object.prototype.hasOwnProperty;
        var pSlice = Array.prototype.slice;

        var functionsHaveNames = function () {
          return function foo() {}.name === 'foo';
        }();

        function pToString(obj) {
          return Object.prototype.toString.call(obj);
        }

        function isView(arrbuf) {
          if (isBuffer(arrbuf)) {
            return false;
          }

          if (typeof global.ArrayBuffer !== 'function') {
            return false;
          }

          if (typeof ArrayBuffer.isView === 'function') {
            return ArrayBuffer.isView(arrbuf);
          }

          if (!arrbuf) {
            return false;
          }

          if (arrbuf instanceof DataView) {
            return true;
          }

          if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
            return true;
          }

          return false;
        } // 1. The assert module provides functions that throw
        // AssertionError's when particular conditions are not met. The
        // assert module must conform to the following interface.


        var assert = module.exports = ok; // 2. The AssertionError is defined in assert.
        // new assert.AssertionError({ message: message,
        //                             actual: actual,
        //                             expected: expected })

        var regex = /\s*function\s+([^\(\s]*)\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js

        function getName(func) {
          if (!util.isFunction(func)) {
            return;
          }

          if (functionsHaveNames) {
            return func.name;
          }

          var str = func.toString();
          var match = str.match(regex);
          return match && match[1];
        }

        assert.AssertionError = function AssertionError(options) {
          this.name = 'AssertionError';
          this.actual = options.actual;
          this.expected = options.expected;
          this.operator = options.operator;

          if (options.message) {
            this.message = options.message;
            this.generatedMessage = false;
          } else {
            this.message = getMessage(this);
            this.generatedMessage = true;
          }

          var stackStartFunction = options.stackStartFunction || fail;

          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, stackStartFunction);
          } else {
            // non v8 browsers so we can have a stacktrace
            var err = new Error();

            if (err.stack) {
              var out = err.stack; // try to strip useless frames

              var fn_name = getName(stackStartFunction);
              var idx = out.indexOf('\n' + fn_name);

              if (idx >= 0) {
                // once we have located the function frame
                // we need to strip out everything before it (and its line)
                var next_line = out.indexOf('\n', idx + 1);
                out = out.substring(next_line + 1);
              }

              this.stack = out;
            }
          }
        }; // assert.AssertionError instanceof Error


        util.inherits(assert.AssertionError, Error);

        function truncate(s, n) {
          if (typeof s === 'string') {
            return s.length < n ? s : s.slice(0, n);
          } else {
            return s;
          }
        }

        function inspect(something) {
          if (functionsHaveNames || !util.isFunction(something)) {
            return util.inspect(something);
          }

          var rawname = getName(something);
          var name = rawname ? ': ' + rawname : '';
          return '[Function' + name + ']';
        }

        function getMessage(self) {
          return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
        } // At present only the three keys mentioned above are used and
        // understood by the spec. Implementations or sub modules can pass
        // other keys to the AssertionError's constructor - they will be
        // ignored.
        // 3. All of the following functions must throw an AssertionError
        // when a corresponding condition is not met, with a message that
        // may be undefined if not provided.  All assertion methods provide
        // both the actual and expected values to the assertion error for
        // display purposes.


        function fail(actual, expected, message, operator, stackStartFunction) {
          throw new assert.AssertionError({
            message: message,
            actual: actual,
            expected: expected,
            operator: operator,
            stackStartFunction: stackStartFunction
          });
        } // EXTENSION! allows for well behaved errors defined elsewhere.


        assert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined
        // by !!guard.
        // assert.ok(guard, message_opt);
        // This statement is equivalent to assert.equal(true, !!guard,
        // message_opt);. To test strictly for the value true, use
        // assert.strictEqual(true, guard, message_opt);.

        function ok(value, message) {
          if (!value) fail(value, true, message, '==', assert.ok);
        }

        assert.ok = ok; // 5. The equality assertion tests shallow, coercive equality with
        // ==.
        // assert.equal(actual, expected, message_opt);

        assert.equal = function equal(actual, expected, message) {
          if (actual != expected) fail(actual, expected, message, '==', assert.equal);
        }; // 6. The non-equality assertion tests for whether two objects are not equal
        // with != assert.notEqual(actual, expected, message_opt);


        assert.notEqual = function notEqual(actual, expected, message) {
          if (actual == expected) {
            fail(actual, expected, message, '!=', assert.notEqual);
          }
        }; // 7. The equivalence assertion tests a deep equality relation.
        // assert.deepEqual(actual, expected, message_opt);


        assert.deepEqual = function deepEqual(actual, expected, message) {
          if (!_deepEqual(actual, expected, false)) {
            fail(actual, expected, message, 'deepEqual', assert.deepEqual);
          }
        };

        assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
          if (!_deepEqual(actual, expected, true)) {
            fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
          }
        };

        function _deepEqual(actual, expected, strict, memos) {
          // 7.1. All identical values are equivalent, as determined by ===.
          if (actual === expected) {
            return true;
          } else if (isBuffer(actual) && isBuffer(expected)) {
            return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is
            // equivalent if it is also a Date object that refers to the same time.
          } else if (util.isDate(actual) && util.isDate(expected)) {
            return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is
            // equivalent if it is also a RegExp object with the same source and
            // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
          } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
            return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',
            // equivalence is determined by ==.
          } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {
            return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying
            // ArrayBuffers in a Buffer each to increase performance
            // This optimization requires the arrays to have the same type as checked by
            // Object.prototype.toString (aka pToString). Never perform binary
            // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
            // bit patterns are not identical.
          } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
            return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is
            // determined by having the same number of owned properties (as verified
            // with Object.prototype.hasOwnProperty.call), the same set of keys
            // (although not necessarily the same order), equivalent values for every
            // corresponding key, and an identical 'prototype' property. Note: this
            // accounts for both named and indexed properties on Arrays.
          } else if (isBuffer(actual) !== isBuffer(expected)) {
            return false;
          } else {
            memos = memos || {
              actual: [],
              expected: []
            };
            var actualIndex = memos.actual.indexOf(actual);

            if (actualIndex !== -1) {
              if (actualIndex === memos.expected.indexOf(expected)) {
                return true;
              }
            }

            memos.actual.push(actual);
            memos.expected.push(expected);
            return objEquiv(actual, expected, strict, memos);
          }
        }

        function isArguments(object) {
          return Object.prototype.toString.call(object) == '[object Arguments]';
        }

        function objEquiv(a, b, strict, actualVisitedObjects) {
          if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same

          if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
          if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
          var aIsArgs = isArguments(a);
          var bIsArgs = isArguments(b);
          if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;

          if (aIsArgs) {
            a = pSlice.call(a);
            b = pSlice.call(b);
            return _deepEqual(a, b, strict);
          }

          var ka = objectKeys(a);
          var kb = objectKeys(b);
          var key, i; // having the same number of owned properties (keys incorporates
          // hasOwnProperty)

          if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),

          ka.sort();
          kb.sort(); //~~~cheap key test

          for (i = ka.length - 1; i >= 0; i--) {
            if (ka[i] !== kb[i]) return false;
          } //equivalent values for every corresponding key, and
          //~~~possibly expensive deep test


          for (i = ka.length - 1; i >= 0; i--) {
            key = ka[i];
            if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
          }

          return true;
        } // 8. The non-equivalence assertion tests for any deep inequality.
        // assert.notDeepEqual(actual, expected, message_opt);


        assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
          if (_deepEqual(actual, expected, false)) {
            fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
          }
        };

        assert.notDeepStrictEqual = notDeepStrictEqual;

        function notDeepStrictEqual(actual, expected, message) {
          if (_deepEqual(actual, expected, true)) {
            fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
          }
        } // 9. The strict equality assertion tests strict equality, as determined by ===.
        // assert.strictEqual(actual, expected, message_opt);


        assert.strictEqual = function strictEqual(actual, expected, message) {
          if (actual !== expected) {
            fail(actual, expected, message, '===', assert.strictEqual);
          }
        }; // 10. The strict non-equality assertion tests for strict inequality, as
        // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);


        assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
          if (actual === expected) {
            fail(actual, expected, message, '!==', assert.notStrictEqual);
          }
        };

        function expectedException(actual, expected) {
          if (!actual || !expected) {
            return false;
          }

          if (Object.prototype.toString.call(expected) == '[object RegExp]') {
            return expected.test(actual);
          }

          try {
            if (actual instanceof expected) {
              return true;
            }
          } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.
          }

          if (Error.isPrototypeOf(expected)) {
            return false;
          }

          return expected.call({}, actual) === true;
        }

        function _tryBlock(block) {
          var error;

          try {
            block();
          } catch (e) {
            error = e;
          }

          return error;
        }

        function _throws(shouldThrow, block, expected, message) {
          var actual;

          if (typeof block !== 'function') {
            throw new TypeError('"block" argument must be a function');
          }

          if (typeof expected === 'string') {
            message = expected;
            expected = null;
          }

          actual = _tryBlock(block);
          message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

          if (shouldThrow && !actual) {
            fail(actual, expected, 'Missing expected exception' + message);
          }

          var userProvidedMessage = typeof message === 'string';
          var isUnwantedException = !shouldThrow && util.isError(actual);
          var isUnexpectedException = !shouldThrow && actual && !expected;

          if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
            fail(actual, expected, 'Got unwanted exception' + message);
          }

          if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
            throw actual;
          }
        } // 11. Expected to throw an error:
        // assert.throws(block, Error_opt, message_opt);


        assert.throws = function (block,
        /*optional*/
        error,
        /*optional*/
        message) {
          _throws(true, block, error, message);
        }; // EXTENSION! This is annoying to write outside this module.


        assert.doesNotThrow = function (block,
        /*optional*/
        error,
        /*optional*/
        message) {
          _throws(false, block, error, message);
        };

        assert.ifError = function (err) {
          if (err) throw err;
        };

        var objectKeys = Object.keys || function (obj) {
          var keys = [];

          for (var key in obj) {
            if (hasOwn.call(obj, key)) keys.push(key);
          }

          return keys;
        };
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(5));
      /***/
    },
    /* 18 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        // Declare internals
        var internals = {};

        exports.escapeJavaScript = function (input) {
          if (!input) {
            return '';
          }

          var escaped = '';

          for (var i = 0; i < input.length; ++i) {
            var charCode = input.charCodeAt(i);

            if (internals.isSafe(charCode)) {
              escaped += input[i];
            } else {
              escaped += internals.escapeJavaScriptChar(charCode);
            }
          }

          return escaped;
        };

        exports.escapeHtml = function (input) {
          if (!input) {
            return '';
          }

          var escaped = '';

          for (var i = 0; i < input.length; ++i) {
            var charCode = input.charCodeAt(i);

            if (internals.isSafe(charCode)) {
              escaped += input[i];
            } else {
              escaped += internals.escapeHtmlChar(charCode);
            }
          }

          return escaped;
        };

        exports.escapeJson = function (input) {
          if (!input) {
            return '';
          }

          var lessThan = 0x3C;
          var greaterThan = 0x3E;
          var andSymbol = 0x26;
          var lineSeperator = 0x2028; // replace method

          var charCode = void 0;
          return input.replace(/[<>&\u2028\u2029]/g, function (match) {
            charCode = match.charCodeAt(0);

            if (charCode === lessThan) {
              return '\\u003c';
            } else if (charCode === greaterThan) {
              return '\\u003e';
            } else if (charCode === andSymbol) {
              return '\\u0026';
            } else if (charCode === lineSeperator) {
              return '\\u2028';
            }

            return '\\u2029';
          });
        };

        internals.escapeJavaScriptChar = function (charCode) {
          if (charCode >= 256) {
            return '\\u' + internals.padLeft('' + charCode, 4);
          }

          var hexValue = Buffer.from(String.fromCharCode(charCode), 'ascii').toString('hex');
          return '\\x' + internals.padLeft(hexValue, 2);
        };

        internals.escapeHtmlChar = function (charCode) {
          var namedEscape = internals.namedHtml[charCode];

          if (typeof namedEscape !== 'undefined') {
            return namedEscape;
          }

          if (charCode >= 256) {
            return '&#' + charCode + ';';
          }

          var hexValue = Buffer.from(String.fromCharCode(charCode), 'ascii').toString('hex');
          return '&#x' + internals.padLeft(hexValue, 2) + ';';
        };

        internals.padLeft = function (str, len) {
          while (str.length < len) {
            str = '0' + str;
          }

          return str;
        };

        internals.isSafe = function (charCode) {
          return typeof internals.safeCharCodes[charCode] !== 'undefined';
        };

        internals.namedHtml = {
          '38': '&amp;',
          '60': '&lt;',
          '62': '&gt;',
          '34': '&quot;',
          '160': '&nbsp;',
          '162': '&cent;',
          '163': '&pound;',
          '164': '&curren;',
          '169': '&copy;',
          '174': '&reg;'
        };

        internals.safeCharCodes = function () {
          var safe = {};

          for (var i = 32; i < 123; ++i) {
            if (i >= 97 || // a-z
            i >= 65 && i <= 90 || // A-Z
            i >= 48 && i <= 57 || // 0-9
            i === 32 || // space
            i === 46 || // .
            i === 44 || // ,
            i === 45 || // -
            i === 58 || // :
            i === 95) {
              // _
              safe[i] = null;
            }
          }

          return safe;
        }();
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(3).Buffer);
      /***/
    },
    /* 19 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        // Load modules
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
          return typeof obj;
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };

        var Punycode = __webpack_require__(38); // Declare internals


        var internals = {
          hasOwn: Object.prototype.hasOwnProperty,
          indexOf: Array.prototype.indexOf,
          defaultThreshold: 16,
          maxIPv6Groups: 8,
          categories: {
            valid: 1,
            dnsWarn: 7,
            rfc5321: 15,
            cfws: 31,
            deprecated: 63,
            rfc5322: 127,
            error: 255
          },
          diagnoses: {
            // Address is valid
            valid: 0,
            // Address is valid for SMTP but has unusual elements
            rfc5321TLD: 9,
            rfc5321TLDNumeric: 10,
            rfc5321QuotedString: 11,
            rfc5321AddressLiteral: 12,
            // Address is valid for message, but must be modified for envelope
            cfwsComment: 17,
            cfwsFWS: 18,
            // Address contains non-ASCII when the allowUnicode option is false
            // Has to be > internals.defaultThreshold so that it's rejected
            // without an explicit errorLevel:
            undesiredNonAscii: 25,
            // Address contains deprecated elements, but may still be valid in some contexts
            deprecatedLocalPart: 33,
            deprecatedFWS: 34,
            deprecatedQTEXT: 35,
            deprecatedQP: 36,
            deprecatedComment: 37,
            deprecatedCTEXT: 38,
            deprecatedIPv6: 39,
            deprecatedCFWSNearAt: 49,
            // Address is only valid according to broad definition in RFC 5322, but is otherwise invalid
            rfc5322Domain: 65,
            rfc5322TooLong: 66,
            rfc5322LocalTooLong: 67,
            rfc5322DomainTooLong: 68,
            rfc5322LabelTooLong: 69,
            rfc5322DomainLiteral: 70,
            rfc5322DomainLiteralOBSDText: 71,
            rfc5322IPv6GroupCount: 72,
            rfc5322IPv62x2xColon: 73,
            rfc5322IPv6BadCharacter: 74,
            rfc5322IPv6MaxGroups: 75,
            rfc5322IPv6ColonStart: 76,
            rfc5322IPv6ColonEnd: 77,
            // Address is invalid for any purpose
            errExpectingDTEXT: 129,
            errNoLocalPart: 130,
            errNoDomain: 131,
            errConsecutiveDots: 132,
            errATEXTAfterCFWS: 133,
            errATEXTAfterQS: 134,
            errATEXTAfterDomainLiteral: 135,
            errExpectingQPair: 136,
            errExpectingATEXT: 137,
            errExpectingQTEXT: 138,
            errExpectingCTEXT: 139,
            errBackslashEnd: 140,
            errDotStart: 141,
            errDotEnd: 142,
            errDomainHyphenStart: 143,
            errDomainHyphenEnd: 144,
            errUnclosedQuotedString: 145,
            errUnclosedComment: 146,
            errUnclosedDomainLiteral: 147,
            errFWSCRLFx2: 148,
            errFWSCRLFEnd: 149,
            errCRNoLF: 150,
            errUnknownTLD: 160,
            errDomainTooShort: 161
          },
          components: {
            localpart: 0,
            domain: 1,
            literal: 2,
            contextComment: 3,
            contextFWS: 4,
            contextQuotedString: 5,
            contextQuotedPair: 6
          }
        };

        internals.specials = function () {
          var specials = '()<>[]:;@\\,."'; // US-ASCII visible characters not valid for atext (http://tools.ietf.org/html/rfc5322#section-3.2.3)

          var lookup = new Array(0x100);
          lookup.fill(false);

          for (var i = 0; i < specials.length; ++i) {
            lookup[specials.codePointAt(i)] = true;
          }

          return function (code) {
            return lookup[code];
          };
        }();

        internals.c0Controls = function () {
          var lookup = new Array(0x100);
          lookup.fill(false); // add C0 control characters

          for (var i = 0; i < 33; ++i) {
            lookup[i] = true;
          }

          return function (code) {
            return lookup[code];
          };
        }();

        internals.c1Controls = function () {
          var lookup = new Array(0x100);
          lookup.fill(false); // add C1 control characters

          for (var i = 127; i < 160; ++i) {
            lookup[i] = true;
          }

          return function (code) {
            return lookup[code];
          };
        }();

        internals.regex = {
          ipV4: /\b(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
          ipV6: /^[a-fA-F\d]{0,4}$/
        };
        internals.normalizeSupportsNul = '\0'.normalize('NFC') === '\0'; // $lab:coverage:off$

        internals.nulNormalize = function (email) {
          return email.split('\0').map(function (part) {
            return part.normalize('NFC');
          }).join('\0');
        }; // $lab:coverage:on$


        internals.normalize = function (email) {
          // $lab:coverage:off$
          if (!internals.normalizeSupportsNul && email.indexOf('\0') >= 0) {
            return internals.nulNormalize(email);
          } // $lab:coverage:on$


          return email.normalize('NFC');
        };

        internals.checkIpV6 = function (items) {
          return items.every(function (value) {
            return internals.regex.ipV6.test(value);
          });
        };

        internals.validDomain = function (tldAtom, options) {
          if (options.tldBlacklist) {
            if (Array.isArray(options.tldBlacklist)) {
              return internals.indexOf.call(options.tldBlacklist, tldAtom) === -1;
            }

            return !internals.hasOwn.call(options.tldBlacklist, tldAtom);
          }

          if (Array.isArray(options.tldWhitelist)) {
            return internals.indexOf.call(options.tldWhitelist, tldAtom) !== -1;
          }

          return internals.hasOwn.call(options.tldWhitelist, tldAtom);
        };
        /**
         * Check that an email address conforms to RFCs 5321, 5322, 6530 and others
         *
         * We distinguish clearly between a Mailbox as defined by RFC 5321 and an
         * addr-spec as defined by RFC 5322. Depending on the context, either can be
         * regarded as a valid email address. The RFC 5321 Mailbox specification is
         * more restrictive (comments, white space and obsolete forms are not allowed).
         *
         * @param {string} email The email address to check. See README for specifics.
         * @param {Object} options The (optional) options:
         *   {*} errorLevel Determines the boundary between valid and invalid
         *     addresses.
         *   {*} tldBlacklist The set of domains to consider invalid.
         *   {*} tldWhitelist The set of domains to consider valid.
         *   {*} allowUnicode Whether to allow non-ASCII characters, defaults to true.
         *   {*} minDomainAtoms The minimum number of domain atoms which must be present
         *     for the address to be valid.
         * @param {function(number|boolean)} callback The (optional) callback handler.
         * @return {*}
         */


        exports.validate = internals.validate = function (email, options, callback) {
          options = options || {};
          email = internals.normalize(email); // The callback function is deprecated.
          // $lab:coverage:off$

          if (typeof options === 'function') {
            callback = options;
            options = {};
          }

          if (typeof callback !== 'function') {
            callback = null;
          } // $lab:coverage:on$


          var diagnose = void 0;
          var threshold = void 0;

          if (typeof options.errorLevel === 'number') {
            diagnose = true;
            threshold = options.errorLevel;
          } else {
            diagnose = !!options.errorLevel;
            threshold = internals.diagnoses.valid;
          }

          if (options.tldWhitelist) {
            if (typeof options.tldWhitelist === 'string') {
              options.tldWhitelist = [options.tldWhitelist];
            } else if (_typeof(options.tldWhitelist) !== 'object') {
              throw new TypeError('expected array or object tldWhitelist');
            }
          }

          if (options.tldBlacklist) {
            if (typeof options.tldBlacklist === 'string') {
              options.tldBlacklist = [options.tldBlacklist];
            } else if (_typeof(options.tldBlacklist) !== 'object') {
              throw new TypeError('expected array or object tldBlacklist');
            }
          }

          if (options.minDomainAtoms && (options.minDomainAtoms !== (+options.minDomainAtoms | 0) || options.minDomainAtoms < 0)) {
            throw new TypeError('expected positive integer minDomainAtoms');
          }

          var maxResult = internals.diagnoses.valid;

          var updateResult = function updateResult(value) {
            if (value > maxResult) {
              maxResult = value;
            }
          };

          var allowUnicode = options.allowUnicode === undefined || !!options.allowUnicode;

          if (!allowUnicode && /[^\x00-\x7f]/.test(email)) {
            updateResult(internals.diagnoses.undesiredNonAscii);
          }

          var context = {
            now: internals.components.localpart,
            prev: internals.components.localpart,
            stack: [internals.components.localpart]
          };
          var prevToken = '';
          var parseData = {
            local: '',
            domain: ''
          };
          var atomData = {
            locals: [''],
            domains: ['']
          };
          var elementCount = 0;
          var elementLength = 0;
          var crlfCount = 0;
          var charCode = void 0;
          var hyphenFlag = false;
          var assertEnd = false;
          var emailLength = email.length;
          var token = void 0; // Token is used outside the loop, must declare similarly

          for (var i = 0; i < emailLength; i += token.length) {
            // Utilize codepoints to account for Unicode surrogate pairs
            token = String.fromCodePoint(email.codePointAt(i));

            switch (context.now) {
              // Local-part
              case internals.components.localpart:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   local-part      =   dot-atom / quoted-string / obs-local-part
                //
                //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
                //
                //   dot-atom-text   =   1*atext *("." 1*atext)
                //
                //   quoted-string   =   [CFWS]
                //                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                //                       [CFWS]
                //
                //   obs-local-part  =   word *("." word)
                //
                //   word            =   atom / quoted-string
                //
                //   atom            =   [CFWS] 1*atext [CFWS]
                switch (token) {
                  // Comment
                  case '(':
                    if (elementLength === 0) {
                      // Comments are OK at the beginning of an element
                      updateResult(elementCount === 0 ? internals.diagnoses.cfwsComment : internals.diagnoses.deprecatedComment);
                    } else {
                      updateResult(internals.diagnoses.cfwsComment); // Cannot start a comment in an element, should be end

                      assertEnd = true;
                    }

                    context.stack.push(context.now);
                    context.now = internals.components.contextComment;
                    break;
                  // Next dot-atom element

                  case '.':
                    if (elementLength === 0) {
                      // Another dot, already?
                      updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);
                    } else {
                      // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
                      if (assertEnd) {
                        updateResult(internals.diagnoses.deprecatedLocalPart);
                      } // CFWS & quoted strings are OK again now we're at the beginning of an element (although they are obsolete forms)


                      assertEnd = false;
                      elementLength = 0;
                      ++elementCount;
                      parseData.local += token;
                      atomData.locals[elementCount] = '';
                    }

                    break;
                  // Quoted string

                  case '"':
                    if (elementLength === 0) {
                      // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
                      updateResult(elementCount === 0 ? internals.diagnoses.rfc5321QuotedString : internals.diagnoses.deprecatedLocalPart);
                      parseData.local += token;
                      atomData.locals[elementCount] += token;
                      elementLength += Buffer.byteLength(token, 'utf8'); // Quoted string must be the entire element

                      assertEnd = true;
                      context.stack.push(context.now);
                      context.now = internals.components.contextQuotedString;
                    } else {
                      updateResult(internals.diagnoses.errExpectingATEXT);
                    }

                    break;
                  // Folding white space

                  case '\r':
                    if (emailLength === ++i || email[i] !== '\n') {
                      // Fatal error
                      updateResult(internals.diagnoses.errCRNoLF);
                      break;
                    }

                  // Fallthrough

                  case ' ':
                  case '\t':
                    if (elementLength === 0) {
                      updateResult(elementCount === 0 ? internals.diagnoses.cfwsFWS : internals.diagnoses.deprecatedFWS);
                    } else {
                      // We can't start FWS in the middle of an element, better be end
                      assertEnd = true;
                    }

                    context.stack.push(context.now);
                    context.now = internals.components.contextFWS;
                    prevToken = token;
                    break;

                  case '@':
                    // At this point we should have a valid local-part
                    // $lab:coverage:off$
                    if (context.stack.length !== 1) {
                      throw new Error('unexpected item on context stack');
                    } // $lab:coverage:on$


                    if (parseData.local.length === 0) {
                      // Fatal error
                      updateResult(internals.diagnoses.errNoLocalPart);
                    } else if (elementLength === 0) {
                      // Fatal error
                      updateResult(internals.diagnoses.errDotEnd);
                    } // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.1 the maximum total length of a user name or other local-part is 64
                    //    octets
                    else if (Buffer.byteLength(parseData.local, 'utf8') > 64) {
                        updateResult(internals.diagnoses.rfc5322LocalTooLong);
                      } // http://tools.ietf.org/html/rfc5322#section-3.4.1 comments and folding white space SHOULD NOT be used around "@" in the
                      //    addr-spec
                      //
                      // http://tools.ietf.org/html/rfc2119
                      // 4. SHOULD NOT this phrase, or the phrase "NOT RECOMMENDED" mean that there may exist valid reasons in particular
                      //    circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood
                      //    and the case carefully weighed before implementing any behavior described with this label.
                      else if (context.prev === internals.components.contextComment || context.prev === internals.components.contextFWS) {
                          updateResult(internals.diagnoses.deprecatedCFWSNearAt);
                        } // Clear everything down for the domain parsing


                    context.now = internals.components.domain;
                    context.stack[0] = internals.components.domain;
                    elementCount = 0;
                    elementLength = 0;
                    assertEnd = false; // CFWS can only appear at the end of the element

                    break;
                  // ATEXT

                  default:
                    // http://tools.ietf.org/html/rfc5322#section-3.2.3
                    //    atext = ALPHA / DIGIT / ; Printable US-ASCII
                    //            "!" / "#" /     ;  characters not including
                    //            "$" / "%" /     ;  specials.  Used for atoms.
                    //            "&" / "'" /
                    //            "*" / "+" /
                    //            "-" / "/" /
                    //            "=" / "?" /
                    //            "^" / "_" /
                    //            "`" / "{" /
                    //            "|" / "}" /
                    //            "~"
                    if (assertEnd) {
                      // We have encountered atext where it is no longer valid
                      switch (context.prev) {
                        case internals.components.contextComment:
                        case internals.components.contextFWS:
                          updateResult(internals.diagnoses.errATEXTAfterCFWS);
                          break;

                        case internals.components.contextQuotedString:
                          updateResult(internals.diagnoses.errATEXTAfterQS);
                          break;
                        // $lab:coverage:off$

                        default:
                          throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);
                        // $lab:coverage:on$
                      }
                    } else {
                      context.prev = context.now;
                      charCode = token.codePointAt(0); // Especially if charCode == 10

                      if (internals.specials(charCode) || internals.c0Controls(charCode) || internals.c1Controls(charCode)) {
                        // Fatal error
                        updateResult(internals.diagnoses.errExpectingATEXT);
                      }

                      parseData.local += token;
                      atomData.locals[elementCount] += token;
                      elementLength += Buffer.byteLength(token, 'utf8');
                    }

                }

                break;

              case internals.components.domain:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   domain          =   dot-atom / domain-literal / obs-domain
                //
                //   dot-atom        =   [CFWS] dot-atom-text [CFWS]
                //
                //   dot-atom-text   =   1*atext *("." 1*atext)
                //
                //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
                //
                //   dtext           =   %d33-90 /          ; Printable US-ASCII
                //                       %d94-126 /         ;  characters not including
                //                       obs-dtext          ;  "[", "]", or "\"
                //
                //   obs-domain      =   atom *("." atom)
                //
                //   atom            =   [CFWS] 1*atext [CFWS]
                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   Mailbox        = Local-part "@" ( Domain / address-literal )
                //
                //   Domain         = sub-domain *("." sub-domain)
                //
                //   address-literal  = "[" ( IPv4-address-literal /
                //                    IPv6-address-literal /
                //                    General-address-literal ) "]"
                //                    ; See Section 4.1.3
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //      Note: A liberal syntax for the domain portion of addr-spec is
                //      given here.  However, the domain portion contains addressing
                //      information specified by and used in other protocols (e.g.,
                //      [RFC1034], [RFC1035], [RFC1123], [RFC5321]).  It is therefore
                //      incumbent upon implementations to conform to the syntax of
                //      addresses for the context in which they are used.
                //
                // is_email() author's note: it's not clear how to interpret this in
                // he context of a general email address validator. The conclusion I
                // have reached is this: "addressing information" must comply with
                // RFC 5321 (and in turn RFC 1035), anything that is "semantically
                // invisible" must comply only with RFC 5322.
                switch (token) {
                  // Comment
                  case '(':
                    if (elementLength === 0) {
                      // Comments at the start of the domain are deprecated in the text, comments at the start of a subdomain are obs-domain
                      // http://tools.ietf.org/html/rfc5322#section-3.4.1
                      updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedComment);
                    } else {
                      // We can't start a comment mid-element, better be at the end
                      assertEnd = true;
                      updateResult(internals.diagnoses.cfwsComment);
                    }

                    context.stack.push(context.now);
                    context.now = internals.components.contextComment;
                    break;
                  // Next dot-atom element

                  case '.':
                    var punycodeLength = Punycode.encode(atomData.domains[elementCount]).length;

                    if (elementLength === 0) {
                      // Another dot, already? Fatal error.
                      updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);
                    } else if (hyphenFlag) {
                      // Previous subdomain ended in a hyphen. Fatal error.
                      updateResult(internals.diagnoses.errDomainHyphenEnd);
                    } else if (punycodeLength > 63) {
                      // RFC 5890 specifies that domain labels that are encoded using the Punycode algorithm
                      // must adhere to the <= 63 octet requirement.
                      // This includes string prefixes from the Punycode algorithm.
                      //
                      // https://tools.ietf.org/html/rfc5890#section-2.3.2.1
                      // labels          63 octets or less
                      updateResult(internals.diagnoses.rfc5322LabelTooLong);
                    } // CFWS is OK again now we're at the beginning of an element (although
                    // it may be obsolete CFWS)


                    assertEnd = false;
                    elementLength = 0;
                    ++elementCount;
                    atomData.domains[elementCount] = '';
                    parseData.domain += token;
                    break;
                  // Domain literal

                  case '[':
                    if (parseData.domain.length === 0) {
                      // Domain literal must be the only component
                      assertEnd = true;
                      elementLength += Buffer.byteLength(token, 'utf8');
                      context.stack.push(context.now);
                      context.now = internals.components.literal;
                      parseData.domain += token;
                      atomData.domains[elementCount] += token;
                      parseData.literal = '';
                    } else {
                      // Fatal error
                      updateResult(internals.diagnoses.errExpectingATEXT);
                    }

                    break;
                  // Folding white space

                  case '\r':
                    if (emailLength === ++i || email[i] !== '\n') {
                      // Fatal error
                      updateResult(internals.diagnoses.errCRNoLF);
                      break;
                    }

                  // Fallthrough

                  case ' ':
                  case '\t':
                    if (elementLength === 0) {
                      updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedFWS);
                    } else {
                      // We can't start FWS in the middle of an element, so this better be the end
                      updateResult(internals.diagnoses.cfwsFWS);
                      assertEnd = true;
                    }

                    context.stack.push(context.now);
                    context.now = internals.components.contextFWS;
                    prevToken = token;
                    break;
                  // This must be ATEXT

                  default:
                    // RFC 5322 allows any atext...
                    // http://tools.ietf.org/html/rfc5322#section-3.2.3
                    //    atext = ALPHA / DIGIT / ; Printable US-ASCII
                    //            "!" / "#" /     ;  characters not including
                    //            "$" / "%" /     ;  specials.  Used for atoms.
                    //            "&" / "'" /
                    //            "*" / "+" /
                    //            "-" / "/" /
                    //            "=" / "?" /
                    //            "^" / "_" /
                    //            "`" / "{" /
                    //            "|" / "}" /
                    //            "~"
                    // But RFC 5321 only allows letter-digit-hyphen to comply with DNS rules
                    //   (RFCs 1034 & 1123)
                    // http://tools.ietf.org/html/rfc5321#section-4.1.2
                    //   sub-domain     = Let-dig [Ldh-str]
                    //
                    //   Let-dig        = ALPHA / DIGIT
                    //
                    //   Ldh-str        = *( ALPHA / DIGIT / "-" ) Let-dig
                    //
                    if (assertEnd) {
                      // We have encountered ATEXT where it is no longer valid
                      switch (context.prev) {
                        case internals.components.contextComment:
                        case internals.components.contextFWS:
                          updateResult(internals.diagnoses.errATEXTAfterCFWS);
                          break;

                        case internals.components.literal:
                          updateResult(internals.diagnoses.errATEXTAfterDomainLiteral);
                          break;
                        // $lab:coverage:off$

                        default:
                          throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);
                        // $lab:coverage:on$
                      }
                    }

                    charCode = token.codePointAt(0); // Assume this token isn't a hyphen unless we discover it is

                    hyphenFlag = false;

                    if (internals.specials(charCode) || internals.c0Controls(charCode) || internals.c1Controls(charCode)) {
                      // Fatal error
                      updateResult(internals.diagnoses.errExpectingATEXT);
                    } else if (token === '-') {
                      if (elementLength === 0) {
                        // Hyphens cannot be at the beginning of a subdomain, fatal error
                        updateResult(internals.diagnoses.errDomainHyphenStart);
                      }

                      hyphenFlag = true;
                    } // Check if it's a neither a number nor a latin/unicode letter
                    else if (charCode < 48 || charCode > 122 && charCode < 192 || charCode > 57 && charCode < 65 || charCode > 90 && charCode < 97) {
                        // This is not an RFC 5321 subdomain, but still OK by RFC 5322
                        updateResult(internals.diagnoses.rfc5322Domain);
                      }

                    parseData.domain += token;
                    atomData.domains[elementCount] += token;
                    elementLength += Buffer.byteLength(token, 'utf8');
                }

                break;
              // Domain literal

              case internals.components.literal:
                // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
                //
                //   dtext           =   %d33-90 /          ; Printable US-ASCII
                //                       %d94-126 /         ;  characters not including
                //                       obs-dtext          ;  "[", "]", or "\"
                //
                //   obs-dtext       =   obs-NO-WS-CTL / quoted-pair
                switch (token) {
                  // End of domain literal
                  case ']':
                    if (maxResult < internals.categories.deprecated) {
                      // Could be a valid RFC 5321 address literal, so let's check
                      // http://tools.ietf.org/html/rfc5321#section-4.1.2
                      //   address-literal  = "[" ( IPv4-address-literal /
                      //                    IPv6-address-literal /
                      //                    General-address-literal ) "]"
                      //                    ; See Section 4.1.3
                      //
                      // http://tools.ietf.org/html/rfc5321#section-4.1.3
                      //   IPv4-address-literal  = Snum 3("."  Snum)
                      //
                      //   IPv6-address-literal  = "IPv6:" IPv6-addr
                      //
                      //   General-address-literal  = Standardized-tag ":" 1*dcontent
                      //
                      //   Standardized-tag  = Ldh-str
                      //                     ; Standardized-tag MUST be specified in a
                      //                     ; Standards-Track RFC and registered with IANA
                      //
                      //   dcontent      = %d33-90 / ; Printable US-ASCII
                      //                 %d94-126 ; excl. "[", "\", "]"
                      //
                      //   Snum          = 1*3DIGIT
                      //                 ; representing a decimal integer
                      //                 ; value in the range 0 through 255
                      //
                      //   IPv6-addr     = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp
                      //
                      //   IPv6-hex      = 1*4HEXDIG
                      //
                      //   IPv6-full     = IPv6-hex 7(":" IPv6-hex)
                      //
                      //   IPv6-comp     = [IPv6-hex *5(":" IPv6-hex)] "::"
                      //                 [IPv6-hex *5(":" IPv6-hex)]
                      //                 ; The "::" represents at least 2 16-bit groups of
                      //                 ; zeros.  No more than 6 groups in addition to the
                      //                 ; "::" may be present.
                      //
                      //   IPv6v4-full   = IPv6-hex 5(":" IPv6-hex) ":" IPv4-address-literal
                      //
                      //   IPv6v4-comp   = [IPv6-hex *3(":" IPv6-hex)] "::"
                      //                 [IPv6-hex *3(":" IPv6-hex) ":"]
                      //                 IPv4-address-literal
                      //                 ; The "::" represents at least 2 16-bit groups of
                      //                 ; zeros.  No more than 4 groups in addition to the
                      //                 ; "::" and IPv4-address-literal may be present.
                      var index = -1;
                      var addressLiteral = parseData.literal;
                      var matchesIP = internals.regex.ipV4.exec(addressLiteral); // Maybe extract IPv4 part from the end of the address-literal

                      if (matchesIP) {
                        index = matchesIP.index;

                        if (index !== 0) {
                          // Convert IPv4 part to IPv6 format for futher testing
                          addressLiteral = addressLiteral.slice(0, index) + '0:0';
                        }
                      }

                      if (index === 0) {
                        // Nothing there except a valid IPv4 address, so...
                        updateResult(internals.diagnoses.rfc5321AddressLiteral);
                      } else if (addressLiteral.slice(0, 5).toLowerCase() !== 'ipv6:') {
                        updateResult(internals.diagnoses.rfc5322DomainLiteral);
                      } else {
                        var match = addressLiteral.slice(5);
                        var maxGroups = internals.maxIPv6Groups;
                        var groups = match.split(':');
                        index = match.indexOf('::');

                        if (!~index) {
                          // Need exactly the right number of groups
                          if (groups.length !== maxGroups) {
                            updateResult(internals.diagnoses.rfc5322IPv6GroupCount);
                          }
                        } else if (index !== match.lastIndexOf('::')) {
                          updateResult(internals.diagnoses.rfc5322IPv62x2xColon);
                        } else {
                          if (index === 0 || index === match.length - 2) {
                            // RFC 4291 allows :: at the start or end of an address with 7 other groups in addition
                            ++maxGroups;
                          }

                          if (groups.length > maxGroups) {
                            updateResult(internals.diagnoses.rfc5322IPv6MaxGroups);
                          } else if (groups.length === maxGroups) {
                            // Eliding a single "::"
                            updateResult(internals.diagnoses.deprecatedIPv6);
                          }
                        } // IPv6 testing strategy


                        if (match[0] === ':' && match[1] !== ':') {
                          updateResult(internals.diagnoses.rfc5322IPv6ColonStart);
                        } else if (match[match.length - 1] === ':' && match[match.length - 2] !== ':') {
                          updateResult(internals.diagnoses.rfc5322IPv6ColonEnd);
                        } else if (internals.checkIpV6(groups)) {
                          updateResult(internals.diagnoses.rfc5321AddressLiteral);
                        } else {
                          updateResult(internals.diagnoses.rfc5322IPv6BadCharacter);
                        }
                      }
                    } else {
                      updateResult(internals.diagnoses.rfc5322DomainLiteral);
                    }

                    parseData.domain += token;
                    atomData.domains[elementCount] += token;
                    elementLength += Buffer.byteLength(token, 'utf8');
                    context.prev = context.now;
                    context.now = context.stack.pop();
                    break;

                  case '\\':
                    updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);
                    context.stack.push(context.now);
                    context.now = internals.components.contextQuotedPair;
                    break;
                  // Folding white space

                  case '\r':
                    if (emailLength === ++i || email[i] !== '\n') {
                      updateResult(internals.diagnoses.errCRNoLF);
                      break;
                    }

                  // Fallthrough

                  case ' ':
                  case '\t':
                    updateResult(internals.diagnoses.cfwsFWS);
                    context.stack.push(context.now);
                    context.now = internals.components.contextFWS;
                    prevToken = token;
                    break;
                  // DTEXT

                  default:
                    // http://tools.ietf.org/html/rfc5322#section-3.4.1
                    //   dtext         =   %d33-90 /  ; Printable US-ASCII
                    //                     %d94-126 / ;  characters not including
                    //                     obs-dtext  ;  "[", "]", or "\"
                    //
                    //   obs-dtext     =   obs-NO-WS-CTL / quoted-pair
                    //
                    //   obs-NO-WS-CTL =   %d1-8 /    ; US-ASCII control
                    //                     %d11 /     ;  characters that do not
                    //                     %d12 /     ;  include the carriage
                    //                     %d14-31 /  ;  return, line feed, and
                    //                     %d127      ;  white space characters
                    charCode = token.codePointAt(0); // '\r', '\n', ' ', and '\t' have already been parsed above

                    if (charCode !== 127 && internals.c1Controls(charCode) || charCode === 0 || token === '[') {
                      // Fatal error
                      updateResult(internals.diagnoses.errExpectingDTEXT);
                      break;
                    } else if (internals.c0Controls(charCode) || charCode === 127) {
                      updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);
                    }

                    parseData.literal += token;
                    parseData.domain += token;
                    atomData.domains[elementCount] += token;
                    elementLength += Buffer.byteLength(token, 'utf8');
                }

                break;
              // Quoted string

              case internals.components.contextQuotedString:
                // http://tools.ietf.org/html/rfc5322#section-3.2.4
                //   quoted-string = [CFWS]
                //                   DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                //                   [CFWS]
                //
                //   qcontent      = qtext / quoted-pair
                switch (token) {
                  // Quoted pair
                  case '\\':
                    context.stack.push(context.now);
                    context.now = internals.components.contextQuotedPair;
                    break;
                  // Folding white space. Spaces are allowed as regular characters inside a quoted string - it's only FWS if we include '\t' or '\r\n'

                  case '\r':
                    if (emailLength === ++i || email[i] !== '\n') {
                      // Fatal error
                      updateResult(internals.diagnoses.errCRNoLF);
                      break;
                    }

                  // Fallthrough

                  case '\t':
                    // http://tools.ietf.org/html/rfc5322#section-3.2.2
                    //   Runs of FWS, comment, or CFWS that occur between lexical tokens in
                    //   a structured header field are semantically interpreted as a single
                    //   space character.
                    // http://tools.ietf.org/html/rfc5322#section-3.2.4
                    //   the CRLF in any FWS/CFWS that appears within the quoted-string [is]
                    //   semantically "invisible" and therefore not part of the
                    //   quoted-string
                    parseData.local += ' ';
                    atomData.locals[elementCount] += ' ';
                    elementLength += Buffer.byteLength(token, 'utf8');
                    updateResult(internals.diagnoses.cfwsFWS);
                    context.stack.push(context.now);
                    context.now = internals.components.contextFWS;
                    prevToken = token;
                    break;
                  // End of quoted string

                  case '"':
                    parseData.local += token;
                    atomData.locals[elementCount] += token;
                    elementLength += Buffer.byteLength(token, 'utf8');
                    context.prev = context.now;
                    context.now = context.stack.pop();
                    break;
                  // QTEXT

                  default:
                    // http://tools.ietf.org/html/rfc5322#section-3.2.4
                    //   qtext          =   %d33 /             ; Printable US-ASCII
                    //                      %d35-91 /          ;  characters not including
                    //                      %d93-126 /         ;  "\" or the quote character
                    //                      obs-qtext
                    //
                    //   obs-qtext      =   obs-NO-WS-CTL
                    //
                    //   obs-NO-WS-CTL  =   %d1-8 /            ; US-ASCII control
                    //                      %d11 /             ;  characters that do not
                    //                      %d12 /             ;  include the carriage
                    //                      %d14-31 /          ;  return, line feed, and
                    //                      %d127              ;  white space characters
                    charCode = token.codePointAt(0);

                    if (charCode !== 127 && internals.c1Controls(charCode) || charCode === 0 || charCode === 10) {
                      updateResult(internals.diagnoses.errExpectingQTEXT);
                    } else if (internals.c0Controls(charCode) || charCode === 127) {
                      updateResult(internals.diagnoses.deprecatedQTEXT);
                    }

                    parseData.local += token;
                    atomData.locals[elementCount] += token;
                    elementLength += Buffer.byteLength(token, 'utf8');
                } // http://tools.ietf.org/html/rfc5322#section-3.4.1
                //   If the string can be represented as a dot-atom (that is, it contains
                //   no characters other than atext characters or "." surrounded by atext
                //   characters), then the dot-atom form SHOULD be used and the quoted-
                //   string form SHOULD NOT be used.


                break;
              // Quoted pair

              case internals.components.contextQuotedPair:
                // http://tools.ietf.org/html/rfc5322#section-3.2.1
                //   quoted-pair     =   ("\" (VCHAR / WSP)) / obs-qp
                //
                //   VCHAR           =  %d33-126   ; visible (printing) characters
                //   WSP             =  SP / HTAB  ; white space
                //
                //   obs-qp          =   "\" (%d0 / obs-NO-WS-CTL / LF / CR)
                //
                //   obs-NO-WS-CTL   =   %d1-8 /   ; US-ASCII control
                //                       %d11 /    ;  characters that do not
                //                       %d12 /    ;  include the carriage
                //                       %d14-31 / ;  return, line feed, and
                //                       %d127     ;  white space characters
                //
                // i.e. obs-qp       =  "\" (%d0-8, %d10-31 / %d127)
                charCode = token.codePointAt(0);

                if (charCode !== 127 && internals.c1Controls(charCode)) {
                  // Fatal error
                  updateResult(internals.diagnoses.errExpectingQPair);
                } else if (charCode < 31 && charCode !== 9 || charCode === 127) {
                  // ' ' and '\t' are allowed
                  updateResult(internals.diagnoses.deprecatedQP);
                } // At this point we know where this qpair occurred so we could check to see if the character actually needed to be quoted at all.
                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   the sending system SHOULD transmit the form that uses the minimum quoting possible.


                context.prev = context.now; // End of qpair

                context.now = context.stack.pop();
                var escapeToken = '\\' + token;

                switch (context.now) {
                  case internals.components.contextComment:
                    break;

                  case internals.components.contextQuotedString:
                    parseData.local += escapeToken;
                    atomData.locals[elementCount] += escapeToken; // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash

                    elementLength += 2;
                    break;

                  case internals.components.literal:
                    parseData.domain += escapeToken;
                    atomData.domains[elementCount] += escapeToken; // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash

                    elementLength += 2;
                    break;
                  // $lab:coverage:off$

                  default:
                    throw new Error('quoted pair logic invoked in an invalid context: ' + context.now);
                  // $lab:coverage:on$
                }

                break;
              // Comment

              case internals.components.contextComment:
                // http://tools.ietf.org/html/rfc5322#section-3.2.2
                //   comment  = "(" *([FWS] ccontent) [FWS] ")"
                //
                //   ccontent = ctext / quoted-pair / comment
                switch (token) {
                  // Nested comment
                  case '(':
                    // Nested comments are ok
                    context.stack.push(context.now);
                    context.now = internals.components.contextComment;
                    break;
                  // End of comment

                  case ')':
                    context.prev = context.now;
                    context.now = context.stack.pop();
                    break;
                  // Quoted pair

                  case '\\':
                    context.stack.push(context.now);
                    context.now = internals.components.contextQuotedPair;
                    break;
                  // Folding white space

                  case '\r':
                    if (emailLength === ++i || email[i] !== '\n') {
                      // Fatal error
                      updateResult(internals.diagnoses.errCRNoLF);
                      break;
                    }

                  // Fallthrough

                  case ' ':
                  case '\t':
                    updateResult(internals.diagnoses.cfwsFWS);
                    context.stack.push(context.now);
                    context.now = internals.components.contextFWS;
                    prevToken = token;
                    break;
                  // CTEXT

                  default:
                    // http://tools.ietf.org/html/rfc5322#section-3.2.3
                    //   ctext         = %d33-39 /  ; Printable US-ASCII
                    //                   %d42-91 /  ;  characters not including
                    //                   %d93-126 / ;  "(", ")", or "\"
                    //                   obs-ctext
                    //
                    //   obs-ctext     = obs-NO-WS-CTL
                    //
                    //   obs-NO-WS-CTL = %d1-8 /    ; US-ASCII control
                    //                   %d11 /     ;  characters that do not
                    //                   %d12 /     ;  include the carriage
                    //                   %d14-31 /  ;  return, line feed, and
                    //                   %d127      ;  white space characters
                    charCode = token.codePointAt(0);

                    if (charCode === 0 || charCode === 10 || charCode !== 127 && internals.c1Controls(charCode)) {
                      // Fatal error
                      updateResult(internals.diagnoses.errExpectingCTEXT);
                      break;
                    } else if (internals.c0Controls(charCode) || charCode === 127) {
                      updateResult(internals.diagnoses.deprecatedCTEXT);
                    }

                }

                break;
              // Folding white space

              case internals.components.contextFWS:
                // http://tools.ietf.org/html/rfc5322#section-3.2.2
                //   FWS     =   ([*WSP CRLF] 1*WSP) /  obs-FWS
                //                                   ; Folding white space
                // But note the erratum:
                // http://www.rfc-editor.org/errata_search.php?rfc=5322&eid=1908:
                //   In the obsolete syntax, any amount of folding white space MAY be
                //   inserted where the obs-FWS rule is allowed.  This creates the
                //   possibility of having two consecutive "folds" in a line, and
                //   therefore the possibility that a line which makes up a folded header
                //   field could be composed entirely of white space.
                //
                //   obs-FWS =   1*([CRLF] WSP)
                if (prevToken === '\r') {
                  if (token === '\r') {
                    // Fatal error
                    updateResult(internals.diagnoses.errFWSCRLFx2);
                    break;
                  }

                  if (++crlfCount > 1) {
                    // Multiple folds => obsolete FWS
                    updateResult(internals.diagnoses.deprecatedFWS);
                  } else {
                    crlfCount = 1;
                  }
                }

                switch (token) {
                  case '\r':
                    if (emailLength === ++i || email[i] !== '\n') {
                      // Fatal error
                      updateResult(internals.diagnoses.errCRNoLF);
                    }

                    break;

                  case ' ':
                  case '\t':
                    break;

                  default:
                    if (prevToken === '\r') {
                      // Fatal error
                      updateResult(internals.diagnoses.errFWSCRLFEnd);
                    }

                    crlfCount = 0; // End of FWS

                    context.prev = context.now;
                    context.now = context.stack.pop(); // Look at this token again in the parent context

                    --i;
                }

                prevToken = token;
                break;
              // Unexpected context
              // $lab:coverage:off$

              default:
                throw new Error('unknown context: ' + context.now);
              // $lab:coverage:on$
            } // Primary state machine


            if (maxResult > internals.categories.rfc5322) {
              // Fatal error, no point continuing
              break;
            }
          } // Token loop
          // Check for errors


          if (maxResult < internals.categories.rfc5322) {
            var _punycodeLength = Punycode.encode(parseData.domain).length; // Fatal errors

            if (context.now === internals.components.contextQuotedString) {
              updateResult(internals.diagnoses.errUnclosedQuotedString);
            } else if (context.now === internals.components.contextQuotedPair) {
              updateResult(internals.diagnoses.errBackslashEnd);
            } else if (context.now === internals.components.contextComment) {
              updateResult(internals.diagnoses.errUnclosedComment);
            } else if (context.now === internals.components.literal) {
              updateResult(internals.diagnoses.errUnclosedDomainLiteral);
            } else if (token === '\r') {
              updateResult(internals.diagnoses.errFWSCRLFEnd);
            } else if (parseData.domain.length === 0) {
              updateResult(internals.diagnoses.errNoDomain);
            } else if (elementLength === 0) {
              updateResult(internals.diagnoses.errDotEnd);
            } else if (hyphenFlag) {
              updateResult(internals.diagnoses.errDomainHyphenEnd);
            } // Other errors
            else if (_punycodeLength > 255) {
                // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.2
                //   The maximum total length of a domain name or number is 255 octets.
                updateResult(internals.diagnoses.rfc5322DomainTooLong);
              } else if (Buffer.byteLength(parseData.local, 'utf8') + _punycodeLength +
              /* '@' */
              1 > 254) {
                // http://tools.ietf.org/html/rfc5321#section-4.1.2
                //   Forward-path   = Path
                //
                //   Path           = "<" [ A-d-l ":" ] Mailbox ">"
                //
                // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.3
                //   The maximum total length of a reverse-path or forward-path is 256 octets (including the punctuation and element separators).
                //
                // Thus, even without (obsolete) routing information, the Mailbox can only be 254 characters long. This is confirmed by this verified
                // erratum to RFC 3696:
                //
                // http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690
                //   However, there is a restriction in RFC 2821 on the length of an address in MAIL and RCPT commands of 254 characters.  Since
                //   addresses that do not fit in those fields are not normally useful, the upper limit on address lengths should normally be considered
                //   to be 254.
                updateResult(internals.diagnoses.rfc5322TooLong);
              } else if (elementLength > 63) {
                // http://tools.ietf.org/html/rfc1035#section-2.3.4
                // labels   63 octets or less
                updateResult(internals.diagnoses.rfc5322LabelTooLong);
              } else if (options.minDomainAtoms && atomData.domains.length < options.minDomainAtoms) {
                updateResult(internals.diagnoses.errDomainTooShort);
              } else if (options.tldWhitelist || options.tldBlacklist) {
                var tldAtom = atomData.domains[elementCount];

                if (!internals.validDomain(tldAtom, options)) {
                  updateResult(internals.diagnoses.errUnknownTLD);
                }
              }
          } // Check for errors
          // Finish


          if (maxResult < internals.categories.dnsWarn) {
            // Per RFC 5321, domain atoms are limited to letter-digit-hyphen, so we only need to check code <= 57 to check for a digit
            var code = atomData.domains[elementCount].codePointAt(0);

            if (code <= 57) {
              updateResult(internals.diagnoses.rfc5321TLDNumeric);
            }
          }

          if (maxResult < threshold) {
            maxResult = internals.diagnoses.valid;
          }

          var finishResult = diagnose ? maxResult : maxResult < internals.defaultThreshold; // $lab:coverage:off$

          if (callback) {
            callback(finishResult);
          } // $lab:coverage:on$


          return finishResult;
        };

        exports.diagnoses = internals.validate.diagnoses = function () {
          var diag = {};
          var keys = Object.keys(internals.diagnoses);

          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            diag[key] = internals.diagnoses[key];
          }

          return diag;
        }();

        exports.normalize = internals.normalize;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(3).Buffer);
      /***/
    },
    /* 20 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules
      // Declare internals

      var internals = {};
      exports.errors = {
        root: 'value',
        key: '"{{!label}}" ',
        messages: {
          wrapArrays: true
        },
        any: {
          unknown: 'is not allowed',
          invalid: 'contains an invalid value',
          empty: 'is not allowed to be empty',
          required: 'is required',
          allowOnly: 'must be one of {{valids}}',
          default: 'threw an error when running default method'
        },
        alternatives: {
          base: 'not matching any of the allowed alternatives',
          child: null
        },
        array: {
          base: 'must be an array',
          includes: 'at position {{pos}} does not match any of the allowed types',
          includesSingle: 'single value of "{{!label}}" does not match any of the allowed types',
          includesOne: 'at position {{pos}} fails because {{reason}}',
          includesOneSingle: 'single value of "{{!label}}" fails because {{reason}}',
          includesRequiredUnknowns: 'does not contain {{unknownMisses}} required value(s)',
          includesRequiredKnowns: 'does not contain {{knownMisses}}',
          includesRequiredBoth: 'does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)',
          excludes: 'at position {{pos}} contains an excluded value',
          excludesSingle: 'single value of "{{!label}}" contains an excluded value',
          min: 'must contain at least {{limit}} items',
          max: 'must contain less than or equal to {{limit}} items',
          length: 'must contain {{limit}} items',
          ordered: 'at position {{pos}} fails because {{reason}}',
          orderedLength: 'at position {{pos}} fails because array must contain at most {{limit}} items',
          ref: 'references "{{ref}}" which is not a positive integer',
          sparse: 'must not be a sparse array',
          unique: 'position {{pos}} contains a duplicate value'
        },
        boolean: {
          base: 'must be a boolean'
        },
        binary: {
          base: 'must be a buffer or a string',
          min: 'must be at least {{limit}} bytes',
          max: 'must be less than or equal to {{limit}} bytes',
          length: 'must be {{limit}} bytes'
        },
        date: {
          base: 'must be a number of milliseconds or valid date string',
          format: 'must be a string with one of the following formats {{format}}',
          strict: 'must be a valid date',
          min: 'must be larger than or equal to "{{limit}}"',
          max: 'must be less than or equal to "{{limit}}"',
          less: 'must be less than "{{limit}}"',
          greater: 'must be greater than "{{limit}}"',
          isoDate: 'must be a valid ISO 8601 date',
          timestamp: {
            javascript: 'must be a valid timestamp or number of milliseconds',
            unix: 'must be a valid timestamp or number of seconds'
          },
          ref: 'references "{{ref}}" which is not a date'
        },
        function: {
          base: 'must be a Function',
          arity: 'must have an arity of {{n}}',
          minArity: 'must have an arity greater or equal to {{n}}',
          maxArity: 'must have an arity lesser or equal to {{n}}',
          ref: 'must be a Joi reference',
          class: 'must be a class'
        },
        lazy: {
          base: '!!schema error: lazy schema must be set',
          schema: '!!schema error: lazy schema function must return a schema'
        },
        object: {
          base: 'must be an object',
          child: '!!child "{{!child}}" fails because {{reason}}',
          min: 'must have at least {{limit}} children',
          max: 'must have less than or equal to {{limit}} children',
          length: 'must have {{limit}} children',
          allowUnknown: '!!"{{!child}}" is not allowed',
          with: '!!"{{mainWithLabel}}" missing required peer "{{peerWithLabel}}"',
          without: '!!"{{mainWithLabel}}" conflict with forbidden peer "{{peerWithLabel}}"',
          missing: 'must contain at least one of {{peersWithLabels}}',
          xor: 'contains a conflict between exclusive peers {{peersWithLabels}}',
          or: 'must contain at least one of {{peersWithLabels}}',
          and: 'contains {{presentWithLabels}} without its required peers {{missingWithLabels}}',
          nand: '!!"{{mainWithLabel}}" must not exist simultaneously with {{peersWithLabels}}',
          assert: '!!"{{ref}}" validation failed because "{{ref}}" failed to {{message}}',
          rename: {
            multiple: 'cannot rename child "{{from}}" because multiple renames are disabled and another key was already renamed to "{{to}}"',
            override: 'cannot rename child "{{from}}" because override is disabled and target "{{to}}" exists',
            regex: {
              multiple: 'cannot rename children {{from}} because multiple renames are disabled and another key was already renamed to "{{to}}"',
              override: 'cannot rename children {{from}} because override is disabled and target "{{to}}" exists'
            }
          },
          type: 'must be an instance of "{{type}}"',
          schema: 'must be a Joi instance'
        },
        number: {
          base: 'must be a number',
          min: 'must be larger than or equal to {{limit}}',
          max: 'must be less than or equal to {{limit}}',
          less: 'must be less than {{limit}}',
          greater: 'must be greater than {{limit}}',
          float: 'must be a float or double',
          integer: 'must be an integer',
          negative: 'must be a negative number',
          positive: 'must be a positive number',
          precision: 'must have no more than {{limit}} decimal places',
          ref: 'references "{{ref}}" which is not a number',
          multiple: 'must be a multiple of {{multiple}}',
          port: 'must be a valid port'
        },
        string: {
          base: 'must be a string',
          min: 'length must be at least {{limit}} characters long',
          max: 'length must be less than or equal to {{limit}} characters long',
          length: 'length must be {{limit}} characters long',
          alphanum: 'must only contain alpha-numeric characters',
          token: 'must only contain alpha-numeric and underscore characters',
          regex: {
            base: 'with value "{{!value}}" fails to match the required pattern: {{pattern}}',
            name: 'with value "{{!value}}" fails to match the {{name}} pattern',
            invert: {
              base: 'with value "{{!value}}" matches the inverted pattern: {{pattern}}',
              name: 'with value "{{!value}}" matches the inverted {{name}} pattern'
            }
          },
          email: 'must be a valid email',
          uri: 'must be a valid uri',
          uriRelativeOnly: 'must be a valid relative uri',
          uriCustomScheme: 'must be a valid uri with a scheme matching the {{scheme}} pattern',
          isoDate: 'must be a valid ISO 8601 date',
          guid: 'must be a valid GUID',
          hex: 'must only contain hexadecimal characters',
          hexAlign: 'hex decoded representation must be byte aligned',
          base64: 'must be a valid base64 string',
          hostname: 'must be a valid hostname',
          normalize: 'must be unicode normalized in the {{form}} form',
          lowercase: 'must only contain lowercase characters',
          uppercase: 'must only contain uppercase characters',
          trim: 'must not have leading or trailing whitespace',
          creditCard: 'must be a credit card',
          ref: 'references "{{ref}}" which is not a number',
          ip: 'must be a valid ip address with a {{cidr}} CIDR',
          ipVersion: 'must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR'
        }
      };
      /***/
    },
    /* 21 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var Joi = __webpack_require__(8); // Declare internals


      var internals = {};
      exports.options = Joi.object({
        abortEarly: Joi.boolean(),
        convert: Joi.boolean(),
        allowUnknown: Joi.boolean(),
        skipFunctions: Joi.boolean(),
        stripUnknown: [Joi.boolean(), Joi.object({
          arrays: Joi.boolean(),
          objects: Joi.boolean()
        }).or('arrays', 'objects')],
        language: Joi.object(),
        presence: Joi.string().only('required', 'optional', 'forbidden', 'ignore'),
        raw: Joi.boolean(),
        context: Joi.object(),
        strip: Joi.boolean(),
        noDefaults: Joi.boolean(),
        escapeHtml: Joi.boolean()
      }).strict();
      /***/
    },
    /* 22 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Any = __webpack_require__(2);

      var Cast = __webpack_require__(4);

      var Ref = __webpack_require__(1);

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {};

      internals.fastSplice = function (arr, i) {
        var pos = i;

        while (pos < arr.length) {
          arr[pos++] = arr[pos];
        }

        --arr.length;
      };

      internals.Array = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'array';
          _this._inner.items = [];
          _this._inner.ordereds = [];
          _this._inner.inclusions = [];
          _this._inner.exclusions = [];
          _this._inner.requireds = [];
          _this._flags.sparse = false;
          return _this;
        }

        _class.prototype._base = function _base(value, state, options) {
          var result = {
            value: value
          };

          if (typeof value === 'string' && options.convert) {
            internals.safeParse(value, result);
          }

          var isArray = Array.isArray(result.value);
          var wasArray = isArray;

          if (options.convert && this._flags.single && !isArray) {
            result.value = [result.value];
            isArray = true;
          }

          if (!isArray) {
            result.errors = this.createError('array.base', null, state, options);
            return result;
          }

          if (this._inner.inclusions.length || this._inner.exclusions.length || this._inner.requireds.length || this._inner.ordereds.length || !this._flags.sparse) {
            // Clone the array so that we don't modify the original
            if (wasArray) {
              result.value = result.value.slice(0);
            }

            result.errors = this._checkItems.call(this, result.value, wasArray, state, options);

            if (result.errors && wasArray && options.convert && this._flags.single) {
              // Attempt a 2nd pass by putting the array inside one.
              var previousErrors = result.errors;
              result.value = [result.value];
              result.errors = this._checkItems.call(this, result.value, wasArray, state, options);

              if (result.errors) {
                // Restore previous errors and value since this didn't validate either.
                result.errors = previousErrors;
                result.value = result.value[0];
              }
            }
          }

          return result;
        };

        _class.prototype._checkItems = function _checkItems(items, wasArray, state, options) {
          var errors = [];
          var errored = void 0;

          var requireds = this._inner.requireds.slice();

          var ordereds = this._inner.ordereds.slice();

          var inclusions = this._inner.inclusions.concat(requireds);

          var il = items.length;

          for (var i = 0; i < il; ++i) {
            errored = false;
            var item = items[i];
            var isValid = false;
            var key = wasArray ? i : state.key;
            var path = wasArray ? state.path.concat(i) : state.path;
            var localState = {
              key: key,
              path: path,
              parent: state.parent,
              reference: state.reference
            };
            var res = void 0; // Sparse

            if (!this._flags.sparse && item === undefined) {
              errors.push(this.createError('array.sparse', null, {
                key: state.key,
                path: localState.path,
                pos: i
              }, options));

              if (options.abortEarly) {
                return errors;
              }

              ordereds.shift();
              continue;
            } // Exclusions


            for (var j = 0; j < this._inner.exclusions.length; ++j) {
              res = this._inner.exclusions[j]._validate(item, localState, {}); // Not passing options to use defaults

              if (!res.errors) {
                errors.push(this.createError(wasArray ? 'array.excludes' : 'array.excludesSingle', {
                  pos: i,
                  value: item
                }, {
                  key: state.key,
                  path: localState.path
                }, options));
                errored = true;

                if (options.abortEarly) {
                  return errors;
                }

                ordereds.shift();
                break;
              }
            }

            if (errored) {
              continue;
            } // Ordered


            if (this._inner.ordereds.length) {
              if (ordereds.length > 0) {
                var ordered = ordereds.shift();
                res = ordered._validate(item, localState, options);

                if (!res.errors) {
                  if (ordered._flags.strip) {
                    internals.fastSplice(items, i);
                    --i;
                    --il;
                  } else if (!this._flags.sparse && res.value === undefined) {
                    errors.push(this.createError('array.sparse', null, {
                      key: state.key,
                      path: localState.path,
                      pos: i
                    }, options));

                    if (options.abortEarly) {
                      return errors;
                    }

                    continue;
                  } else {
                    items[i] = res.value;
                  }
                } else {
                  errors.push(this.createError('array.ordered', {
                    pos: i,
                    reason: res.errors,
                    value: item
                  }, {
                    key: state.key,
                    path: localState.path
                  }, options));

                  if (options.abortEarly) {
                    return errors;
                  }
                }

                continue;
              } else if (!this._inner.items.length) {
                errors.push(this.createError('array.orderedLength', {
                  pos: i,
                  limit: this._inner.ordereds.length
                }, {
                  key: state.key,
                  path: localState.path
                }, options));

                if (options.abortEarly) {
                  return errors;
                }

                continue;
              }
            } // Requireds


            var requiredChecks = [];
            var jl = requireds.length;

            for (var _j = 0; _j < jl; ++_j) {
              res = requiredChecks[_j] = requireds[_j]._validate(item, localState, options);

              if (!res.errors) {
                items[i] = res.value;
                isValid = true;
                internals.fastSplice(requireds, _j);
                --_j;
                --jl;

                if (!this._flags.sparse && res.value === undefined) {
                  errors.push(this.createError('array.sparse', null, {
                    key: state.key,
                    path: localState.path,
                    pos: i
                  }, options));

                  if (options.abortEarly) {
                    return errors;
                  }
                }

                break;
              }
            }

            if (isValid) {
              continue;
            } // Inclusions


            var stripUnknown = options.stripUnknown ? options.stripUnknown === true ? true : !!options.stripUnknown.arrays : false;
            jl = inclusions.length;

            for (var _j2 = 0; _j2 < jl; ++_j2) {
              var inclusion = inclusions[_j2]; // Avoid re-running requireds that already didn't match in the previous loop

              var previousCheck = requireds.indexOf(inclusion);

              if (previousCheck !== -1) {
                res = requiredChecks[previousCheck];
              } else {
                res = inclusion._validate(item, localState, options);

                if (!res.errors) {
                  if (inclusion._flags.strip) {
                    internals.fastSplice(items, i);
                    --i;
                    --il;
                  } else if (!this._flags.sparse && res.value === undefined) {
                    errors.push(this.createError('array.sparse', null, {
                      key: state.key,
                      path: localState.path,
                      pos: i
                    }, options));
                    errored = true;
                  } else {
                    items[i] = res.value;
                  }

                  isValid = true;
                  break;
                }
              } // Return the actual error if only one inclusion defined


              if (jl === 1) {
                if (stripUnknown) {
                  internals.fastSplice(items, i);
                  --i;
                  --il;
                  isValid = true;
                  break;
                }

                errors.push(this.createError(wasArray ? 'array.includesOne' : 'array.includesOneSingle', {
                  pos: i,
                  reason: res.errors,
                  value: item
                }, {
                  key: state.key,
                  path: localState.path
                }, options));
                errored = true;

                if (options.abortEarly) {
                  return errors;
                }

                break;
              }
            }

            if (errored) {
              continue;
            }

            if (this._inner.inclusions.length && !isValid) {
              if (stripUnknown) {
                internals.fastSplice(items, i);
                --i;
                --il;
                continue;
              }

              errors.push(this.createError(wasArray ? 'array.includes' : 'array.includesSingle', {
                pos: i,
                value: item
              }, {
                key: state.key,
                path: localState.path
              }, options));

              if (options.abortEarly) {
                return errors;
              }
            }
          }

          if (requireds.length) {
            this._fillMissedErrors.call(this, errors, requireds, state, options);
          }

          if (ordereds.length) {
            this._fillOrderedErrors.call(this, errors, ordereds, state, options);
          }

          return errors.length ? errors : null;
        };

        _class.prototype.describe = function describe() {
          var description = Any.prototype.describe.call(this);

          if (this._inner.ordereds.length) {
            description.orderedItems = [];

            for (var i = 0; i < this._inner.ordereds.length; ++i) {
              description.orderedItems.push(this._inner.ordereds[i].describe());
            }
          }

          if (this._inner.items.length) {
            description.items = [];

            for (var _i = 0; _i < this._inner.items.length; ++_i) {
              description.items.push(this._inner.items[_i].describe());
            }
          }

          return description;
        };

        _class.prototype.items = function items() {
          var _this2 = this;

          var obj = this.clone();

          for (var _len = arguments.length, schemas = Array(_len), _key = 0; _key < _len; _key++) {
            schemas[_key] = arguments[_key];
          }

          Hoek.flatten(schemas).forEach(function (type, index) {
            try {
              type = Cast.schema(_this2._currentJoi, type);
            } catch (castErr) {
              if (castErr.hasOwnProperty('path')) {
                castErr.path = index + '.' + castErr.path;
              } else {
                castErr.path = index;
              }

              castErr.message = castErr.message + '(' + castErr.path + ')';
              throw castErr;
            }

            obj._inner.items.push(type);

            if (type._flags.presence === 'required') {
              obj._inner.requireds.push(type);
            } else if (type._flags.presence === 'forbidden') {
              obj._inner.exclusions.push(type.optional());
            } else {
              obj._inner.inclusions.push(type);
            }
          });
          return obj;
        };

        _class.prototype.ordered = function ordered() {
          var _this3 = this;

          var obj = this.clone();

          for (var _len2 = arguments.length, schemas = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            schemas[_key2] = arguments[_key2];
          }

          Hoek.flatten(schemas).forEach(function (type, index) {
            try {
              type = Cast.schema(_this3._currentJoi, type);
            } catch (castErr) {
              if (castErr.hasOwnProperty('path')) {
                castErr.path = index + '.' + castErr.path;
              } else {
                castErr.path = index;
              }

              castErr.message = castErr.message + '(' + castErr.path + ')';
              throw castErr;
            }

            obj._inner.ordereds.push(type);
          });
          return obj;
        };

        _class.prototype.min = function min(limit) {
          var isRef = Ref.isRef(limit);
          Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');
          return this._test('min', limit, function (value, state, options) {
            var compareTo = void 0;

            if (isRef) {
              compareTo = limit(state.reference || state.parent, options);

              if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {
                return this.createError('array.ref', {
                  ref: limit.key
                }, state, options);
              }
            } else {
              compareTo = limit;
            }

            if (value.length >= compareTo) {
              return value;
            }

            return this.createError('array.min', {
              limit: limit,
              value: value
            }, state, options);
          });
        };

        _class.prototype.max = function max(limit) {
          var isRef = Ref.isRef(limit);
          Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');
          return this._test('max', limit, function (value, state, options) {
            var compareTo = void 0;

            if (isRef) {
              compareTo = limit(state.reference || state.parent, options);

              if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {
                return this.createError('array.ref', {
                  ref: limit.key
                }, state, options);
              }
            } else {
              compareTo = limit;
            }

            if (value.length <= compareTo) {
              return value;
            }

            return this.createError('array.max', {
              limit: limit,
              value: value
            }, state, options);
          });
        };

        _class.prototype.length = function length(limit) {
          var isRef = Ref.isRef(limit);
          Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');
          return this._test('length', limit, function (value, state, options) {
            var compareTo = void 0;

            if (isRef) {
              compareTo = limit(state.reference || state.parent, options);

              if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {
                return this.createError('array.ref', {
                  ref: limit.key
                }, state, options);
              }
            } else {
              compareTo = limit;
            }

            if (value.length === compareTo) {
              return value;
            }

            return this.createError('array.length', {
              limit: limit,
              value: value
            }, state, options);
          });
        };

        _class.prototype.unique = function unique(comparator) {
          Hoek.assert(comparator === undefined || typeof comparator === 'function' || typeof comparator === 'string', 'comparator must be a function or a string');
          var settings = {};

          if (typeof comparator === 'string') {
            settings.path = comparator;
          } else if (typeof comparator === 'function') {
            settings.comparator = comparator;
          }

          return this._test('unique', settings, function (value, state, options) {
            var found = {
              string: Object.create(null),
              number: Object.create(null),
              undefined: Object.create(null),
              boolean: Object.create(null),
              object: new Map(),
              function: new Map(),
              custom: new Map()
            };
            var compare = settings.comparator || Hoek.deepEqual;

            for (var i = 0; i < value.length; ++i) {
              var item = settings.path ? Hoek.reach(value[i], settings.path) : value[i];
              var records = settings.comparator ? found.custom : found[typeof item === 'undefined' ? 'undefined' : _typeof(item)]; // All available types are supported, so it's not possible to reach 100% coverage without ignoring this line.
              // I still want to keep the test for future js versions with new types (eg. Symbol).

              if (
              /* $lab:coverage:off$ */
              records
              /* $lab:coverage:on$ */
              ) {
                  if (records instanceof Map) {
                    var entries = records.entries();
                    var current = void 0;

                    while (!(current = entries.next()).done) {
                      if (compare(current.value[0], item)) {
                        var localState = {
                          key: state.key,
                          path: state.path.concat(i),
                          parent: state.parent,
                          reference: state.reference
                        };
                        var context = {
                          pos: i,
                          value: value[i],
                          dupePos: current.value[1],
                          dupeValue: value[current.value[1]]
                        };

                        if (settings.path) {
                          context.path = settings.path;
                        }

                        return this.createError('array.unique', context, localState, options);
                      }
                    }

                    records.set(item, i);
                  } else {
                    if (records[item] !== undefined) {
                      var _localState = {
                        key: state.key,
                        path: state.path.concat(i),
                        parent: state.parent,
                        reference: state.reference
                      };
                      var _context = {
                        pos: i,
                        value: value[i],
                        dupePos: records[item],
                        dupeValue: value[records[item]]
                      };

                      if (settings.path) {
                        _context.path = settings.path;
                      }

                      return this.createError('array.unique', _context, _localState, options);
                    }

                    records[item] = i;
                  }
                }
            }

            return value;
          });
        };

        _class.prototype.sparse = function sparse(enabled) {
          var value = enabled === undefined ? true : !!enabled;

          if (this._flags.sparse === value) {
            return this;
          }

          var obj = this.clone();
          obj._flags.sparse = value;
          return obj;
        };

        _class.prototype.single = function single(enabled) {
          var value = enabled === undefined ? true : !!enabled;

          if (this._flags.single === value) {
            return this;
          }

          var obj = this.clone();
          obj._flags.single = value;
          return obj;
        };

        _class.prototype._fillMissedErrors = function _fillMissedErrors(errors, requireds, state, options) {
          var knownMisses = [];
          var unknownMisses = 0;

          for (var i = 0; i < requireds.length; ++i) {
            var label = requireds[i]._getLabel();

            if (label) {
              knownMisses.push(label);
            } else {
              ++unknownMisses;
            }
          }

          if (knownMisses.length) {
            if (unknownMisses) {
              errors.push(this.createError('array.includesRequiredBoth', {
                knownMisses: knownMisses,
                unknownMisses: unknownMisses
              }, {
                key: state.key,
                path: state.path
              }, options));
            } else {
              errors.push(this.createError('array.includesRequiredKnowns', {
                knownMisses: knownMisses
              }, {
                key: state.key,
                path: state.path
              }, options));
            }
          } else {
            errors.push(this.createError('array.includesRequiredUnknowns', {
              unknownMisses: unknownMisses
            }, {
              key: state.key,
              path: state.path
            }, options));
          }
        };

        _class.prototype._fillOrderedErrors = function _fillOrderedErrors(errors, ordereds, state, options) {
          var requiredOrdereds = [];

          for (var i = 0; i < ordereds.length; ++i) {
            var presence = Hoek.reach(ordereds[i], '_flags.presence');

            if (presence === 'required') {
              requiredOrdereds.push(ordereds[i]);
            }
          }

          if (requiredOrdereds.length) {
            this._fillMissedErrors.call(this, errors, requiredOrdereds, state, options);
          }
        };

        return _class;
      }(Any);

      internals.safeParse = function (value, result) {
        try {
          var converted = JSON.parse(value);

          if (Array.isArray(converted)) {
            result.value = converted;
          }
        } catch (e) {}
      };

      module.exports = new internals.Array();
      /***/
    },
    /* 23 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        // Load modules
        function _defaults(obj, defaults) {
          var keys = Object.getOwnPropertyNames(defaults);

          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = Object.getOwnPropertyDescriptor(defaults, key);

            if (value && value.configurable && obj[key] === undefined) {
              Object.defineProperty(obj, key, value);
            }
          }

          return obj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
        }

        var Any = __webpack_require__(2);

        var Hoek = __webpack_require__(0); // Declare internals


        var internals = {};

        internals.Binary = function (_Any) {
          _inherits(_class, _Any);

          function _class() {
            _classCallCheck(this, _class);

            var _this = _possibleConstructorReturn(this, _Any.call(this));

            _this._type = 'binary';
            return _this;
          }

          _class.prototype._base = function _base(value, state, options) {
            var result = {
              value: value
            };

            if (typeof value === 'string' && options.convert) {
              try {
                result.value = Buffer.from(value, this._flags.encoding);
              } catch (e) {}
            }

            result.errors = Buffer.isBuffer(result.value) ? null : this.createError('binary.base', null, state, options);
            return result;
          };

          _class.prototype.encoding = function encoding(_encoding) {
            Hoek.assert(Buffer.isEncoding(_encoding), 'Invalid encoding:', _encoding);

            if (this._flags.encoding === _encoding) {
              return this;
            }

            var obj = this.clone();
            obj._flags.encoding = _encoding;
            return obj;
          };

          _class.prototype.min = function min(limit) {
            Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');
            return this._test('min', limit, function (value, state, options) {
              if (value.length >= limit) {
                return value;
              }

              return this.createError('binary.min', {
                limit: limit,
                value: value
              }, state, options);
            });
          };

          _class.prototype.max = function max(limit) {
            Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');
            return this._test('max', limit, function (value, state, options) {
              if (value.length <= limit) {
                return value;
              }

              return this.createError('binary.max', {
                limit: limit,
                value: value
              }, state, options);
            });
          };

          _class.prototype.length = function length(limit) {
            Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');
            return this._test('length', limit, function (value, state, options) {
              if (value.length === limit) {
                return value;
              }

              return this.createError('binary.length', {
                limit: limit,
                value: value
              }, state, options);
            });
          };

          return _class;
        }(Any);

        module.exports = new internals.Binary();
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(3).Buffer);
      /***/
    },
    /* 24 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Any = __webpack_require__(2);

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {
        Set: __webpack_require__(9)
      };

      internals.Boolean = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'boolean';
          _this._flags.insensitive = true;
          _this._inner.truthySet = new internals.Set();
          _this._inner.falsySet = new internals.Set();
          return _this;
        }

        _class.prototype._base = function _base(value, state, options) {
          var result = {
            value: value
          };

          if (typeof value === 'string' && options.convert) {
            var normalized = this._flags.insensitive ? value.toLowerCase() : value;
            result.value = normalized === 'true' ? true : normalized === 'false' ? false : value;
          }

          if (typeof result.value !== 'boolean') {
            result.value = this._inner.truthySet.has(value, null, null, this._flags.insensitive) ? true : this._inner.falsySet.has(value, null, null, this._flags.insensitive) ? false : value;
          }

          result.errors = typeof result.value === 'boolean' ? null : this.createError('boolean.base', null, state, options);
          return result;
        };

        _class.prototype.truthy = function truthy() {
          for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
            values[_key] = arguments[_key];
          }

          var obj = this.clone();
          values = Hoek.flatten(values);

          for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            Hoek.assert(value !== undefined, 'Cannot call truthy with undefined');

            obj._inner.truthySet.add(value);
          }

          return obj;
        };

        _class.prototype.falsy = function falsy() {
          for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            values[_key2] = arguments[_key2];
          }

          var obj = this.clone();
          values = Hoek.flatten(values);

          for (var i = 0; i < values.length; ++i) {
            var value = values[i];
            Hoek.assert(value !== undefined, 'Cannot call falsy with undefined');

            obj._inner.falsySet.add(value);
          }

          return obj;
        };

        _class.prototype.insensitive = function insensitive(enabled) {
          var insensitive = enabled === undefined ? true : !!enabled;

          if (this._flags.insensitive === insensitive) {
            return this;
          }

          var obj = this.clone();
          obj._flags.insensitive = insensitive;
          return obj;
        };

        _class.prototype.describe = function describe() {
          var description = Any.prototype.describe.call(this);
          description.truthy = [true].concat(this._inner.truthySet.values());
          description.falsy = [false].concat(this._inner.falsySet.values());
          return description;
        };

        return _class;
      }(Any);

      module.exports = new internals.Boolean();
      /***/
    },
    /* 25 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Hoek = __webpack_require__(0);

      var ObjectType = __webpack_require__(13);

      var Ref = __webpack_require__(1); // Declare internals


      var internals = {};

      internals.Func = function (_ObjectType$construct) {
        _inherits(_class, _ObjectType$construct);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _ObjectType$construct.call(this));

          _this._flags.func = true;
          return _this;
        }

        _class.prototype.arity = function arity(n) {
          Hoek.assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');
          return this._test('arity', n, function (value, state, options) {
            if (value.length === n) {
              return value;
            }

            return this.createError('function.arity', {
              n: n
            }, state, options);
          });
        };

        _class.prototype.minArity = function minArity(n) {
          Hoek.assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');
          return this._test('minArity', n, function (value, state, options) {
            if (value.length >= n) {
              return value;
            }

            return this.createError('function.minArity', {
              n: n
            }, state, options);
          });
        };

        _class.prototype.maxArity = function maxArity(n) {
          Hoek.assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');
          return this._test('maxArity', n, function (value, state, options) {
            if (value.length <= n) {
              return value;
            }

            return this.createError('function.maxArity', {
              n: n
            }, state, options);
          });
        };

        _class.prototype.ref = function ref() {
          return this._test('ref', null, function (value, state, options) {
            if (Ref.isRef(value)) {
              return value;
            }

            return this.createError('function.ref', null, state, options);
          });
        };

        _class.prototype.class = function _class() {
          return this._test('class', null, function (value, state, options) {
            if (/^\s*class\s/.test(value.toString())) {
              return value;
            }

            return this.createError('function.class', null, state, options);
          });
        };

        return _class;
      }(ObjectType.constructor);

      module.exports = new internals.Func();
      /***/
    },
    /* 26 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Any = __webpack_require__(2);

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {};

      internals.Lazy = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'lazy';
          return _this;
        }

        _class.prototype._base = function _base(value, state, options) {
          var result = {
            value: value
          };
          var lazy = this._flags.lazy;

          if (!lazy) {
            result.errors = this.createError('lazy.base', null, state, options);
            return result;
          }

          var schema = lazy();

          if (!(schema instanceof Any)) {
            result.errors = this.createError('lazy.schema', null, state, options);
            return result;
          }

          return schema._validate(value, state, options);
        };

        _class.prototype.set = function set(fn) {
          Hoek.assert(typeof fn === 'function', 'You must provide a function as first argument');
          var obj = this.clone();
          obj._flags.lazy = fn;
          return obj;
        };

        return _class;
      }(Any);

      module.exports = new internals.Lazy();
      /***/
    },
    /* 27 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);

          if (value && value.configurable && obj[key] === undefined) {
            Object.defineProperty(obj, key, value);
          }
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }

      var Any = __webpack_require__(2);

      var Ref = __webpack_require__(1);

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {
        precisionRx: /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/
      };

      internals.Number = function (_Any) {
        _inherits(_class, _Any);

        function _class() {
          _classCallCheck(this, _class);

          var _this = _possibleConstructorReturn(this, _Any.call(this));

          _this._type = 'number';

          _this._invalids.add(Infinity);

          _this._invalids.add(-Infinity);

          return _this;
        }

        _class.prototype._base = function _base(value, state, options) {
          var result = {
            errors: null,
            value: value
          };

          if (typeof value === 'string' && options.convert) {
            var number = parseFloat(value);
            result.value = isNaN(number) || !isFinite(value) ? NaN : number;
          }

          var isNumber = typeof result.value === 'number' && !isNaN(result.value);

          if (options.convert && 'precision' in this._flags && isNumber) {
            // This is conceptually equivalent to using toFixed but it should be much faster
            var precision = Math.pow(10, this._flags.precision);
            result.value = Math.round(result.value * precision) / precision;
          }

          result.errors = isNumber ? null : this.createError('number.base', null, state, options);
          return result;
        };

        _class.prototype.multiple = function multiple(base) {
          var isRef = Ref.isRef(base);

          if (!isRef) {
            Hoek.assert(typeof base === 'number' && isFinite(base), 'multiple must be a number');
            Hoek.assert(base > 0, 'multiple must be greater than 0');
          }

          return this._test('multiple', base, function (value, state, options) {
            var divisor = isRef ? base(state.reference || state.parent, options) : base;

            if (isRef && (typeof divisor !== 'number' || !isFinite(divisor))) {
              return this.createError('number.ref', {
                ref: base.key
              }, state, options);
            }

            if (value % divisor === 0) {
              return value;
            }

            return this.createError('number.multiple', {
              multiple: base,
              value: value
            }, state, options);
          });
        };

        _class.prototype.integer = function integer() {
          return this._test('integer', undefined, function (value, state, options) {
            return Number.isSafeInteger(value) ? value : this.createError('number.integer', {
              value: value
            }, state, options);
          });
        };

        _class.prototype.negative = function negative() {
          return this._test('negative', undefined, function (value, state, options) {
            if (value < 0) {
              return value;
            }

            return this.createError('number.negative', {
              value: value
            }, state, options);
          });
        };

        _class.prototype.positive = function positive() {
          return this._test('positive', undefined, function (value, state, options) {
            if (value > 0) {
              return value;
            }

            return this.createError('number.positive', {
              value: value
            }, state, options);
          });
        };

        _class.prototype.precision = function precision(limit) {
          Hoek.assert(Number.isSafeInteger(limit), 'limit must be an integer');
          Hoek.assert(!('precision' in this._flags), 'precision already set');

          var obj = this._test('precision', limit, function (value, state, options) {
            var places = value.toString().match(internals.precisionRx);
            var decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);

            if (decimals <= limit) {
              return value;
            }

            return this.createError('number.precision', {
              limit: limit,
              value: value
            }, state, options);
          });

          obj._flags.precision = limit;
          return obj;
        };

        _class.prototype.port = function port() {
          return this._test('port', undefined, function (value, state, options) {
            if (!Number.isSafeInteger(value) || value < 0 || value > 65535) {
              return this.createError('number.port', {
                value: value
              }, state, options);
            }

            return value;
          });
        };

        return _class;
      }(Any);

      internals.compare = function (type, compare) {
        return function (limit) {
          var isRef = Ref.isRef(limit);
          var isNumber = typeof limit === 'number' && !isNaN(limit);
          Hoek.assert(isNumber || isRef, 'limit must be a number or reference');
          return this._test(type, limit, function (value, state, options) {
            var compareTo = void 0;

            if (isRef) {
              compareTo = limit(state.reference || state.parent, options);

              if (!(typeof compareTo === 'number' && !isNaN(compareTo))) {
                return this.createError('number.ref', {
                  ref: limit.key
                }, state, options);
              }
            } else {
              compareTo = limit;
            }

            if (compare(value, compareTo)) {
              return value;
            }

            return this.createError('number.' + type, {
              limit: compareTo,
              value: value
            }, state, options);
          });
        };
      };

      internals.Number.prototype.min = internals.compare('min', function (value, limit) {
        return value >= limit;
      });
      internals.Number.prototype.max = internals.compare('max', function (value, limit) {
        return value <= limit;
      });
      internals.Number.prototype.greater = internals.compare('greater', function (value, limit) {
        return value > limit;
      });
      internals.Number.prototype.less = internals.compare('less', function (value, limit) {
        return value < limit;
      });
      module.exports = new internals.Number();
      /***/
    },
    /* 28 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (Buffer) {
        // Load modules
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
          return typeof obj;
        } : function (obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };

        function _defaults(obj, defaults) {
          var keys = Object.getOwnPropertyNames(defaults);

          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = Object.getOwnPropertyDescriptor(defaults, key);

            if (value && value.configurable && obj[key] === undefined) {
              Object.defineProperty(obj, key, value);
            }
          }

          return obj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
        }

        var Net = __webpack_require__(15);

        var Hoek = __webpack_require__(0);

        var Isemail = void 0; // Loaded on demand

        var Any = __webpack_require__(2);

        var Ref = __webpack_require__(1);

        var JoiDate = __webpack_require__(12);

        var Uri = __webpack_require__(30);

        var Ip = __webpack_require__(29); // Declare internals


        var internals = {
          uriRegex: Uri.createUriRegex(),
          ipRegex: Ip.createIpRegex(['ipv4', 'ipv6', 'ipvfuture'], 'optional'),
          guidBrackets: {
            '{': '}',
            '[': ']',
            '(': ')',
            '': ''
          },
          guidVersions: {
            uuidv1: '1',
            uuidv2: '2',
            uuidv3: '3',
            uuidv4: '4',
            uuidv5: '5'
          },
          cidrPresences: ['required', 'optional', 'forbidden'],
          normalizationForms: ['NFC', 'NFD', 'NFKC', 'NFKD']
        };

        internals.String = function (_Any) {
          _inherits(_class, _Any);

          function _class() {
            _classCallCheck(this, _class);

            var _this = _possibleConstructorReturn(this, _Any.call(this));

            _this._type = 'string';

            _this._invalids.add('');

            return _this;
          }

          _class.prototype._base = function _base(value, state, options) {
            if (typeof value === 'string' && options.convert) {
              if (this._flags.normalize) {
                value = value.normalize(this._flags.normalize);
              }

              if (this._flags.case) {
                value = this._flags.case === 'upper' ? value.toLocaleUpperCase() : value.toLocaleLowerCase();
              }

              if (this._flags.trim) {
                value = value.trim();
              }

              if (this._inner.replacements) {
                for (var i = 0; i < this._inner.replacements.length; ++i) {
                  var replacement = this._inner.replacements[i];
                  value = value.replace(replacement.pattern, replacement.replacement);
                }
              }

              if (this._flags.truncate) {
                for (var _i = 0; _i < this._tests.length; ++_i) {
                  var test = this._tests[_i];

                  if (test.name === 'max') {
                    value = value.slice(0, test.arg);
                    break;
                  }
                }
              }

              if (this._flags.byteAligned && value.length % 2 !== 0) {
                value = '0' + value;
              }
            }

            return {
              value: value,
              errors: typeof value === 'string' ? null : this.createError('string.base', {
                value: value
              }, state, options)
            };
          };

          _class.prototype.insensitive = function insensitive() {
            if (this._flags.insensitive) {
              return this;
            }

            var obj = this.clone();
            obj._flags.insensitive = true;
            return obj;
          };

          _class.prototype.creditCard = function creditCard() {
            return this._test('creditCard', undefined, function (value, state, options) {
              var i = value.length;
              var sum = 0;
              var mul = 1;

              while (i--) {
                var char = value.charAt(i) * mul;
                sum = sum + (char - (char > 9) * 9);
                mul = mul ^ 3;
              }

              var check = sum % 10 === 0 && sum > 0;
              return check ? value : this.createError('string.creditCard', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.regex = function regex(pattern, patternOptions) {
            Hoek.assert(pattern instanceof RegExp, 'pattern must be a RegExp');
            var patternObject = {
              pattern: new RegExp(pattern.source, pattern.ignoreCase ? 'i' : undefined) // Future version should break this and forbid unsupported regex flags

            };

            if (typeof patternOptions === 'string') {
              patternObject.name = patternOptions;
            } else if ((typeof patternOptions === 'undefined' ? 'undefined' : _typeof(patternOptions)) === 'object') {
              patternObject.invert = !!patternOptions.invert;

              if (patternOptions.name) {
                patternObject.name = patternOptions.name;
              }
            }

            var errorCode = ['string.regex', patternObject.invert ? '.invert' : '', patternObject.name ? '.name' : '.base'].join('');
            return this._test('regex', patternObject, function (value, state, options) {
              var patternMatch = patternObject.pattern.test(value);

              if (patternMatch ^ patternObject.invert) {
                return value;
              }

              return this.createError(errorCode, {
                name: patternObject.name,
                pattern: patternObject.pattern,
                value: value
              }, state, options);
            });
          };

          _class.prototype.alphanum = function alphanum() {
            return this._test('alphanum', undefined, function (value, state, options) {
              if (/^[a-zA-Z0-9]+$/.test(value)) {
                return value;
              }

              return this.createError('string.alphanum', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.token = function token() {
            return this._test('token', undefined, function (value, state, options) {
              if (/^\w+$/.test(value)) {
                return value;
              }

              return this.createError('string.token', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.email = function email(isEmailOptions) {
            if (isEmailOptions) {
              Hoek.assert((typeof isEmailOptions === 'undefined' ? 'undefined' : _typeof(isEmailOptions)) === 'object', 'email options must be an object');
              Hoek.assert(typeof isEmailOptions.checkDNS === 'undefined', 'checkDNS option is not supported');
              Hoek.assert(typeof isEmailOptions.tldWhitelist === 'undefined' || _typeof(isEmailOptions.tldWhitelist) === 'object', 'tldWhitelist must be an array or object');
              Hoek.assert(typeof isEmailOptions.minDomainAtoms === 'undefined' || Number.isSafeInteger(isEmailOptions.minDomainAtoms) && isEmailOptions.minDomainAtoms > 0, 'minDomainAtoms must be a positive integer');
              Hoek.assert(typeof isEmailOptions.errorLevel === 'undefined' || typeof isEmailOptions.errorLevel === 'boolean' || Number.isSafeInteger(isEmailOptions.errorLevel) && isEmailOptions.errorLevel >= 0, 'errorLevel must be a non-negative integer or boolean');
            }

            return this._test('email', isEmailOptions, function (value, state, options) {
              Isemail = Isemail || __webpack_require__(19);

              try {
                var result = Isemail.validate(value, isEmailOptions);

                if (result === true || result === 0) {
                  return value;
                }
              } catch (e) {}

              return this.createError('string.email', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.ip = function ip() {
            var ipOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var regex = internals.ipRegex;
            Hoek.assert((typeof ipOptions === 'undefined' ? 'undefined' : _typeof(ipOptions)) === 'object', 'options must be an object');

            if (ipOptions.cidr) {
              Hoek.assert(typeof ipOptions.cidr === 'string', 'cidr must be a string');
              ipOptions.cidr = ipOptions.cidr.toLowerCase();
              Hoek.assert(Hoek.contain(internals.cidrPresences, ipOptions.cidr), 'cidr must be one of ' + internals.cidrPresences.join(', ')); // If we only received a `cidr` setting, create a regex for it. But we don't need to create one if `cidr` is "optional" since that is the default

              if (!ipOptions.version && ipOptions.cidr !== 'optional') {
                regex = Ip.createIpRegex(['ipv4', 'ipv6', 'ipvfuture'], ipOptions.cidr);
              }
            } else {
              // Set our default cidr strategy
              ipOptions.cidr = 'optional';
            }

            var versions = void 0;

            if (ipOptions.version) {
              if (!Array.isArray(ipOptions.version)) {
                ipOptions.version = [ipOptions.version];
              }

              Hoek.assert(ipOptions.version.length >= 1, 'version must have at least 1 version specified');
              versions = [];

              for (var i = 0; i < ipOptions.version.length; ++i) {
                var version = ipOptions.version[i];
                Hoek.assert(typeof version === 'string', 'version at position ' + i + ' must be a string');
                version = version.toLowerCase();
                Hoek.assert(Ip.versions[version], 'version at position ' + i + ' must be one of ' + Object.keys(Ip.versions).join(', '));
                versions.push(version);
              } // Make sure we have a set of versions


              versions = Hoek.unique(versions);
              regex = Ip.createIpRegex(versions, ipOptions.cidr);
            }

            return this._test('ip', ipOptions, function (value, state, options) {
              if (regex.test(value)) {
                return value;
              }

              if (versions) {
                return this.createError('string.ipVersion', {
                  value: value,
                  cidr: ipOptions.cidr,
                  version: versions
                }, state, options);
              }

              return this.createError('string.ip', {
                value: value,
                cidr: ipOptions.cidr
              }, state, options);
            });
          };

          _class.prototype.uri = function uri(uriOptions) {
            var customScheme = '';
            var allowRelative = false;
            var relativeOnly = false;
            var regex = internals.uriRegex;

            if (uriOptions) {
              Hoek.assert((typeof uriOptions === 'undefined' ? 'undefined' : _typeof(uriOptions)) === 'object', 'options must be an object');

              if (uriOptions.scheme) {
                Hoek.assert(uriOptions.scheme instanceof RegExp || typeof uriOptions.scheme === 'string' || Array.isArray(uriOptions.scheme), 'scheme must be a RegExp, String, or Array');

                if (!Array.isArray(uriOptions.scheme)) {
                  uriOptions.scheme = [uriOptions.scheme];
                }

                Hoek.assert(uriOptions.scheme.length >= 1, 'scheme must have at least 1 scheme specified'); // Flatten the array into a string to be used to match the schemes.

                for (var i = 0; i < uriOptions.scheme.length; ++i) {
                  var scheme = uriOptions.scheme[i];
                  Hoek.assert(scheme instanceof RegExp || typeof scheme === 'string', 'scheme at position ' + i + ' must be a RegExp or String'); // Add OR separators if a value already exists

                  customScheme = customScheme + (customScheme ? '|' : ''); // If someone wants to match HTTP or HTTPS for example then we need to support both RegExp and String so we don't escape their pattern unknowingly.

                  if (scheme instanceof RegExp) {
                    customScheme = customScheme + scheme.source;
                  } else {
                    Hoek.assert(/[a-zA-Z][a-zA-Z0-9+-\.]*/.test(scheme), 'scheme at position ' + i + ' must be a valid scheme');
                    customScheme = customScheme + Hoek.escapeRegex(scheme);
                  }
                }
              }

              if (uriOptions.allowRelative) {
                allowRelative = true;
              }

              if (uriOptions.relativeOnly) {
                relativeOnly = true;
              }
            }

            if (customScheme || allowRelative || relativeOnly) {
              regex = Uri.createUriRegex(customScheme, allowRelative, relativeOnly);
            }

            return this._test('uri', uriOptions, function (value, state, options) {
              if (regex.test(value)) {
                return value;
              }

              if (relativeOnly) {
                return this.createError('string.uriRelativeOnly', {
                  value: value
                }, state, options);
              }

              if (customScheme) {
                return this.createError('string.uriCustomScheme', {
                  scheme: customScheme,
                  value: value
                }, state, options);
              }

              return this.createError('string.uri', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.isoDate = function isoDate() {
            return this._test('isoDate', undefined, function (value, state, options) {
              if (JoiDate._isIsoDate(value)) {
                if (!options.convert) {
                  return value;
                }

                var d = new Date(value);

                if (!isNaN(d.getTime())) {
                  return d.toISOString();
                }
              }

              return this.createError('string.isoDate', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.guid = function guid(guidOptions) {
            var versionNumbers = '';

            if (guidOptions && guidOptions.version) {
              if (!Array.isArray(guidOptions.version)) {
                guidOptions.version = [guidOptions.version];
              }

              Hoek.assert(guidOptions.version.length >= 1, 'version must have at least 1 valid version specified');
              var versions = new Set();

              for (var i = 0; i < guidOptions.version.length; ++i) {
                var version = guidOptions.version[i];
                Hoek.assert(typeof version === 'string', 'version at position ' + i + ' must be a string');
                version = version.toLowerCase();
                var versionNumber = internals.guidVersions[version];
                Hoek.assert(versionNumber, 'version at position ' + i + ' must be one of ' + Object.keys(internals.guidVersions).join(', '));
                Hoek.assert(!versions.has(versionNumber), 'version at position ' + i + ' must not be a duplicate.');
                versionNumbers += versionNumber;
                versions.add(versionNumber);
              }
            }

            var guidRegex = new RegExp('^([\\[{\\(]?)[0-9A-F]{8}([:-]?)[0-9A-F]{4}\\2?[' + (versionNumbers || '0-9A-F') + '][0-9A-F]{3}\\2?[' + (versionNumbers ? '89AB' : '0-9A-F') + '][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$', 'i');
            return this._test('guid', guidOptions, function (value, state, options) {
              var results = guidRegex.exec(value);

              if (!results) {
                return this.createError('string.guid', {
                  value: value
                }, state, options);
              } // Matching braces


              if (internals.guidBrackets[results[1]] !== results[results.length - 1]) {
                return this.createError('string.guid', {
                  value: value
                }, state, options);
              }

              return value;
            });
          };

          _class.prototype.hex = function hex() {
            var hexOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            Hoek.assert((typeof hexOptions === 'undefined' ? 'undefined' : _typeof(hexOptions)) === 'object', 'hex options must be an object');
            Hoek.assert(typeof hexOptions.byteAligned === 'undefined' || typeof hexOptions.byteAligned === 'boolean', 'byteAligned must be boolean');
            var byteAligned = hexOptions.byteAligned === true;
            var regex = /^[a-f0-9]+$/i;

            var obj = this._test('hex', regex, function (value, state, options) {
              if (regex.test(value)) {
                if (byteAligned && value.length % 2 !== 0) {
                  return this.createError('string.hexAlign', {
                    value: value
                  }, state, options);
                }

                return value;
              }

              return this.createError('string.hex', {
                value: value
              }, state, options);
            });

            if (byteAligned) {
              obj._flags.byteAligned = true;
            }

            return obj;
          };

          _class.prototype.base64 = function base64() {
            var base64Options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // Validation.

            Hoek.assert((typeof base64Options === 'undefined' ? 'undefined' : _typeof(base64Options)) === 'object', 'base64 options must be an object');
            Hoek.assert(typeof base64Options.paddingRequired === 'undefined' || typeof base64Options.paddingRequired === 'boolean', 'paddingRequired must be boolean'); // Determine if padding is required.

            var paddingRequired = base64Options.paddingRequired === false ? base64Options.paddingRequired : base64Options.paddingRequired || true; // Set validation based on preference.

            var regex = paddingRequired ? // Padding is required.
            /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/ // Padding is optional.
            : /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/;
            return this._test('base64', regex, function (value, state, options) {
              if (regex.test(value)) {
                return value;
              }

              return this.createError('string.base64', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.hostname = function hostname() {
            var regex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;
            return this._test('hostname', undefined, function (value, state, options) {
              if (value.length <= 255 && regex.test(value) || Net.isIPv6(value)) {
                return value;
              }

              return this.createError('string.hostname', {
                value: value
              }, state, options);
            });
          };

          _class.prototype.normalize = function normalize() {
            var form = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'NFC';
            Hoek.assert(Hoek.contain(internals.normalizationForms, form), 'normalization form must be one of ' + internals.normalizationForms.join(', '));

            var obj = this._test('normalize', form, function (value, state, options) {
              if (options.convert || value === value.normalize(form)) {
                return value;
              }

              return this.createError('string.normalize', {
                value: value,
                form: form
              }, state, options);
            });

            obj._flags.normalize = form;
            return obj;
          };

          _class.prototype.lowercase = function lowercase() {
            var obj = this._test('lowercase', undefined, function (value, state, options) {
              if (options.convert || value === value.toLocaleLowerCase()) {
                return value;
              }

              return this.createError('string.lowercase', {
                value: value
              }, state, options);
            });

            obj._flags.case = 'lower';
            return obj;
          };

          _class.prototype.uppercase = function uppercase() {
            var obj = this._test('uppercase', undefined, function (value, state, options) {
              if (options.convert || value === value.toLocaleUpperCase()) {
                return value;
              }

              return this.createError('string.uppercase', {
                value: value
              }, state, options);
            });

            obj._flags.case = 'upper';
            return obj;
          };

          _class.prototype.trim = function trim() {
            var obj = this._test('trim', undefined, function (value, state, options) {
              if (options.convert || value === value.trim()) {
                return value;
              }

              return this.createError('string.trim', {
                value: value
              }, state, options);
            });

            obj._flags.trim = true;
            return obj;
          };

          _class.prototype.replace = function replace(pattern, replacement) {
            if (typeof pattern === 'string') {
              pattern = new RegExp(Hoek.escapeRegex(pattern), 'g');
            }

            Hoek.assert(pattern instanceof RegExp, 'pattern must be a RegExp');
            Hoek.assert(typeof replacement === 'string', 'replacement must be a String'); // This can not be considere a test like trim, we can't "reject"
            // anything from this rule, so just clone the current object

            var obj = this.clone();

            if (!obj._inner.replacements) {
              obj._inner.replacements = [];
            }

            obj._inner.replacements.push({
              pattern: pattern,
              replacement: replacement
            });

            return obj;
          };

          _class.prototype.truncate = function truncate(enabled) {
            var value = enabled === undefined ? true : !!enabled;

            if (this._flags.truncate === value) {
              return this;
            }

            var obj = this.clone();
            obj._flags.truncate = value;
            return obj;
          };

          return _class;
        }(Any);

        internals.compare = function (type, compare) {
          return function (limit, encoding) {
            var isRef = Ref.isRef(limit);
            Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');
            Hoek.assert(!encoding || Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);
            return this._test(type, limit, function (value, state, options) {
              var compareTo = void 0;

              if (isRef) {
                compareTo = limit(state.reference || state.parent, options);

                if (!Number.isSafeInteger(compareTo)) {
                  return this.createError('string.ref', {
                    ref: limit.key
                  }, state, options);
                }
              } else {
                compareTo = limit;
              }

              if (compare(value, compareTo, encoding)) {
                return value;
              }

              return this.createError('string.' + type, {
                limit: compareTo,
                value: value,
                encoding: encoding
              }, state, options);
            });
          };
        };

        internals.String.prototype.min = internals.compare('min', function (value, limit, encoding) {
          var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
          return length >= limit;
        });
        internals.String.prototype.max = internals.compare('max', function (value, limit, encoding) {
          var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
          return length <= limit;
        });
        internals.String.prototype.length = internals.compare('length', function (value, limit, encoding) {
          var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
          return length === limit;
        }); // Aliases

        internals.String.prototype.uuid = internals.String.prototype.guid;
        module.exports = new internals.String();
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(3).Buffer);
      /***/
    },
    /* 29 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var RFC3986 = __webpack_require__(14); // Declare internals


      var internals = {
        Ip: {
          cidrs: {
            ipv4: {
              required: '\\/(?:' + RFC3986.ipv4Cidr + ')',
              optional: '(?:\\/(?:' + RFC3986.ipv4Cidr + '))?',
              forbidden: ''
            },
            ipv6: {
              required: '\\/' + RFC3986.ipv6Cidr,
              optional: '(?:\\/' + RFC3986.ipv6Cidr + ')?',
              forbidden: ''
            },
            ipvfuture: {
              required: '\\/' + RFC3986.ipv6Cidr,
              optional: '(?:\\/' + RFC3986.ipv6Cidr + ')?',
              forbidden: ''
            }
          },
          versions: {
            ipv4: RFC3986.IPv4address,
            ipv6: RFC3986.IPv6address,
            ipvfuture: RFC3986.IPvFuture
          }
        }
      };

      internals.Ip.createIpRegex = function (versions, cidr) {
        var regex = void 0;

        for (var i = 0; i < versions.length; ++i) {
          var version = versions[i];

          if (!regex) {
            regex = '^(?:' + internals.Ip.versions[version] + internals.Ip.cidrs[version][cidr];
          } else {
            regex += '|' + internals.Ip.versions[version] + internals.Ip.cidrs[version][cidr];
          }
        }

        return new RegExp(regex + ')$');
      };

      module.exports = internals.Ip;
      /***/
    },
    /* 30 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load Modules

      var RFC3986 = __webpack_require__(14); // Declare internals


      var internals = {
        Uri: {
          createUriRegex: function createUriRegex(optionalScheme, allowRelative, relativeOnly) {
            var scheme = RFC3986.scheme;
            var prefix = void 0;

            if (relativeOnly) {
              prefix = '(?:' + RFC3986.relativeRef + ')';
            } else {
              // If we were passed a scheme, use it instead of the generic one
              if (optionalScheme) {
                // Have to put this in a non-capturing group to handle the OR statements
                scheme = '(?:' + optionalScheme + ')';
              }

              var withScheme = '(?:' + scheme + ':' + RFC3986.hierPart + ')';
              prefix = allowRelative ? '(?:' + withScheme + '|' + RFC3986.relativeRef + ')' : withScheme;
            }
            /**
             * URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
             *
             * OR
             *
             * relative-ref = relative-part [ "?" query ] [ "#" fragment ]
             */


            return new RegExp('^' + prefix + '(?:\\?' + RFC3986.query + ')?' + '(?:#' + RFC3986.fragment + ')?$');
          }
        }
      };
      module.exports = internals.Uri;
      /***/
    },
    /* 31 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // Load modules

      var Hoek = __webpack_require__(0); // Declare internals


      var internals = {};

      exports = module.exports = internals.Topo = function () {
        this._items = [];
        this.nodes = [];
      };

      internals.Topo.prototype.add = function (nodes, options) {
        var _this = this;

        options = options || {}; // Validate rules

        var before = [].concat(options.before || []);
        var after = [].concat(options.after || []);
        var group = options.group || '?';
        var sort = options.sort || 0; // Used for merging only

        Hoek.assert(before.indexOf(group) === -1, 'Item cannot come before itself:', group);
        Hoek.assert(before.indexOf('?') === -1, 'Item cannot come before unassociated items');
        Hoek.assert(after.indexOf(group) === -1, 'Item cannot come after itself:', group);
        Hoek.assert(after.indexOf('?') === -1, 'Item cannot come after unassociated items');
        [].concat(nodes).forEach(function (node, i) {
          var item = {
            seq: _this._items.length,
            sort: sort,
            before: before,
            after: after,
            group: group,
            node: node
          };

          _this._items.push(item);
        }); // Insert event

        var error = this._sort();

        Hoek.assert(!error, 'item', group !== '?' ? 'added into group ' + group : '', 'created a dependencies error');
        return this.nodes;
      };

      internals.Topo.prototype.merge = function (others) {
        others = [].concat(others);

        for (var i = 0; i < others.length; ++i) {
          var other = others[i];

          if (other) {
            for (var j = 0; j < other._items.length; ++j) {
              var item = Hoek.shallow(other._items[j]);

              this._items.push(item);
            }
          }
        } // Sort items


        this._items.sort(internals.mergeSort);

        for (var _i = 0; _i < this._items.length; ++_i) {
          this._items[_i].seq = _i;
        }

        var error = this._sort();

        Hoek.assert(!error, 'merge created a dependencies error');
        return this.nodes;
      };

      internals.mergeSort = function (a, b) {
        return a.sort === b.sort ? 0 : a.sort < b.sort ? -1 : 1;
      };

      internals.Topo.prototype._sort = function () {
        // Construct graph
        var graph = {};
        var graphAfters = Object.create(null); // A prototype can bungle lookups w/ false positives

        var groups = Object.create(null);

        for (var i = 0; i < this._items.length; ++i) {
          var item = this._items[i];
          var seq = item.seq; // Unique across all items

          var group = item.group; // Determine Groups

          groups[group] = groups[group] || [];
          groups[group].push(seq); // Build intermediary graph using 'before'

          graph[seq] = item.before; // Build second intermediary graph with 'after'

          var after = item.after;

          for (var j = 0; j < after.length; ++j) {
            graphAfters[after[j]] = (graphAfters[after[j]] || []).concat(seq);
          }
        } // Expand intermediary graph


        var graphNodes = Object.keys(graph);

        for (var _i2 = 0; _i2 < graphNodes.length; ++_i2) {
          var node = graphNodes[_i2];
          var expandedGroups = [];
          var graphNodeItems = Object.keys(graph[node]);

          for (var _j = 0; _j < graphNodeItems.length; ++_j) {
            var _group = graph[node][graphNodeItems[_j]];
            groups[_group] = groups[_group] || [];

            for (var k = 0; k < groups[_group].length; ++k) {
              expandedGroups.push(groups[_group][k]);
            }
          }

          graph[node] = expandedGroups;
        } // Merge intermediary graph using graphAfters into final graph


        var afterNodes = Object.keys(graphAfters);

        for (var _i3 = 0; _i3 < afterNodes.length; ++_i3) {
          var _group2 = afterNodes[_i3];

          if (groups[_group2]) {
            for (var _j2 = 0; _j2 < groups[_group2].length; ++_j2) {
              var _node = groups[_group2][_j2];
              graph[_node] = graph[_node].concat(graphAfters[_group2]);
            }
          }
        } // Compile ancestors


        var children = void 0;
        var ancestors = {};
        graphNodes = Object.keys(graph);

        for (var _i4 = 0; _i4 < graphNodes.length; ++_i4) {
          var _node2 = graphNodes[_i4];
          children = graph[_node2];

          for (var _j3 = 0; _j3 < children.length; ++_j3) {
            ancestors[children[_j3]] = (ancestors[children[_j3]] || []).concat(_node2);
          }
        } // Topo sort


        var visited = {};
        var sorted = [];

        for (var _i5 = 0; _i5 < this._items.length; ++_i5) {
          // Really looping thru item.seq values out of order
          var next = _i5;

          if (ancestors[_i5]) {
            next = null;

            for (var _j4 = 0; _j4 < this._items.length; ++_j4) {
              // As above, these are item.seq values
              if (visited[_j4] === true) {
                continue;
              }

              if (!ancestors[_j4]) {
                ancestors[_j4] = [];
              }

              var shouldSeeCount = ancestors[_j4].length;
              var seenCount = 0;

              for (var _k = 0; _k < shouldSeeCount; ++_k) {
                if (visited[ancestors[_j4][_k]]) {
                  ++seenCount;
                }
              }

              if (seenCount === shouldSeeCount) {
                next = _j4;
                break;
              }
            }
          }

          if (next !== null) {
            visited[next] = true;
            sorted.push(next);
          }
        }

        if (sorted.length !== this._items.length) {
          return new Error('Invalid dependencies');
        }

        var seqIndex = {};

        for (var _i6 = 0; _i6 < this._items.length; ++_i6) {
          var _item = this._items[_i6];
          seqIndex[_item.seq] = _item;
        }

        var sortedNodes = [];
        this._items = sorted.map(function (value) {
          var sortedItem = seqIndex[value];
          sortedNodes.push(sortedItem.node);
          return sortedItem;
        });
        this.nodes = sortedNodes;
      };
      /***/

    },
    /* 32 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Joi = __webpack_require__(8);

      module.exports = Joi;
      /***/
    },
    /* 33 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;

      function placeHoldersCount(b64) {
        var len = b64.length;

        if (len % 4 > 0) {
          throw new Error('Invalid string. Length must be a multiple of 4');
        } // the number of equal signs (place holders)
        // if there are two placeholders, than the two characters before it
        // represent one byte
        // if there is only one, then the three characters before it represent 2 bytes
        // this is just a cheap hack to not do indexOf twice


        return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
      }

      function byteLength(b64) {
        // base64 is 4/3 + up to two characters of the original data
        return b64.length * 3 / 4 - placeHoldersCount(b64);
      }

      function toByteArray(b64) {
        var i, l, tmp, placeHolders, arr;
        var len = b64.length;
        placeHolders = placeHoldersCount(b64);
        arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

        l = placeHolders > 0 ? len - 4 : len;
        var L = 0;

        for (i = 0; i < l; i += 4) {
          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
          arr[L++] = tmp >> 16 & 0xFF;
          arr[L++] = tmp >> 8 & 0xFF;
          arr[L++] = tmp & 0xFF;
        }

        if (placeHolders === 2) {
          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
          arr[L++] = tmp & 0xFF;
        } else if (placeHolders === 1) {
          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
          arr[L++] = tmp >> 8 & 0xFF;
          arr[L++] = tmp & 0xFF;
        }

        return arr;
      }

      function tripletToBase64(num) {
        return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
      }

      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];

        for (var i = start; i < end; i += 3) {
          tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
          output.push(tripletToBase64(tmp));
        }

        return output.join('');
      }

      function fromByteArray(uint8) {
        var tmp;
        var len = uint8.length;
        var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

        var output = '';
        var parts = [];
        var maxChunkLength = 16383; // must be multiple of 3
        // go through the array every three bytes, we'll deal with trailing stuff later

        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
          parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
        } // pad the end with zeros, but make sure to not forget the extra bytes


        if (extraBytes === 1) {
          tmp = uint8[len - 1];
          output += lookup[tmp >> 2];
          output += lookup[tmp << 4 & 0x3F];
          output += '==';
        } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1];
          output += lookup[tmp >> 10];
          output += lookup[tmp >> 4 & 0x3F];
          output += lookup[tmp << 2 & 0x3F];
          output += '=';
        }

        parts.push(output);
        return parts.join('');
      }
      /***/

    },
    /* 34 */

    /***/
    function (module, exports) {
      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;

        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;

        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }

        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };

      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);

        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);

          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }

          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }

          if (value * c >= 2) {
            e++;
            c /= 2;
          }

          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

        e = e << mLen | m;
        eLen += mLen;

        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

        buffer[offset + i - d] |= s * 128;
      };
      /***/

    },
    /* 35 */

    /***/
    function (module, exports) {
      var toString = {}.toString;

      module.exports = Array.isArray || function (arr) {
        return toString.call(arr) == '[object Array]';
      };
      /***/

    },
    /* 36 */

    /***/
    function (module, exports) {
      module.exports = {
        "_args": [["joi@13.4.0", "/Users/jeff/projects/joi-browser"]],
        "_development": true,
        "_from": "joi@13.4.0",
        "_id": "joi@13.4.0",
        "_inBundle": false,
        "_integrity": "sha512-JuK4GjEu6j7zr9FuVe2MAseZ6si/8/HaY0qMAejfDFHp7jcH4OKE937mIHM5VT4xDS0q7lpQbszbxKV9rm0yUg==",
        "_location": "/joi",
        "_phantomChildren": {},
        "_requested": {
          "type": "version",
          "registry": true,
          "raw": "joi@13.4.0",
          "name": "joi",
          "escapedName": "joi",
          "rawSpec": "13.4.0",
          "saveSpec": null,
          "fetchSpec": "13.4.0"
        },
        "_requiredBy": ["#DEV:/"],
        "_resolved": "https://registry.npmjs.org/joi/-/joi-13.4.0.tgz",
        "_spec": "13.4.0",
        "_where": "/Users/jeff/projects/joi-browser",
        "bugs": {
          "url": "https://github.com/hapijs/joi/issues"
        },
        "dependencies": {
          "hoek": "5.x.x",
          "isemail": "3.x.x",
          "topo": "3.x.x"
        },
        "description": "Object schema validation",
        "devDependencies": {
          "code": "5.x.x",
          "hapitoc": "1.x.x",
          "lab": "15.x.x"
        },
        "engines": {
          "node": ">=8.9.0"
        },
        "homepage": "https://github.com/hapijs/joi",
        "keywords": ["hapi", "schema", "validation"],
        "license": "BSD-3-Clause",
        "main": "lib/index.js",
        "name": "joi",
        "repository": {
          "type": "git",
          "url": "git://github.com/hapijs/joi.git"
        },
        "scripts": {
          "test": "lab -t 100 -a code -L",
          "test-cov-html": "lab -r html -o coverage.html -a code",
          "test-debug": "lab -a code",
          "toc": "hapitoc",
          "version": "npm run toc && git add API.md README.md"
        },
        "version": "13.4.0"
      };
      /***/
    },
    /* 37 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // resolves . and .. elements in a path array with directory names there
        // must be no slashes, empty elements, or device names (c:\) in the array
        // (so also no leading and trailing slashes - it does not distinguish
        // relative and absolute paths)
        function normalizeArray(parts, allowAboveRoot) {
          // if the path tries to go above the root, `up` ends up > 0
          var up = 0;

          for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];

            if (last === '.') {
              parts.splice(i, 1);
            } else if (last === '..') {
              parts.splice(i, 1);
              up++;
            } else if (up) {
              parts.splice(i, 1);
              up--;
            }
          } // if the path is allowed to go above the root, restore leading ..s


          if (allowAboveRoot) {
            for (; up--; up) {
              parts.unshift('..');
            }
          }

          return parts;
        } // Split a filename into [root, dir, basename, ext], unix version
        // 'root' is just a slash, or nothing.


        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;

        var splitPath = function (filename) {
          return splitPathRe.exec(filename).slice(1);
        }; // path.resolve([from ...], to)
        // posix version


        exports.resolve = function () {
          var resolvedPath = '',
              resolvedAbsolute = false;

          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = i >= 0 ? arguments[i] : process.cwd(); // Skip empty and invalid entries

            if (typeof path !== 'string') {
              throw new TypeError('Arguments to path.resolve must be strings');
            } else if (!path) {
              continue;
            }

            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = path.charAt(0) === '/';
          } // At this point the path should be resolved to a full absolute path, but
          // handle relative paths to be safe (might happen when process.cwd() fails)
          // Normalize the path


          resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
            return !!p;
          }), !resolvedAbsolute).join('/');
          return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
        }; // path.normalize(path)
        // posix version


        exports.normalize = function (path) {
          var isAbsolute = exports.isAbsolute(path),
              trailingSlash = substr(path, -1) === '/'; // Normalize the path

          path = normalizeArray(filter(path.split('/'), function (p) {
            return !!p;
          }), !isAbsolute).join('/');

          if (!path && !isAbsolute) {
            path = '.';
          }

          if (path && trailingSlash) {
            path += '/';
          }

          return (isAbsolute ? '/' : '') + path;
        }; // posix version


        exports.isAbsolute = function (path) {
          return path.charAt(0) === '/';
        }; // posix version


        exports.join = function () {
          var paths = Array.prototype.slice.call(arguments, 0);
          return exports.normalize(filter(paths, function (p, index) {
            if (typeof p !== 'string') {
              throw new TypeError('Arguments to path.join must be strings');
            }

            return p;
          }).join('/'));
        }; // path.relative(from, to)
        // posix version


        exports.relative = function (from, to) {
          from = exports.resolve(from).substr(1);
          to = exports.resolve(to).substr(1);

          function trim(arr) {
            var start = 0;

            for (; start < arr.length; start++) {
              if (arr[start] !== '') break;
            }

            var end = arr.length - 1;

            for (; end >= 0; end--) {
              if (arr[end] !== '') break;
            }

            if (start > end) return [];
            return arr.slice(start, end - start + 1);
          }

          var fromParts = trim(from.split('/'));
          var toParts = trim(to.split('/'));
          var length = Math.min(fromParts.length, toParts.length);
          var samePartsLength = length;

          for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
              samePartsLength = i;
              break;
            }
          }

          var outputParts = [];

          for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push('..');
          }

          outputParts = outputParts.concat(toParts.slice(samePartsLength));
          return outputParts.join('/');
        };

        exports.sep = '/';
        exports.delimiter = ':';

        exports.dirname = function (path) {
          var result = splitPath(path),
              root = result[0],
              dir = result[1];

          if (!root && !dir) {
            // No dirname whatsoever
            return '.';
          }

          if (dir) {
            // It has a dirname, strip trailing slash
            dir = dir.substr(0, dir.length - 1);
          }

          return root + dir;
        };

        exports.basename = function (path, ext) {
          var f = splitPath(path)[2]; // TODO: make this comparison case-insensitive on windows?

          if (ext && f.substr(-1 * ext.length) === ext) {
            f = f.substr(0, f.length - ext.length);
          }

          return f;
        };

        exports.extname = function (path) {
          return splitPath(path)[3];
        };

        function filter(xs, f) {
          if (xs.filter) return xs.filter(f);
          var res = [];

          for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
          }

          return res;
        } // String.prototype.substr - negative index don't work in IE8


        var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
          return str.substr(start, len);
        } : function (str, start, len) {
          if (start < 0) start = str.length + start;
          return str.substr(start, len);
        };
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(7));
      /***/
    },
    /* 38 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (module, global) {
        var __WEBPACK_AMD_DEFINE_RESULT__;
        /*! https://mths.be/punycode v1.4.1 by @mathias */


        ;

        (function (root) {
          /** Detect free variables */
          var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
          var freeModule = typeof module == 'object' && module && !module.nodeType && module;
          var freeGlobal = typeof global == 'object' && global;

          if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
            root = freeGlobal;
          }
          /**
           * The `punycode` object.
           * @name punycode
           * @type Object
           */


          var punycode,

          /** Highest positive signed 32-bit float value */
          maxInt = 2147483647,
              // aka. 0x7FFFFFFF or 2^31-1

          /** Bootstring parameters */
          base = 36,
              tMin = 1,
              tMax = 26,
              skew = 38,
              damp = 700,
              initialBias = 72,
              initialN = 128,
              // 0x80
          delimiter = '-',
              // '\x2D'

          /** Regular expressions */
          regexPunycode = /^xn--/,
              regexNonASCII = /[^\x20-\x7E]/,
              // unprintable ASCII chars + non-ASCII chars
          regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
              // RFC 3490 separators

          /** Error messages */
          errors = {
            'overflow': 'Overflow: input needs wider integers to process',
            'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
            'invalid-input': 'Invalid input'
          },

          /** Convenience shortcuts */
          baseMinusTMin = base - tMin,
              floor = Math.floor,
              stringFromCharCode = String.fromCharCode,

          /** Temporary variable */
          key;
          /*--------------------------------------------------------------------------*/

          /**
           * A generic error utility function.
           * @private
           * @param {String} type The error type.
           * @returns {Error} Throws a `RangeError` with the applicable error message.
           */

          function error(type) {
            throw new RangeError(errors[type]);
          }
          /**
           * A generic `Array#map` utility function.
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} callback The function that gets called for every array
           * item.
           * @returns {Array} A new array of values returned by the callback function.
           */


          function map(array, fn) {
            var length = array.length;
            var result = [];

            while (length--) {
              result[length] = fn(array[length]);
            }

            return result;
          }
          /**
           * A simple `Array#map`-like wrapper to work with domain name strings or email
           * addresses.
           * @private
           * @param {String} domain The domain name or email address.
           * @param {Function} callback The function that gets called for every
           * character.
           * @returns {Array} A new string of characters returned by the callback
           * function.
           */


          function mapDomain(string, fn) {
            var parts = string.split('@');
            var result = '';

            if (parts.length > 1) {
              // In email addresses, only the domain name should be punycoded. Leave
              // the local part (i.e. everything up to `@`) intact.
              result = parts[0] + '@';
              string = parts[1];
            } // Avoid `split(regex)` for IE8 compatibility. See #17.


            string = string.replace(regexSeparators, '\x2E');
            var labels = string.split('.');
            var encoded = map(labels, fn).join('.');
            return result + encoded;
          }
          /**
           * Creates an array containing the numeric code points of each Unicode
           * character in the string. While JavaScript uses UCS-2 internally,
           * this function will convert a pair of surrogate halves (each of which
           * UCS-2 exposes as separate characters) into a single code point,
           * matching UTF-16.
           * @see `punycode.ucs2.encode`
           * @see <https://mathiasbynens.be/notes/javascript-encoding>
           * @memberOf punycode.ucs2
           * @name decode
           * @param {String} string The Unicode input string (UCS-2).
           * @returns {Array} The new array of code points.
           */


          function ucs2decode(string) {
            var output = [],
                counter = 0,
                length = string.length,
                value,
                extra;

            while (counter < length) {
              value = string.charCodeAt(counter++);

              if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);

                if ((extra & 0xFC00) == 0xDC00) {
                  // low surrogate
                  output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                } else {
                  // unmatched surrogate; only append this code unit, in case the next
                  // code unit is the high surrogate of a surrogate pair
                  output.push(value);
                  counter--;
                }
              } else {
                output.push(value);
              }
            }

            return output;
          }
          /**
           * Creates a string based on an array of numeric code points.
           * @see `punycode.ucs2.decode`
           * @memberOf punycode.ucs2
           * @name encode
           * @param {Array} codePoints The array of numeric code points.
           * @returns {String} The new Unicode string (UCS-2).
           */


          function ucs2encode(array) {
            return map(array, function (value) {
              var output = '';

              if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
              }

              output += stringFromCharCode(value);
              return output;
            }).join('');
          }
          /**
           * Converts a basic code point into a digit/integer.
           * @see `digitToBasic()`
           * @private
           * @param {Number} codePoint The basic numeric code point value.
           * @returns {Number} The numeric value of a basic code point (for use in
           * representing integers) in the range `0` to `base - 1`, or `base` if
           * the code point does not represent a value.
           */


          function basicToDigit(codePoint) {
            if (codePoint - 48 < 10) {
              return codePoint - 22;
            }

            if (codePoint - 65 < 26) {
              return codePoint - 65;
            }

            if (codePoint - 97 < 26) {
              return codePoint - 97;
            }

            return base;
          }
          /**
           * Converts a digit/integer into a basic code point.
           * @see `basicToDigit()`
           * @private
           * @param {Number} digit The numeric value of a basic code point.
           * @returns {Number} The basic code point whose value (when used for
           * representing integers) is `digit`, which needs to be in the range
           * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
           * used; else, the lowercase form is used. The behavior is undefined
           * if `flag` is non-zero and `digit` has no uppercase form.
           */


          function digitToBasic(digit, flag) {
            //  0..25 map to ASCII a..z or A..Z
            // 26..35 map to ASCII 0..9
            return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
          }
          /**
           * Bias adaptation function as per section 3.4 of RFC 3492.
           * https://tools.ietf.org/html/rfc3492#section-3.4
           * @private
           */


          function adapt(delta, numPoints, firstTime) {
            var k = 0;
            delta = firstTime ? floor(delta / damp) : delta >> 1;
            delta += floor(delta / numPoints);

            for (;
            /* no initialization */
            delta > baseMinusTMin * tMax >> 1; k += base) {
              delta = floor(delta / baseMinusTMin);
            }

            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
          }
          /**
           * Converts a Punycode string of ASCII-only symbols to a string of Unicode
           * symbols.
           * @memberOf punycode
           * @param {String} input The Punycode string of ASCII-only symbols.
           * @returns {String} The resulting string of Unicode symbols.
           */


          function decode(input) {
            // Don't use UCS-2
            var output = [],
                inputLength = input.length,
                out,
                i = 0,
                n = initialN,
                bias = initialBias,
                basic,
                j,
                index,
                oldi,
                w,
                k,
                digit,
                t,

            /** Cached calculation results */
            baseMinusT; // Handle the basic code points: let `basic` be the number of input code
            // points before the last delimiter, or `0` if there is none, then copy
            // the first basic code points to the output.

            basic = input.lastIndexOf(delimiter);

            if (basic < 0) {
              basic = 0;
            }

            for (j = 0; j < basic; ++j) {
              // if it's not a basic code point
              if (input.charCodeAt(j) >= 0x80) {
                error('not-basic');
              }

              output.push(input.charCodeAt(j));
            } // Main decoding loop: start just after the last delimiter if any basic code
            // points were copied; start at the beginning otherwise.


            for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)
            /* no final expression */
            {
              // `index` is the index of the next character to be consumed.
              // Decode a generalized variable-length integer into `delta`,
              // which gets added to `i`. The overflow checking is easier
              // if we increase `i` as we go, then subtract off its starting
              // value at the end to obtain `delta`.
              for (oldi = i, w = 1, k = base;;
              /* no condition */
              k += base) {
                if (index >= inputLength) {
                  error('invalid-input');
                }

                digit = basicToDigit(input.charCodeAt(index++));

                if (digit >= base || digit > floor((maxInt - i) / w)) {
                  error('overflow');
                }

                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                if (digit < t) {
                  break;
                }

                baseMinusT = base - t;

                if (w > floor(maxInt / baseMinusT)) {
                  error('overflow');
                }

                w *= baseMinusT;
              }

              out = output.length + 1;
              bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
              // incrementing `n` each time, so we'll fix that now:

              if (floor(i / out) > maxInt - n) {
                error('overflow');
              }

              n += floor(i / out);
              i %= out; // Insert `n` at position `i` of the output

              output.splice(i++, 0, n);
            }

            return ucs2encode(output);
          }
          /**
           * Converts a string of Unicode symbols (e.g. a domain name label) to a
           * Punycode string of ASCII-only symbols.
           * @memberOf punycode
           * @param {String} input The string of Unicode symbols.
           * @returns {String} The resulting Punycode string of ASCII-only symbols.
           */


          function encode(input) {
            var n,
                delta,
                handledCPCount,
                basicLength,
                bias,
                j,
                m,
                q,
                k,
                t,
                currentValue,
                output = [],

            /** `inputLength` will hold the number of code points in `input`. */
            inputLength,

            /** Cached calculation results */
            handledCPCountPlusOne,
                baseMinusT,
                qMinusT; // Convert the input in UCS-2 to Unicode

            input = ucs2decode(input); // Cache the length

            inputLength = input.length; // Initialize the state

            n = initialN;
            delta = 0;
            bias = initialBias; // Handle the basic code points

            for (j = 0; j < inputLength; ++j) {
              currentValue = input[j];

              if (currentValue < 0x80) {
                output.push(stringFromCharCode(currentValue));
              }
            }

            handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
            // `basicLength` is the number of basic code points.
            // Finish the basic string - if it is not empty - with a delimiter

            if (basicLength) {
              output.push(delimiter);
            } // Main encoding loop:


            while (handledCPCount < inputLength) {
              // All non-basic code points < n have been handled already. Find the next
              // larger one:
              for (m = maxInt, j = 0; j < inputLength; ++j) {
                currentValue = input[j];

                if (currentValue >= n && currentValue < m) {
                  m = currentValue;
                }
              } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
              // but guard against overflow


              handledCPCountPlusOne = handledCPCount + 1;

              if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                error('overflow');
              }

              delta += (m - n) * handledCPCountPlusOne;
              n = m;

              for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];

                if (currentValue < n && ++delta > maxInt) {
                  error('overflow');
                }

                if (currentValue == n) {
                  // Represent delta as a generalized variable-length integer
                  for (q = delta, k = base;;
                  /* no condition */
                  k += base) {
                    t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                    if (q < t) {
                      break;
                    }

                    qMinusT = q - t;
                    baseMinusT = base - t;
                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                    q = floor(qMinusT / baseMinusT);
                  }

                  output.push(stringFromCharCode(digitToBasic(q, 0)));
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                  delta = 0;
                  ++handledCPCount;
                }
              }

              ++delta;
              ++n;
            }

            return output.join('');
          }
          /**
           * Converts a Punycode string representing a domain name or an email address
           * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
           * it doesn't matter if you call it on a string that has already been
           * converted to Unicode.
           * @memberOf punycode
           * @param {String} input The Punycoded domain name or email address to
           * convert to Unicode.
           * @returns {String} The Unicode representation of the given Punycode
           * string.
           */


          function toUnicode(input) {
            return mapDomain(input, function (string) {
              return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
            });
          }
          /**
           * Converts a Unicode string representing a domain name or an email address to
           * Punycode. Only the non-ASCII parts of the domain name will be converted,
           * i.e. it doesn't matter if you call it with a domain that's already in
           * ASCII.
           * @memberOf punycode
           * @param {String} input The domain name or email address to convert, as a
           * Unicode string.
           * @returns {String} The Punycode representation of the given domain name or
           * email address.
           */


          function toASCII(input) {
            return mapDomain(input, function (string) {
              return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
            });
          }
          /*--------------------------------------------------------------------------*/

          /** Define the public API */


          punycode = {
            /**
             * A string representing the current Punycode.js version number.
             * @memberOf punycode
             * @type String
             */
            'version': '1.4.1',

            /**
             * An object of methods to convert from JavaScript's internal character
             * representation (UCS-2) to Unicode code points, and back.
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode
             * @type Object
             */
            'ucs2': {
              'decode': ucs2decode,
              'encode': ucs2encode
            },
            'decode': decode,
            'encode': encode,
            'toASCII': toASCII,
            'toUnicode': toUnicode
          };
          /** Expose `punycode` */
          // Some AMD build optimizers, like r.js, check for specific condition patterns
          // like the following:

          if (true) {
            !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
              return punycode;
            }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else if (freeExports && freeModule) {
            if (module.exports == freeExports) {
              // in Node.js, io.js, or RingoJS v0.8.0+
              freeModule.exports = punycode;
            } else {
              // in Narwhal or RingoJS v0.7.0-
              for (key in punycode) {
                punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
              }
            }
          } else {
            // in Rhino or a web browser
            root.punycode = punycode;
          }
        })(this);
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(41)(module), __webpack_require__(5));
      /***/
    },
    /* 39 */

    /***/
    function (module, exports) {
      if (typeof Object.create === 'function') {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        };
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;

          var TempCtor = function () {};

          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        };
      }
      /***/

    },
    /* 40 */

    /***/
    function (module, exports) {
      module.exports = function isBuffer(arg) {
        return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
      };
      /***/

    },
    /* 41 */

    /***/
    function (module, exports) {
      module.exports = function (module) {
        if (!module.webpackPolyfill) {
          module.deprecate = function () {};

          module.paths = []; // module.parent = undefined by default

          if (!module.children) module.children = [];
          Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function () {
              return module.l;
            }
          });
          Object.defineProperty(module, "id", {
            enumerable: true,
            get: function () {
              return module.i;
            }
          });
          module.webpackPolyfill = 1;
        }

        return module;
      };
      /***/

    }
    /******/
    ])
  );
});
},{"buffer":"node_modules/buffer/index.js","process":"node_modules/process/browser.js"}],"src/utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getjQueryElement = getjQueryElement;
exports.parseTable = parseTable;
exports.checkUserData = checkUserData;
exports.calculateUnit = calculateUnit;
exports.niceRound = niceRound;
exports.isHexString = isHexString;
exports.toLongHexString = toLongHexString;
exports.hexToInt = hexToInt;
exports.isRgbString = isRgbString;
exports.isRgbaString = isRgbaString;
exports.rgbToInt = rgbToInt;
exports.alphaFromRgbaString = alphaFromRgbaString;
exports.colorStringToInt = colorStringToInt;
exports.createLinearGradient = createLinearGradient;
exports.getString = getString;

var Joi = _interopRequireWildcard(require("joi-browser"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Prototype additions
 */
String.prototype.toTitleCase = function () {
  return this.replace(/\b\w+/g, function (txt) {
    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
  });
};

String.prototype.toCamelCase = function () {
  return this.replace(/[^a-z ]/ig, '').trim().toLowerCase().replace(/(?:^\w|\b\w|\s+)/g, function (m, i) {
    return +m === 0 ? "" : i == 0 ? m.toLowerCase() : m.toUpperCase();
  });
};

Date.prototype.toFormattedString = function (addTh) {
  var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  var day = this.getDate(),
      monthIndex = this.getMonth(),
      year = this.getFullYear();
  var th = 'th';
  if (day == 1 || day == 21 || day == 31) th = 'st';else if (day == 2 || day == 22) th = 'nd';else if (day == 3 || day == 23) th = 'rd';
  return day + (addTh ? th : '') + ' ' + months[monthIndex] + ' ' + year;
};

if (Number.isFinite === undefined) Number.isFinite = function (value) {
  return typeof value === 'number' && isFinite(value);
};

Number.prototype.toFixedCommas = function (num) {
  if (num === undefined) num = this != 0 && Math.abs(this) < 1 ? 2 : 0;
  if (num == 0) return this.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ",");else return (Math.floor(this) + "").replace(/\B(?=(\d{3})+(?!\d))/g, ",") + (this - Math.floor(this)).toFixed(num).replace('0.', '.');
};
/**
 * DOM functions
 */


function getjQueryElement(input) {
  var single = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (!input) return null;
  if (input instanceof HTMLElement || input instanceof SVGElement || typeof input === 'string' && $(input).length > 0) return single ? $(input).eq(0) : $(input);else if (typeof input === 'string' && input.indexOf(' ') < 0 && $('#' + input).length > 0) return single ? $('#' + input).eq(0) : $('#' + input);else if (input instanceof jQuery && input.length > 0) return single ? input.eq(0) : input;else return null;
}

function parseTable(tbl) {
  var $tbl = getjQueryElement(tbl);
  var obj = {},
      repeated = false;
  $tbl.each(function (i, t) {
    Array.from($(t).find('> tbody tr')).forEach(function (tr, i, arr) {
      var key = $(tr).children().eq(0).find('span').text().toCamelCase(),
          val = $(tr).children().eq(1).find('span').text().trim();

      if (repeated || obj[key] !== undefined) {
        if (!repeated) repeated = key;
        return;
      }

      obj[key] = val === '' || ['schemeCode', 'category'].includes(key) || !Number.isFinite(+val) ? val : parseFloat(val);
    });
  });
  if (obj.balance === '') obj.balance = -1;

  if (repeated) {
    console.error('InputError: label `' + key + '` is repeated in the data table');
    return false;
  }

  return obj;
}
/**
 * Joi Validation
 */


var userSchema = Joi.object().keys({
  schemeCode: Joi.string().trim().min(2).regex(/\s/, {
    invert: true,
    name: 'contains a space'
  }).empty(['false', 'None']),
  memberName: Joi.string().trim().min(2).regex(/\d/, {
    invert: true,
    name: 'contains a number'
  }).invalid(['false', 'None']).required(),
  forename: Joi.string().trim().min(2).regex(/\d/, {
    invert: true,
    name: 'contains a number'
  }).empty(['false', 'None']),
  possessive: Joi.string().trim().min(2).regex(/\d/, {
    invert: true,
    name: 'contains a number'
  }).empty(['false', 'None']),
  employer: Joi.string().trim().empty(['', 'false', 'None']),
  employerPossessive: Joi.string().trim().empty(['', 'false', 'None']),
  category: Joi.string().trim().regex(/\s/, {
    invert: true,
    name: 'contains a space'
  }).empty(['false', 'None']),
  beneficiaries: Joi.boolean().truthy([1, '1', 100, '100', 'Y', 'y', 'Yes', 'yes', 'true']).falsy([0, '0', -1, '-1', 75, '75', 50, '50', 25, '25', 'N', 'n', 'No', 'no', 'false']),
  balance: Joi.number().min(-1)
}).required().label('user'),
    dataSchema = Joi.object().keys({
  startDate: Joi.date().max('now').required(),
  endDate: Joi.date().greater(Joi.ref('startDate')).required(),
  startBalance: Joi.number().min(0).required(),
  bulkTransfers: Joi.number().min(0).required(),
  transfers: Joi.number().min(0).required(),
  withdrawals: Joi.number().max(0).required(),
  employeeContributions: Joi.number().min(0).required(),
  employerContributions: Joi.number().min(0).required(),
  investmentReturn: Joi.number().required(),
  charges: Joi.number().max(0).required(),
  endBalance: Joi.number().min(0).required(),
  benefitStatementUrl: Joi.string().trim().empty(['', 'false', 'None'])
}).required().label('data');
/*export function checkUser(user,debug) {
  const result = Joi.validate(user,userSchema)
  if(result.error){
    console.error(result.error)
    return false
  }
  if(debug){
    let warn = ['employer','category','beneficiaries','balance'], missing = []
    for(let prop of warn){
      if(!result.value[prop]) missing.push(prop)
    }
    if(missing.length) console.warn('ValidationWarning: missing ['+missing.join(', ')+'] on user')
  }
  return result.value
}

export function checkData(data,debug) {
  const result = Joi.validate(data,dataSchema)
  if(result.error){
    console.error(result.error)
    return false
  }
  let sumProps = ['startBalance','transfers','contributionsEE','contributionsER'],
    sum = sumProps.reduce((val, prop, i, array)=>{
      return val+Math.max(result.value[prop],0)
    },0)
  if(Math.abs(result.value.return) > sum){
    console.error('ValidationError: return is greater than the sum of the parts that could make it up, check data.')
    return false
  }
  sumProps = ['startBalance','transfers','withdrawals','contributionsEE','contributionsER','return','charges']
  sum = sumProps.reduce((val, prop, i, array)=>{
      return val+result.value[prop]
  },0)
  if(result.value.endBalance != sum){
    if(debug) console.warn('ValidationWarning: endBalance is not the sum of its parts, overwriting passed value ['+Math.round(result.value.endBalance)+'] with sum of parts ['+Math.round(sum)+']')
    result.value.endBalance = sum
  }
  if(!result.value.benefitStatementUrl && debug) console.warn('ValidationWarning: missing [benefitStatementUrl] on data')
  return result.value
}*/

var userDataSchema = userSchema.concat(dataSchema);

function checkUserData(userdata, debug) {
  //Swap dd/mm/yyyy to mm/dd/yyyy for Javascript Date object
  var sd = userdata.startDate.split(/\b/).map(Number).filter(function (n) {
    return !!n;
  }),
      ed = userdata.endDate.split(/\b/).map(Number).filter(function (n) {
    return !!n;
  });

  if (sd.length != 3 || ed.length != 3) {
    console.error('ValidationError: could not parse start/end date formats, please use "dd/mm/yyyy".');
    return false;
  }

  if (sd[1] < 13) userdata.startDate = sd[1] + "/" + sd[0] + "/" + sd[2];
  if (ed[1] < 13) userdata.endDate = ed[1] + "/" + ed[0] + "/" + ed[2];
  var result = Joi.validate(userdata, userDataSchema);

  if (result.error) {
    console.error(result.error);
    return false;
  }

  if (debug) {
    var warn = ['schemeCode', 'employer', 'category', 'beneficiaries', 'balance'],
        missing = [];

    for (var _i = 0, _warn = warn; _i < _warn.length; _i++) {
      var prop = _warn[_i];
      if (!result.value[prop]) missing.push(prop);
    }

    if (missing.length) console.warn('ValidationWarning: missing [' + missing.join(', ') + '] on user');
  }

  var sumProps = ['startBalance', 'bulkTransfers', 'transfers', 'employeeContributions', 'employerContributions'],
      sum = sumProps.reduce(function (val, prop, i, array) {
    return val + Math.max(result.value[prop], 0);
  }, 0);

  if (Math.abs(result.value.investmentReturn) > sum) {
    console.error('ValidationWarning: investment return provided is greater than the sum of the parts (>100%), please check.');
  }

  sumProps = ['startBalance', 'bulkTransfers', 'transfers', 'withdrawals', 'employeeContributions', 'employerContributions', 'investmentReturn', 'charges'];
  sum = sumProps.reduce(function (val, prop, i, array) {
    return val + result.value[prop];
  }, 0);

  if (result.value.endBalance != sum) {
    console.warn('ValidationWarning: endBalance is not the sum of its parts, overwriting passed value [' + Math.round(result.value.endBalance) + '] with sum of parts [' + Math.round(sum) + ']');
    result.value.endBalance = sum;
  }

  if (!result.value.benefitStatementUrl && debug) console.warn('ValidationWarning: missing [benefitStatementUrl] on data');
  return result.value;
} //Unit


function calculateUnit(data) {
  var balance = Math.max(data.startBalance, data.endBalance),
      maxOnScreen = data.startBalance + Math.max(data.bulkTransfers, 0) + Math.max(data.transfers, 0) + data.employeeContributions + data.employerContributions + Math.max(data.investmentReturn, 0),
      numSquares = maxOnScreen > 1000000 ? 180 : maxOnScreen < 100000 ? 100 : Math.round(100 + (1 - (1000000 - maxOnScreen) / 900000) * 80);
  return Math.max(Math.ceil(balance / numSquares), 1);
}

function niceRound(num, incWord, currencySymbol) {
  var rounded = Math.abs(num);
  if (rounded > 995000) rounded = Math.round(rounded / 5000) * 5000;else if (rounded > 9500) rounded = Math.round(rounded / 1000) * 1000;else if (rounded > 950) rounded = Math.round(rounded / 100) * 100;else if (rounded > 95) rounded = Math.round(rounded / 10) * 10;
  var word = '';

  if (incWord) {
    var under = ['almost ', 'nearly '];
    word = Math.abs(num) > 100 ? rounded < Math.abs(num) ? 'over ' : rounded > Math.abs(num) ? under[Math.floor(Math.random() * under.length)] : 'exactly ' : '';
  }

  return word + (currencySymbol ? currencySymbol : '') + rounded.toFixedCommas();
}
/**
 * Colors
 */


function isHexString(str) {
  return typeof str === 'string' && /^0x[A-Fa-f0-9]{1,6}|^#?[A-Fa-f0-9]{3}([A-Fa-f0-9]{3})?$/.test(str);
}

function toLongHexString(str) {
  if (!isHexString(str)) return false;

  if (str.substr(0, 2) === '0x') {
    str = str.substr(2);
    return '#' + '0'.repeat(Math.max(0, 6 - str.length)) + str.toUpperCase();
  }

  str = str.replace('#', '');
  if (str.length > 5) return '#' + str.toUpperCase();
  return '#' + (str[0].repeat(2) + str[1].repeat(2) + str[2].repeat(2)).toUpperCase();
}

function hexToInt(input) {
  return typeof input === 'number' ? Math.abs(input) : isHexString(input) ? parseInt(toLongHexString(input).replace('#', ''), 16) : NaN;
}

function isRgbString(str) {
  return typeof str === 'string' && /^rgb\((\d+(?:\.\d+)?|\.\d+),(\d+(?:\.\d+)?|\.\d+),(\d+(?:\.\d+)?|\.\d+)\)$/.test(str.toLowerCase().replace(' ', ''));
}

function isRgbaString(str) {
  return typeof str === 'string' && /^rgba\((?:(\d{1,3}(?:\.\d+)?|\.\d+),){3}(0(?:\.\d+)?|1(?:\.0+)?|\.\d+)\)$/.test(str.toLowerCase().replace(' ', ''));
}

function rgbToInt(input) {
  if (typeof input === 'number') return input;
  var matches;

  if (isRgbString(input)) {
    matches = input.toLowerCase().replace(' ', '').match(/^rgb\((\d+(?:\.\d+)?|\.\d+),(\d+(?:\.\d+)?|\.\d+),(\d+(?:\.\d+)?|\.\d+)\)$/);
    var r = Math.round(matches[1]).toString(16),
        g = Math.round(matches[2]).toString(16),
        b = Math.round(matches[3]).toString(16);
    return parseInt(r + g + b, 16);
  } else if (isRgbaString(input)) {
    matches = input.toLowerCase().replace(' ', '').match(/^rgba\((\d+(?:\.\d+)?|\.\d+),(\d+(?:\.\d+)?|\.\d+),(\d+(?:\.\d+)?|\.\d+),(0(?:\.\d+)?|1(?:\.0+)?|\.\d+)\)$/);

    var _r = Math.round(matches[1]).toString(16),
        _g = Math.round(matches[2]).toString(16),
        _b = Math.round(matches[3]).toString(16); //, a=parseFloat(matches[4])


    return parseInt(_r + _g + _b, 16);
  } else return false;
}

function alphaFromRgbaString(input) {
  if (isRgbaString(input)) {
    matches = input.toLowerCase().replace(' ', '').match(/^rgba\((\d+(?:\.\d+)?|\.\d+),(\d+(?:\.\d+)?|\.\d+),(\d+(?:\.\d+)?|\.\d+),(0(?:\.\d+)?|1(?:\.0+)?|\.\d+)\)$/);
    return parseFloat(matches[4]);
  }

  if (isRgbString(input)) return 1;
  return false;
}

function colorStringToInt(input) {
  if (typeof input === 'number') return number;
  if (isHexString(input)) return hexToInt(input);
  if (isRgbString(input) || isRgbaString(input)) return rgbToInt(input);
  return false;
}

function createLinearGradient(width, height, stops, angle, canvas) {
  canvas = (canvas ? getjQueryElement(canvas) : null) ? canvas[0] : document.createElement('canvas');
  canvas.width = width;
  canvas.height = height;
  angle = (angle || 0) % 360 * Math.PI / 180;
  if (angle < 0) angle = 2 * Math.PI + angle;
  var x0,
      y0,
      x1,
      y1,
      diagAngle = Math.atan(height / width),
      opp1,
      adj1,
      hyp2,
      opp2,
      adj2,
      hyp3,
      adj3,
      opp3;

  if (angle <= Math.PI / 2) {
    //TODO use cleaner formula from codepen?
    if (angle <= diagAngle) {
      opp1 = Math.tan(angle) * width / 2, hyp2 = height / 2 - opp1, opp2 = Math.sin(angle) * hyp2, adj3 = Math.cos(angle) * opp2, opp3 = Math.sin(angle) * opp2, x1 = width + adj3, y1 = height / 2 + opp1 + opp3, x0 = width - x1, y0 = height - y1;
    } else {
      opp1 = Math.tan(angle) * width / 2, hyp2 = opp1 - height / 2, adj2 = Math.cos(angle) * hyp2, adj3 = Math.cos(angle) * adj2, opp3 = Math.sin(angle) * adj2;
      x1 = width - opp3, y1 = height + adj3, x0 = width - x1, y0 = height - y1;
    }
  } else if (angle <= Math.PI) {
    angle = angle - Math.PI / 2;

    if (angle <= Math.PI / 2 - diagAngle) {
      opp1 = Math.tan(angle) * height / 2, hyp2 = width / 2 - opp1, hyp3 = Math.cos(angle) * hyp2, adj3 = Math.cos(angle) * hyp3, opp3 = Math.sin(angle) * hyp3, x1 = adj3, y1 = height + opp3, x0 = width - x1, y0 = height - y1;
    } else {
      adj1 = width / 2 / Math.tan(angle), hyp2 = height / 2 - adj1, hyp3 = Math.cos(angle) * hyp2, adj3 = Math.cos(angle) * hyp3, opp3 = Math.sin(angle) * hyp3, x1 = -opp3, y1 = height / 2 + adj1 + adj3, x0 = width - x1, y0 = height - y1;
    }
  } else if (angle <= 3 * Math.PI / 2) {
    angle = angle - Math.PI;

    if (angle <= diagAngle) {
      opp1 = Math.tan(angle) * width / 2, hyp2 = height / 2 - opp1, hyp3 = Math.cos(angle) * hyp2, adj3 = Math.cos(angle) * hyp3, opp3 = Math.sin(angle) * hyp3, x1 = -opp3, y1 = adj3, x0 = width - x1, y0 = height - y1;
    } else {
      adj1 = height / 2 / Math.tan(angle), hyp2 = width / 2 - adj1, hyp3 = Math.sin(angle) * hyp2, adj3 = Math.cos(angle) * hyp3, opp3 = Math.sin(angle) * hyp3, x1 = opp3, y1 = -adj3, x0 = width - x1, y0 = height - y1;
    }
  } else {
    angle = angle - 3 * Math.PI / 2;

    if (angle <= Math.PI / 2 - diagAngle) {
      opp1 = Math.tan(angle) * height / 2, hyp2 = width / 2 - opp1, hyp3 = Math.cos(angle) * hyp2, adj3 = Math.cos(angle) * hyp3, opp3 = Math.sin(angle) * hyp3, x1 = width - adj3, y1 = -opp3, x0 = width - x1, y0 = height - y1;
    } else {
      adj1 = width / 2 / Math.tan(angle), hyp2 = height / 2 - adj1, hyp3 = Math.sin(angle) * hyp2, adj3 = Math.cos(angle) * hyp3, opp3 = Math.sin(angle) * hyp3, x1 = width + adj3, y1 = opp3, x0 = width - x1, y0 = height - y1;
    }
  }

  var ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  var gradient = ctx.createLinearGradient(x0, y0, x1, y1);
  var stopPoints = Object.keys(stops);
  stopPoints.forEach(function (point, i, arr) {
    gradient.addColorStop(parseFloat(point), stops[point]);
  });
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, width, height);
  return canvas;
}
/**
 * Strings
 */


var defaultStrings = {
  startBalanceTable: 'Balance as at #startDate#',
  transfersTable: 'Transfers',
  withdrawalsTable: 'Withdrawals',
  employeeContributionsTable: '#possessive# contributions',
  employerContributionsTable: '#employerPossessive# contributions',
  investmentReturnTable: 'Investment return',
  chargesTable: 'Charges and fees',
  endBalanceTable: 'Balance as at #endDate#',
  labelJar: '#possessive# Pension Account',
  startBalanceJar: 'Starting balance',
  transfersJar: 'Transferred in',
  withdrawalsJar: 'Withdrawn',
  employeeContributionsJar: '#possessive# contributions',
  employerContributionsJar: '#employerPossessive# contributions',
  investmentReturnJar: 'Investment return',
  chargesJar: 'Charges and fees',
  button: 'Open my Benefit Statement'
};

function getString(id, that) {
  var template = that && that.config && that.config.scenes && that.config.scenes[id + 'String'] ? that.config.scenes[id + 'String'] : defaultStrings[id] ? defaultStrings[id] : '',
      partsToReplace = template.split('#').filter(function (e, i) {
    return i % 2 == 1;
  });
  partsToReplace.forEach(function (part) {
    var replacement;

    if (that.data[part]) {
      if (that.data[part].toFormattedString) replacement = that.data[part].toFormattedString();else if (that.data[part].toFixedCommas) replacement = that.data[part].toFixedCommas(0);else replacement = that.data[part];
    } else if (that.user[part]) {
      if (that.user[part].toFormattedString) replacement = that.user[part].toFormattedString();else if (that.user[part].toFixedCommas) replacement = that.user[part].toFixedCommas(0);else replacement = that.user[part];
    } else replacement = part;

    template = template.replace('#' + part + '#', replacement);
  });
  return template;
}
},{"joi-browser":"node_modules/joi-browser/dist/joi-browser.js"}],"src/setup/gsap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  // Create
  var that = this,
      _timeline = new TimelineMax({
    id: "Master " + this.id,
    paused: true
  });

  if (this.DEBUG && typeof GSDevTools !== 'undefined') GSDevTools.create({
    id: "Master " + this.id + " Dev",
    paused: true
  });
  /* hacky onStart fix - removed
  _timeline.to({x:0},0.1,{
    x:1
  })*/
  // Events

  _timeline.eventCallback('onUpdate', function () {
    that.updateProgress();
    that.tracker.setMediaProgressInSeconds(_timeline.time()); //that.tracker.setMediaTotalLengthInSeconds(_timeline.duration);

    that.tracker.update();
  });

  _timeline.eventCallback('onComplete', function () {
    if (that.DEBUG) console.log('Video Statement ' + that.id + ': timeline complete');
    that.pause();
    that.tracker.finish(); //if(_timeline.duration() > 30) TODO include build check

    if (that.audio.music) that.audio.music.stop();
    VideoStatement.dimOut(that.$el);

    if (that.audio.speech && that.audio.speech.currentlyPlaying) {
      that.audio.speech.currentlyPlaying.stop();
      that.audio.speech.currentlyPlaying = null;
      that.audio.speech.currentlyPlayingId = null;
    }

    that.wasPlaying = false;
  });

  return _timeline;
}
},{}],"src/setup/matomo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(config) {
  // Only run this once, despite how many VideoStatements we create
  if (!window.videoStatementPiwikMediaAnalyticsAsyncInitSet) {
    window.videoStatementPiwikMediaAnalyticsAsyncInitSet = true;

    var _originalPiwikMediaAnalyticsAsyncInit = window.Piwik && Piwik.MediaAnalytics ? null : window.piwikMediaAnalyticsAsyncInit;

    window.piwikMediaAnalyticsAsyncInit = function () {
      if (_originalPiwikMediaAnalyticsAsyncInit && typeof _originalPiwikMediaAnalyticsAsyncInit == 'function') _originalPiwikMediaAnalyticsAsyncInit();
      var MA = Piwik.MediaAnalytics;

      function VideoStatementPlayer(node, mediaType) {
        if (!node.videoStatement || node.hasVideoStatementTracker) {
          // prevent creating multiple trackers for the same media
          // when scanning for media multiple times
          return;
        }

        node.hasVideoStatementTracker = true; // find the actual resource / URL of the video

        var defaultResource = window.location.href.replace(/#.*$/, '') + '#' + (node.id ? node.id : 'video-statement-' + node.videoStatement.id); // a user can overwrite the actual resource by defining a "data-matomo-resource" attribute. 
        // the method `getMediaResource` will detect whether such an attribute was set 

        var resource = MA.element.getMediaResource(node, defaultResource); // create an instance of the media tracker. 

        var tracker = new MA.MediaTracker(config.trackerName || 'VideoStatementTracker', mediaType, resource); // for video you should detect the width, height, and fullscreen usage, if possible
        //tracker.setWidth(node.videoStatement.pixi.app.view.clientWidth); // Handled in pixi setup
        //tracker.setHeight(node.videoStatement.pixi.app.view.clientHeight); // Handled in pixi setup

        tracker.setFullscreen(MA.element.isFullscreen(node)); // the method `getMediaTitle` will try to get a media title from a
        // "data-matomo-title", "title" or "alt" HTML attribute. Sometimes it might be possible
        // to retrieve the media title directly from the video or audio player
        //var title = MA.element.getMediaTitle(node);

        var title = MA.element.getAttribute(node, "data-matomo-title") || MA.element.getAttribute(node, "data-piwik-title") || node.videoStatement.title || (node.id ? node.id.replace(/\-|_/g, ' ') : false) || 'Video Statement ' + node.videoStatement.id;
        tracker.setMediaTitle(title); // here we make sure to send an initial tracking request for this media. 
        // This basically tracks an impression for this media. 

        tracker.trackUpdate(); // Submit events that would have been missed if already playing

        if (node.videoStatement.timeline.isActive()) {
          if (node.videoStatement.timeline.duration() && node.videoStatement.timeline.duration() > 29) tracker.setMediaTotalLengthInSeconds(node.videoStatement.timeline.duration()); // notify the tracker the media is now playing

          tracker.play();
        }

        node.videoStatement.tracker = tracker;
      }

      VideoStatementPlayer.scanForMedia = function (documentOrElement) {
        if (!documentOrElement) documentOrElement = document; // find all medias for your player

        var videoStatementEls = documentOrElement.querySelectorAll('[data-video-statement-wrap],.video-statent-wrap');

        for (var i = 0; i < videoStatementEls.length; i++) {
          // for each of the medias found, create an instance of your player as long as the media is 
          // not supposed to be ignored via a "data-matomo-ignore" attribute
          if (!MA.element.isMediaIgnored(videoStatementEls[i]) && !videoStatementEls[i].hasVideoStatementTracker && videoStatementEls[i].videoStatement) {
            new VideoStatementPlayer(videoStatementEls[i], MA.mediaType.VIDEO); //sets tracker on element's VideoStatement in constructor, new player object isn't actually used
            // there is also a MA.mediaType.AUDIO constant if you want to track audio
          }
        }
      }; // adding the newly created player constructor to the Media Analytics tracker


      MA.addPlayer('VideoStatementPlayer', VideoStatementPlayer);
      MA.players.getPlayer('VideoStatementPlayer').scanForMedia();
    };

    if (window.Piwik && Piwik.MediaAnalytics) window.piwikMediaAnalyticsAsyncInit();
  }

  if (window.Piwik && Piwik.MediaAnalytics && Piwik.MediaAnalytics.players.getPlayer('VideoStatementPlayer')) Piwik.MediaAnalytics.players.getPlayer('VideoStatementPlayer').scanForMedia(); // Return a dummy tracker object for now, this will be overwritted with the real tracker object in scanForMedia

  return {
    play: function play() {},
    pause: function pause() {},
    finish: function finish() {},
    setMediaProgressInSeconds: function setMediaProgressInSeconds() {},
    setMediaTotalLengthInSeconds: function setMediaTotalLengthInSeconds() {},
    setWidth: function setWidth() {},
    setHeight: function setHeight() {},
    update: function update() {},
    seekStart: function seekStart() {},
    seekFinish: function seekFinish() {},
    trackUpdate: function trackUpdate() {},
    trackEvent: function trackEvent() {}
  };
}
},{}],"src/setup/pixi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _default(config) {
  /*********
   * Setup *
   *********/
  var _pixi = {},
      that = this; // Vars

  var app, loader, WIDTH, HEIGHT, SCALE, MARGIN;
  _pixi.assetsLoaded = false;
  WIDTH = _pixi.WIDTH = parseFloat(config.width) || 512;
  HEIGHT = _pixi.HEIGHT = parseFloat(config.height) || 640;
  SCALE = _pixi.SCALE = parseFloat(config.scale) || 40;
  MARGIN = _pixi.MARGIN = parseFloat(config.margin) || 0.1; // Create a Pixi Application

  function isIE() {
    var ua = window.navigator.userAgent; //Check the userAgent property of the window.navigator object

    var msie = ua.indexOf('MSIE '); // IE 10 or older

    var trident = ua.indexOf('Trident/'); //IE 11

    return msie > 0 || trident > 0;
  }

  _pixi.backgroundColor = config.backgroundColor === 'transparent' || config.backgroundColor === 'clear' || config.backgroundColor === 'none' ? false : config.backgroundColor ? (0, _utils.colorStringToInt)(config.backgroundColor) : false;
  app = _pixi.app = new PIXI.Application({
    width: WIDTH,
    height: HEIGHT,
    antialias: config.antialias !== undefined && config.antialias !== null ? !!config.antialias : true,
    transparent: _pixi.backgroundColor === false ? true : false,
    backgroundColor: _pixi.backgroundColor || _pixi.backgroundColor === 0 ? _pixi.backgroundColor : false //forceCanvas: isIE()

  }); //_pixi.app.stage = new PIXI.display.Stage(); // pixi-layers.js

  _pixi.app.stage.sortableChildren = true; // so play button and loading indicator are always on top

  _pixi.baseTextStyle = new PIXI.TextStyle({
    fontFamily: (Array.isArray(config.fontFamily) && config.fontFamily.length ? config.fontFamily : typeof config.fontFamily === 'string' && config.fontFamily ? config.fontFamily : false) || ['Franklin-Gothic-Demi', 'Franklin Gothic Demi', 'Franklin Gothic Medium', 'Franklin Gothic', 'ITC Franklin Gothic', 'Arial', 'ArialMT', 'sans-serif'],
    fontSize: parseFloat(config.fontSize) || 36,
    fill: Array.isArray(config.fill) ? config.fill : config.fill === 0 || config.fill ? (0, _utils.colorStringToInt)(config.fill) : 0x575756,
    fillGradientStops: Array.isArray(config.fillGradientStops) && config.fillGradientStops.length ? config.fillGradientStops : undefined,
    fillGradientType: config.fillGradientStops && config.fillGradientStops.length ? config.fillGradientType === 'vertical' ? PIXI.TEXT_GRADIENT.LINEAR_VERTICAL : PIXI.TEXT_GRADIENT.LINEAR_HORIZONTAL : undefined,
    align: 'left' //lineJoin: 'round'

  });
  _pixi.webfontSizeCheck = config.webfontSizeCheck || ">0";
  _pixi.primaryColor = config.primaryColor ? (0, _utils.colorStringToInt)(config.primaryColor) : 0x711984;
  _pixi.secondaryColor = config.secondaryColor ? (0, _utils.colorStringToInt)(config.secondaryColor) : 0x009fd4;
  /* For pixel art
  if (app.renderer.type !== PIXI.RENDERER_TYPE.WEBGL) {
      app.renderer.context.mozImageSmoothingEnabled = false
      app.renderer.context.webkitImageSmoothingEnabled = false
  }*/
  // Fix for iOS GPU issues

  app.view.style['transform'] = 'translatez(0)'; // Allow scroll on canvas when not preventing default

  app.view.style['touch-action'] = 'auto';
  app.renderer.plugins.interaction.autoPreventDefault = false; // Canvas accessability

  app.view.setAttribute('aria-label', 'Personalised video statement');
  app.view.setAttribute('aria-describedby', window.jQuery('[data-for-video-statement="' + this.id + '"]').length ? window.jQuery('[data-for-video-statement="' + this.id + '"]')[0] : this.$el[0].id.replace('wrap', 'data-table')); //app.view.setAttribute('tabindex','0'); // managed by 'fallback' DOM elements
  //app.view.addEventListener("keyup", function(e){ if(e.keyCode==13 || e.keyCode==32){e.preventDefault(); this.parentElement.videoStatement.toggle(); }});
  // Add the canvas that Pixi automatically created to the HTML document and disable context menu

  app.view.className = 'video-statement-canvas';
  this.$el.prepend(app.view); // Disable context menu

  app.view.addEventListener('contextmenu', function (e) {
    e.preventDefault();
    return false;
  }); // Set for matomo now we know

  this.tracker.setWidth(app.view.clientWidth);
  this.tracker.setHeight(app.view.clientHeight);
  /***************
   * Load assets *
   ***************/

  loader = PIXI.Loader.shared; //new PIXI.Loader()

  config.resources = config.resources || {};
  var resourceNames = Object.keys(config.resources).filter(function (name) {
    return !!config.resources[name];
  });

  if (resourceNames.length) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = resourceNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        name = _step.value;
        if (!loader.resources[name]) // if(!PIXI.utils.BaseTextureCache[name]) // Only add if we haven't previously in another video statement
          loader.add(name, config.resources[name]);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  if (!resourceNames.includes('loading') && !PIXI.utils.BaseTextureCache['loading']) loader.add('loading', './static/WA8/vbs/img/loading.png');
  _pixi.loadingWidth = parseFloat(config.loadingWidth) || 0.2;
  _pixi.loadingSteps = parseFloat(config.loadingSteps) || 16;
  _pixi.loadingRotationTime = parseFloat(config.loadingRotationTime) || 1;
  _pixi.loadingSetIntervalHandle = null;
  if (this.DEBUG) console.log('Video Statement ' + this.id + ': Loading resources');

  if (this.DEBUG) {
    loader.onLoad.add(function (loader, res) {
      console.log('Video Statement ' + that.id + ': \'' + res.name + '\' resource loaded!'); //console.log('Video Statement '+that.id+': '+loader.progress+'%')
    });
    loader.onError.add(function (err, loader, res) {
      console.error('Video Statement ' + that.id + ': ' + res.name + ' failed to load!');
      that.ABORT = true;
    });
  }

  loader.load(onAssetsLoaded);

  var waitForWebfont = function waitForWebfont(timeout) {
    var textStyle = _pixi.baseTextStyle.clone(),
        webFont = (Array.isArray(textStyle.fontFamily) ? textStyle.fontFamily[0] : textStyle.fontFamily.split(",")[0]).split(" !")[0],
        timespent = 0,
        checks = _pixi.webfontSizeCheck ? Array.isArray(_pixi.webfontSizeCheck) ? _pixi.webfontSizeCheck : _pixi.webfontSizeCheck.split(',') : [];

    if (!timeout) timeout = 5 * 1000;
    textStyle.fontFamily = [webFont, "Arial"];
    textStyle.fontSize = 300;
    return new Promise(function (resolve, reject) {
      var waitForWebfontInner = function waitForWebfontInner() {
        if (!checks.length || !checks[0]) return resolve();
        var w = PIXI.TextMetrics.measureText('The quick brown fox jumped over the lazy dog', textStyle).width,
            results = [];
        checks.forEach(function (check) {
          var operator = check.substr(0, 1),
              num = parseFloat(check.substr(1));
          results.push(operator === '<' && w < num || operator === '=' && w == num || operator === '>' && w > num);
        });
        if (results.every(function (b) {
          return b;
        })) return resolve();else {
          timespent += 100;
          if (timeout && timeout > 0 && timespent >= timeout) return reject(new Error('Waiting for webfont to load timed out (' + Math.round(timeout / 100) / 10 + 'secs)'));else setTimeout(waitForWebfontInner, 100);
        }
      };

      waitForWebfontInner();
    });
  };

  function onAssetsLoaded(loader, resources) {
    if (that.DEBUG) console.log('Video Statement ' + that.id + ': all resources loaded');
    _pixi.resources = resources; // Create loading sprite

    _pixi.loading = new PIXI.Sprite(resources['loading'].texture);
    _pixi.loading.name = 'loading';
    _pixi.loading.zIndex = 9999; // Above all

    var sfac = Math.round(20 * Math.min(_pixi.loadingWidth * _pixi.WIDTH, resources['loading'].data.naturalWidth) / resources['loading'].data.naturalWidth) / 20; // Scale to given fraction of canvas width

    _pixi.loading.anchor.set(0.5);

    _pixi.loading.scale.set(sfac, sfac);

    _pixi.loading.position.set(_pixi.WIDTH / 2, _pixi.HEIGHT / 2);

    _pixi.loading.visible = false;

    _pixi.app.stage.addChild(_pixi.loading);

    _pixi.showLoading = function () {
      if (_pixi.loading.visible) return;

      _pixi.app.stage.removeChild(_pixi.loading);

      _pixi.app.stage.addChildAt(_pixi.loading, _pixi.app.stage.children.length - 1); // Is this needed now making use of z-index?


      _pixi.loading.visible = true;
      _pixi.loadingSetIntervalHandle = setInterval(function () {
        _pixi.loading.rotation = (_pixi.loading.rotation + 2 * Math.PI / _pixi.loadingSteps) % (2 * Math.PI);
      }, 1000 * _pixi.loadingRotationTime / _pixi.loadingSteps);
    };

    _pixi.hideLoading = function () {
      if (!_pixi.loading.visible) return;
      clearInterval(_pixi.loadingSetIntervalHandle);
      _pixi.loadingSetIntervalHandle = null;
      _pixi.loading.visible = false;
    }; // Create play button
    // TODO allow passing an image (texture sprite) for play button, similar to loading


    _pixi.play = new PIXI.Graphics();

    _pixi.play.draw = function () {
      this.clear() // TODO new v5.2.0 graphics.geometry.invalidate() ??
      .beginFill(0x0, 0.5).drawRoundedRect(0, 0, 100, 100, 10).endFill().beginFill(0xffffff).moveTo(36, 30).lineTo(36, 70).lineTo(70, 50);
    };

    _pixi.play.drawFocused = function () {
      this.clear() // TODO new v5.2.0 graphics.geometry.invalidate() ??
      .lineStyle(1, 0x4D90FE).drawRoundedRect(-1, -1, 102, 102, 11).lineStyle(0).endFill().beginFill(0x0, 0.5).drawRoundedRect(0, 0, 100, 100, 10).endFill().beginFill(0xffffff).moveTo(36, 30).lineTo(36, 70).lineTo(70, 50);
    };

    _pixi.play.draw();

    _pixi.play.name = 'play';
    _pixi.play.zIndex = 9998; // Above all except loading

    _pixi.play.position.set((_pixi.WIDTH - _pixi.play.width) / 2, (_pixi.HEIGHT - _pixi.play.height) / 2);

    _pixi.play.interactive = true;
    _pixi.play.buttonMode = true;
    _pixi.play.visible = false;

    _pixi.play.on('pointertap', that.play.bind(that));

    app.stage.addChild(_pixi.play);
    _pixi.play.$el = $('<button role="button" type="button" aria-pressed="false">Play</button>');

    _pixi.play.$el.on('click', function (e) {
      _pixi.play.emit('pointertap');
    });

    _pixi.play.$el.on('focus', function (e) {
      _pixi.play.drawFocused();
    });

    _pixi.play.$el.on('blur', function (e) {
      _pixi.play.draw();
    });

    _pixi.play.$el.appendTo(app.view); // Create interactive hand sprite and text


    if (resources['interactive'] && resources['interactive'].texture) {
      // Sprite
      _pixi.interactive = new PIXI.Sprite(resources['interactive'].texture);
      _pixi.interactive.name = 'interactive';

      var _sfac = WIDTH / 8 / resources['interactive'].data.naturalWidth; // Scale to 8th width


      _pixi.interactive.scale.set(_sfac, _sfac);

      _pixi.interactive.position.set(WIDTH / 8, HEIGHT - _pixi.interactive.height * 1.75);

      _pixi.interactive.rotation = 30 * Math.PI / 180;
      _pixi.interactive.alpha = 0; //_pixi.interactive.visible = false
      // Interactive text

      var textStyle = _pixi.baseTextStyle.clone(); // TODO parameterise font style


      textStyle.fontSize = 16;
      var interactiveString = 'Interactive!';
      var textMetrics = PIXI.TextMetrics.measureText(interactiveString, textStyle);
      _pixi.interactiveText = new PIXI.Text(interactiveString, textStyle);
      _pixi.interactiveText.name = 'interactiveText';

      _pixi.interactiveText.position.set(WIDTH / 8 - textMetrics.width / 2, HEIGHT - _pixi.interactive.height / 2);

      _pixi.interactiveText.alpha = 0;
      app.stage.addChild(_pixi.interactive, _pixi.interactiveText);
    } // Wait for webfont to load


    _pixi.assetsLoaded = true;
    _pixi.webfontLoaded = false;
    if (that.DEBUG) console.log('Video Statement ' + that.id + ': waiting for webfont');
    waitForWebfont(5000).then(function () {
      if (that.DEBUG) console.log('Video Statement ' + that.id + ': webfont loaded');
      _pixi.webfontLoaded = true;
    }).catch(function () {
      if (that.DEBUG) console.log('Video Statement ' + that.id + ': webfont loading timed out');
      _pixi.webfontLoaded = true;
    });
  }
  /***************
   * Init Shared *
   ***************/


  _pixi.jarFigureStyle = _pixi.baseTextStyle.clone();
  _pixi.jarFigureStyle.align = 'center';
  _pixi.jarFigureLabelStyle = _pixi.jarFigureStyle.clone(); //TODO parameterise fontWeight? Other paramerers handled in jarIn.js

  _pixi.coinsContainer = new PIXI.Container();
  _pixi.coinsContainer.name = 'coinsContainer';
  app.stage.addChild(_pixi.coinsContainer); // Create tooltip

  if (this.config.scenes.showTooltip || this.config.scenes.showTooltip === undefined || this.config.scenes.showTooltip === "") {
    var tooltipTextStyle = _pixi.baseTextStyle.clone();

    if (this.config.scenes.tooltipFont && this.config.scenes.tooltipFont.length) tooltipTextStyle.fontFamily = this.config.scenes.tooltipFont;
    if (this.config.scenes.tooltipColor || this.config.scenes.tooltipColor === 0) tooltipTextStyle.fill = (0, _utils.colorStringToInt)(this.config.scenes.tooltipColor);
    tooltipTextStyle.fontSize = this.config.scenes.tooltipFontSize ? Number(this.config.scenes.tooltipFontSize) : 18;
    var tooltip = _pixi.tooltip = new PIXI.Container(),
        tooltipBg = new PIXI.Graphics(),
        tooltipTextString = "Contributions",
        tooltipTextMetrics = PIXI.TextMetrics.measureText(tooltipTextString, tooltipTextStyle),
        tooltipH = tooltipTextMetrics.height * 1.5,
        tooltipW = tooltipTextMetrics.width + 30,
        tooltipText = new PIXI.Text(tooltipTextString, tooltipTextStyle);
    tooltipBg.beginFill(this.config.scenes.tooltipBg ? (0, _utils.colorStringToInt)(this.config.scenes.tooltipBg) : 0xffffff, this.config.scenes.tooltipBgAlpha ? Number(this.config.scenes.tooltipBgAlpha) : 0.8);
    tooltipBg.lineStyle(this.config.scenes.tooltipBorderWidth ? Number(this.config.scenes.tooltipBorderWidth) : 1.5, this.config.scenes.tooltipBorderColor ? (0, _utils.colorStringToInt)(this.config.scenes.tooltipBorderColor) : 0x999999);
    tooltipBg.drawRect(0, 0, tooltipW, tooltipH);
    tooltipBg.endFill(); //tooltipBg.cacheAsBitmap = true

    tooltipText.position.set(15, tooltipTextMetrics.height * 0.25);
    tooltip.addChild(tooltipBg, tooltipText);
    tooltip.name = 'tooltip';
    tooltip.position.set(150, 150);
    tooltip.alpha = 0;
    app.stage.addChild(tooltip);
  }
  /***********************
   * Convenience methods *
   ***********************/


  _pixi.makeFigure = function (num) {
    var fig = Math.abs(num) < 1 ? Math.abs(num) : Math.round(Math.abs(num));
    var txt = (num < 0 ? '–' : '') + '£' + fig.toFixedCommas();
    var textMetrics = PIXI.TextMetrics.measureText(txt, _pixi.jarFigureStyle);
    var figure = new PIXI.Text(txt, _pixi.jarFigureStyle);
    figure.anchor.set(0.5);
    figure.position.set(WIDTH / 2, textMetrics.height / 2);
    return figure;
  };

  _pixi.makeFigureLabel = function (txt) {
    var figureTextMetrics = PIXI.TextMetrics.measureText("£000", _pixi.jarFigureStyle),
        figureLabelTextMetrics = PIXI.TextMetrics.measureText(txt, _pixi.jarFigureLabelStyle);
    var label = new PIXI.Text(txt, _pixi.jarFigureLabelStyle);
    label.position.set(WIDTH / 2 - figureLabelTextMetrics.width / 2, figureTextMetrics.height);
    return label;
  };

  _pixi.setTooltip = function (text) {
    tooltipTextMetrics = PIXI.TextMetrics.measureText(text, tooltipTextStyle);
    _pixi.tooltip.children[1].text = text;
    _pixi.tooltip.width = _pixi.tooltip.children[0].width = tooltipTextMetrics.width + 30;
  };

  _pixi.tooltipIn = function (duration) {
    duration = duration || 0.1;
    TweenMax.to(_pixi.tooltip, duration, {
      pixi: {
        alpha: 1
      }
    });
  };

  _pixi.tooltipOut = function (duration) {
    duration = duration || 0.1;
    TweenMax.to(_pixi.tooltip, duration, {
      pixi: {
        alpha: 0
      }
    });
  };

  _pixi.tooltipLookupObj = {
    'start': (0, _utils.getString)('startBalanceJar', that),
    'transfers': (0, _utils.getString)('transfersJar', that),
    'withdrawals': (0, _utils.getString)('withdrawalsJar', that),
    'eeConts': (0, _utils.getString)('employeeContributionsJar', that),
    'erConts': (0, _utils.getString)('employerContributionsJar', that),
    'investmentReturn': (0, _utils.getString)('investmentReturnJar', that),
    'charges': (0, _utils.getString)('chargesJar', that)
  };

  _pixi.tooltipLookup = function (key) {
    return _pixi.tooltipLookupObj[key] ? _pixi.tooltipLookupObj[key] : 'Other';
  };

  _pixi.tooltipPointerOver = function (e) {
    if (that.pixi.jar.alpha < 1) return;
    that.pixi.setTooltip(that.pixi.tooltipLookup(this['_group']));
    if (this.position.x < WIDTH / 2) that.pixi.tooltip.position.set(this.position.x + 8, this.position.y + 8);else that.pixi.tooltip.position.set(this.position.x - that.pixi.tooltip.width - 2, this.position.y + 2);
    that.pixi.tooltipIn();
  };

  _pixi.tooltipPointerOut = function (e) {
    if (that.pixi.jar.alpha < 1) return;
    if (that.pixi.tooltip.alpha < 0.1) return;else that.pixi.tooltipOut();
  }; // Get a given number of squares from the top of the jar, using given breakdown between different pots


  _pixi.gimme = function (n, potOrder) {
    var result = {},
        total = 0,
        i = 0;
    potOrder = potOrder ? Array.isArray(potOrder) ? potOrder : [potOrder] : ["transfers", "start", "investmentReturn", "erConts", "eeConts"];

    while (total < n && i < potOrder.length) {
      if (that.pixi.pots[potOrder[i]] && that.pixi.pots[potOrder[i]].length) {
        var ordered = that.pixi.pots[potOrder[i]].filter(function (actor) {
          return actor.alpha > 0.5;
        }).sort(function (a, b) {
          return a.y > b.y ? 1 : a.y < b.y ? -1 : 0;
        });
        result[potOrder[i]] = ordered.slice(0, n - total);
        total += result[potOrder[i]].length;
      }

      i++;
    }

    return result;
  };

  PIXI.Graphics.prototype.roundLine = function (x1, y1, x2, y2, w, c) {
    var adj = x2 - x1,
        opp = y2 - y1,
        a = Math.atan(opp / adj);
    var ax1 = x1 + Math.cos(a) * w / 2,
        ay1 = y1 + Math.sin(a) * w / 2,
        ax2 = x2 - Math.cos(a) * w / 2,
        ay2 = y2 - Math.sin(a) * w / 2;
    this.lineStyle(w, c);
    this.moveTo(ax1, ay1);
    this.lineTo(ax2, ay2);
    this.lineStyle(0);
    this.beginFill(c, 1);
    this.drawCircle(ax1, ay1, w / 2);
    this.drawCircle(ax2, ay2, w / 2);
    this.endFill();
    this.lineStyle(w, c);
  };
  /**************************
   * Add to stage functions *
   **************************/


  _pixi.addCircle = function (x, y, r, fill, b2) {
    var props;
    if (_typeof(x) === 'object') props = x;else props = {
      x: x || 0,
      y: y || 0,
      r: r || 1,
      fill: fill || 0x000000
    };
    if (b2 === undefined) b2 = true;
    var graphics = new PIXI.Graphics();
    graphics.beginFill(props.fill);
    graphics.drawCircle(0, 0, props.r * SCALE * (1 - MARGIN));
    graphics.endFill();
    graphics.x = props.x * SCALE;
    graphics.y = props.y * SCALE;
    if (b2) graphics.body = that.box2d.addCircle(props.x, props.y, props.r); //graphics.cacheAsBitmap = true;

    app.stage.addChild(graphics);
    return graphics;
  };

  _pixi.addB2Circle = function (x, y, r, fill, zIndex, group) {
    var props;
    if (_typeof(x) === 'object') props = x;else props = {
      x: x || 0,
      y: y || 0,
      r: r,
      fill: fill || 0x000000
    };
    if (props.r === undefined) props.r = props.s ? props.s : 1;
    var coin;

    if (fill.baseTexture) {
      coin = new PIXI.Sprite(fill);
      coin.anchor.set(0.5);
      coin.scale.set(2 * props.r * (1 - that.pixi.MARGIN) * that.pixi.SCALE / fill.baseTexture.realWidth); // Scale to pixel size = ~0.5m wide in b2World
    } else {
      coin = new PIXI.Graphics();
      coin.beginFill(props.fill);
      if (props.r > 1E-4) coin.drawCircle(0, 0, props.r * SCALE * (1 - MARGIN));
      coin.endFill();
    }

    coin.position.set(props.x * that.pixi.SCALE, props.y * that.pixi.SCALE);
    coin.body = that.box2d.addCircle(props.x, props.y, props.r);
    if (group) coin['_group'] = group;else coin['_group'] = 'default';

    if (that.config.scenes.showTooltip || that.config.scenes.showTooltip === undefined) {
      coin.interactive = true;
      coin.on('pointerover', that.pixi.tooltipPointerOver);
      coin.on('pointerout', that.pixi.tooltipPointerOut);
    }

    if (zIndex !== undefined) {
      //app.stage.addChildAt(coin, zIndex); // Add to a separate container so they can be easily faded together
      that.pixi.coinsContainer.addChildAt(coin, zIndex);
    } else {
      //app.stage.addChild(coin);
      that.pixi.coinsContainer.addChild(coin);
    }

    return coin;
  };

  _pixi.addEllipse = function (x, y, a, b, fill, zIndex, b2, group, tooltip) {
    var props;
    if (_typeof(x) === 'object') props = x;else props = {
      x: x || 0,
      y: y || 0,
      a: a || 1,
      b: b || 1,
      fillStyle: fill || 0x000000
    };
    if (props.w && !props.a) props.a = props.w / 2;
    if (props.h && !props.b) props.b = props.h / 2;
    if (b2 === undefined) b2 = true;
    var graphics = new PIXI.Graphics();
    graphics.beginFill(props.fillStyle);
    graphics.drawEllipse(0, 0, props.a * SCALE * (1 - MARGIN), props.b * SCALE * (1 - MARGIN));
    graphics.endFill();
    graphics.x = props.x * SCALE;
    graphics.y = props.y * SCALE;
    if (b2) graphics.body = that.box2d.addEllipse(props.x, props.y, props.a, props.b); //graphics.cacheAsBitmap = true;

    app.stage.addChild(graphics);
    return graphics;
  };

  _pixi.addRect = function (x, y, w, h, fill, r, zIndex) {
    var props;
    if (_typeof(x) === 'object') props = x;else props = {
      x: x || 0,
      y: y || 0,
      w: w,
      h: h,
      fillStyle: fill || 0x000000,
      r: r
    };

    if (props.w === undefined && props.h === undefined) {
      props.h = props.w = props.s ? props.s : 1;
    } else {
      if (props.w === undefined && props.h) props.w = props.h;else if (props.h === undefined && props.w) props.h = props.w;
    }

    var graphics = new PIXI.Graphics();
    graphics.beginFill(props.fillStyle);
    if (props.r > 1E-4) graphics.drawRoundedRect(-1 * props.w / 2 * props.w / 2, -1 * props.h / 2 * props.h / 2, props.w, props.h, props.r);else graphics.drawRect(-1 * props.w / 2, -1 * props.h / 2, props.w, props.h);
    graphics.endFill();
    graphics.position.set(props.x, props.y); //graphics.cacheAsBitmap = true;

    if (zIndex !== undefined) app.stage.addChildAt(graphics, zIndex);else app.stage.addChild(graphics);
    return graphics;
  };

  _pixi.addB2Rect = function (x, y, w, h, fill, r, zIndex, group) {
    var props;
    if (_typeof(x) === 'object') props = x;else props = {
      x: x || 0,
      y: y || 0,
      w: w,
      h: h,
      fillStyle: fill || 0x000000,
      r: r
    };

    if (props.w === undefined && props.h === undefined) {
      props.h = props.w = props.s ? props.s : 1;
    } else {
      if (props.w === undefined && props.h) props.w = props.h;else if (props.h === undefined && props.w) props.h = props.w;
    }

    var graphics = new PIXI.Graphics();
    graphics.beginFill(props.fillStyle);
    if (props.r > 1E-4) graphics.drawRoundedRect(-1 * SCALE * props.w / 2 + (1 - MARGIN) * props.w / 2, -1 * SCALE * props.h / 2 + (1 - MARGIN) * props.h / 2, SCALE * props.w * (1 - MARGIN), SCALE * props.h * (1 - MARGIN), SCALE * props.r);else graphics.drawRect(-1 * SCALE * props.w / 2, -1 * SCALE * props.h / 2, SCALE * props.w * (1 - MARGIN), SCALE * props.h * (1 - MARGIN));
    graphics.endFill();
    graphics.position.set(props.x * SCALE, props.y * SCALE);
    graphics.body = that.box2d.addRect(props.x, props.y, props.w, props.h);
    if (group) graphics['_group'] = group;else graphics['_group'] = 'default';

    if (that.config.scenes.showTooltip || that.config.scenes.showTooltip === undefined) {
      graphics.interactive = true;
      graphics.on('pointerover', that.pixi.tooltipPointerOver);
      graphics.on('pointerout', that.pixi.tooltipPointerOut);
    }

    if (zIndex !== undefined) app.stage.addChildAt(graphics, zIndex);else app.stage.addChild(graphics);
    return graphics;
  };
  /**************
   * Remove Fns *
   **************/


  _pixi.remove = function (graphics) {
    if (graphics.body) that.box2d.world.DestroyBody(graphics.body);
    graphics.parent ? graphics.parent.removeChild(graphics) : app.stage.removeChild(graphics);
    return 1;
  };

  _pixi.removeAll = function (reallyAll) {
    var n = 0;

    for (var i = app.stage.children.length - 1; i >= 0; i--) {
      var c = app.stage.children[i];
      if (c.body) that.box2d.world.DestroyBody(c.body);else if (!reallyAll) continue;
      n++;
      app.stage.removeChild(c);
    }

    return n;
  };
  /**********
   * Return *
   **********/


  return _pixi;
}
},{"../utils.js":"src/utils.js"}],"src/setup/box2d.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(config) {
  /*********
   * Setup *
   *********/
  // Aliases
  var b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2Body = Box2D.Dynamics.b2Body,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2World = Box2D.Dynamics.b2World,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2AABB = Box2D.Collision.b2AABB,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw; // Vars

  var that = this,
      pixi = this.pixi,
      _box2d = {};
  var world,
      boundary,
      bodyDef,
      fixDef,
      SCALE = pixi.SCALE,
      MARGIN = pixi.MARGIN,
      WIDTH = _box2d.WIDTH = (pixi.WIDTH || 512) / SCALE,
      HEIGHT = _box2d.HEIGHT = (pixi.HEIGHT || 640) / SCALE;
  _box2d.mouseJoint = null;
  _box2d.toRemove = []; // create world

  var gravity = new b2Vec2(0, 15);
  var doSleep = true;
  world = _box2d.world = new b2World(gravity, doSleep);
  /*************************
   * Query world functions *
   *************************/

  _box2d.getBodyAt = function (x, y) {
    if (x === undefined) return false;

    if (y === undefined) {
      if (x.x === undefined || x.y === undefined) return false;else {
        y = x.y;
        x = x.x;
      }
    }

    var pos = new Box2D.Common.Math.b2Vec2(x, y);
    var aabb = new Box2D.Collision.b2AABB();
    var epsilon = 5 / (pixi && pixi.SCALE || 40); // Allow 5px either side

    aabb.lowerBound.Set(x - epsilon, y - epsilon);
    aabb.upperBound.Set(x + epsilon, y + epsilon);
    var body;
    world.QueryAABB(function (fixture) {
      if (fixture.GetBody().GetType() != Box2D.Dynamics.b2BodyDef.b2_staticBody) {
        if (fixture.GetShape().TestPoint(fixture.GetBody().GetTransform(), pos)) {
          body = fixture.GetBody();
          return false; // Can stop now
        }
      }

      return true; // Keep going
    }, aabb);
    return body;
  };

  _box2d.getBodyAABB = function (body) {
    var aabb = new Box2D.Collision.b2AABB();
    aabb.lowerBound = {
      x: Infinity,
      y: Infinity
    };
    aabb.upperBound = {
      x: -Infinity,
      y: -Infinity
    };
    var f = body.GetFixtureList();

    while (f) {
      aabb.Combine(aabb, f.GetAABB());
      f = f.GetNext();
    }

    return aabb;
  };
  /*****************
   * Create bodies *
   *****************/


  bodyDef = new b2BodyDef();
  bodyDef.type = b2Body.b2_staticBody;
  bodyDef.position.x = WIDTH / 2;
  bodyDef.position.y = HEIGHT / 2; // init boundary

  if (config.boundary === undefined || config.boundary) {
    boundary = _box2d.boundary = world.CreateBody(bodyDef);
    fixDef = new b2FixtureDef();
    fixDef.shape = new b2PolygonShape();
    fixDef.density = 1;
    fixDef.friction = 0.1;
    fixDef.restitution = 0.5;
    var borderSize = 4; // bottom

    fixDef.shape.SetAsOrientedBox(WIDTH / 2 + borderSize * 2, borderSize / 2, new b2Vec2(0, HEIGHT / 2 + borderSize / 2));
    boundary.CreateFixture(fixDef); // left

    fixDef.shape.SetAsOrientedBox(borderSize / 2, HEIGHT + borderSize / 2, new b2Vec2(-1 * WIDTH / 2 - borderSize / 2, -HEIGHT / 2 + borderSize / 2));
    boundary.CreateFixture(fixDef); // right

    fixDef.shape.SetAsOrientedBox(borderSize / 2, HEIGHT + borderSize / 2, new b2Vec2(WIDTH / 2 + borderSize / 2, -HEIGHT / 2 + borderSize / 2));
    boundary.CreateFixture(fixDef); // reset friction

    fixDef.friction = 0.5;
  } // Create Jar


  bodyDef.type = b2Body.b2_staticBody;
  var jar = _box2d.jar = world.CreateBody(bodyDef);
  fixDef.shape = new b2PolygonShape();
  fixDef.shape.SetAsArray([new b2Vec2(-4.399415515363216, -8.424119424819946), new b2Vec2(-3.9431654661893845, -8.78661937713623), new b2Vec2(-3.50566565990448, -8.849119615554809), new b2Vec2(-3.5244128108024597, -8.48662085533142), new b2Vec2(-4.018162712454796, -8.174120259284972)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(-4.018162712454796, -8.174120259284972), new b2Vec2(-4.3869128450751305, -7.705370259284973), new b2Vec2(-4.799416046589613, -7.792869281768799), new b2Vec2(-4.399415515363216, -8.424119424819946)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(-4.3869128450751305, -7.705370259284973), new b2Vec2(-4.5806631073355675, -7.217869830131531), new b2Vec2(-4.905665805563331, -7.4491191625595095), new b2Vec2(-4.799416046589613, -7.792869281768799)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(-4.5806631073355675, -7.217869830131531), new b2Vec2(-4.5619141682982445, 0.21963157057762128), new b2Vec2(-4.9056661035865545, 0.29463075399398786), new b2Vec2(-4.905665805563331, -7.4491191625595095)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(-4.5619141682982445, 0.21963157057762128), new b2Vec2(-4.224414154887199, 0.8008816868066786), new b2Vec2(-4.593166075646877, 1.0446306347846983), new b2Vec2(-4.830666463822126, 0.6071307539939879), new b2Vec2(-4.9056661035865545, 0.29463075399398786)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(-4.224414154887199, 0.8008816868066786), new b2Vec2(-3.893164023756981, 1.0383816093206404), new b2Vec2(-4.143165871500969, 1.3883807167410849), new b2Vec2(-4.593166075646877, 1.0446306347846983)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(-3.893164023756981, 1.0383816093206404), new b2Vec2(-3.605663627386093, 1.1571316450834273), new b2Vec2(-3.8369161635637283, 1.5008807770907877), new b2Vec2(-4.143165871500969, 1.3883807167410849)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(-3.605663627386093, 1.1571316450834273), new b2Vec2(-2.255663573741913, 1.2446317479014395), new b2Vec2(-2.09941565990448, 1.613380818814039), new b2Vec2(-3.0681660771369934, 1.5508808784186838), new b2Vec2(-3.8369161635637283, 1.5008807770907877)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(-2.255663573741913, 1.2446317479014395), new b2Vec2(-0.768163800239563, 1.3196317508816717), new b2Vec2(-0.35566598176956177, 1.67588076852262), new b2Vec2(-2.09941565990448, 1.613380818814039)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(-0.768163800239563, 1.3196317508816717), new b2Vec2(1.2068367004394531, 1.3321318507194517), new b2Vec2(1.3068348169326782, 1.688380905613303), new b2Vec2(-0.35566598176956177, 1.67588076852262)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(1.2068367004394531, 1.3321318507194517), new b2Vec2(3.594335913658142, 1.1883819505572317), new b2Vec2(3.3818358182907104, 1.5696305625140665), new b2Vec2(1.3068348169326782, 1.688380905613303)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(3.594335913658142, 1.1883819505572317), new b2Vec2(4.119336009025574, 0.9446319967508314), new b2Vec2(4.413085579872131, 1.257130841910839), new b2Vec2(4.000585675239563, 1.4696307882666586), new b2Vec2(3.3818358182907104, 1.5696305625140665)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(4.119336009025574, 0.9446319967508314), new b2Vec2(4.431836009025574, 0.5946320325136183), new b2Vec2(4.725585579872131, 0.9321306675672529), new b2Vec2(4.413085579872131, 1.257130841910839)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(4.431836009025574, 0.5946320325136183), new b2Vec2(4.575585722923279, 0.050881731510162176), new b2Vec2(4.894335865974426, 0.307130444049835), new b2Vec2(4.725585579872131, 0.9321306675672529)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(4.575585722923279, 0.050881731510162176), new b2Vec2(4.581835865974426, -7.117868137359619), new b2Vec2(4.900585412979126, -7.192869257926941), new b2Vec2(4.894335865974426, 0.307130444049835)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(4.581835865974426, -7.117868137359619), new b2Vec2(4.269335865974426, -7.767868113517761), new b2Vec2(4.550585746765137, -8.067867827415466), new b2Vec2(4.8255854845047, -7.561618161201477), new b2Vec2(4.900585412979126, -7.192869257926941)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(4.269335865974426, -7.767868113517761), new b2Vec2(3.9255857467651367, -8.130368065834045), new b2Vec2(4.075585603713989, -8.586618375778198), new b2Vec2(4.550585746765137, -8.067867827415466)]);
  jar.CreateFixture(fixDef);
  fixDef.shape.SetAsArray([new b2Vec2(3.9255857467651367, -8.130368065834045), new b2Vec2(3.4193360805511475, -8.436618518829345), new b2Vec2(3.4443360567092896, -8.817868900299072), new b2Vec2(4.075585603713989, -8.586618375778198)]);
  jar.CreateFixture(fixDef); // Position Jar (note COM is at 0 0)

  var worldAABB = _box2d.getBodyAABB(jar),
      localAABB = new b2AABB();

  localAABB.lowerBound = jar.GetLocalPoint(worldAABB.lowerBound);
  localAABB.upperBound = jar.GetLocalPoint(worldAABB.upperBound);
  var jarh = worldAABB.upperBound.y - worldAABB.lowerBound.y;
  jar.SetPosition(new b2Vec2(WIDTH / 2, HEIGHT - localAABB.upperBound.y - (HEIGHT - jarh) / 2)); //-4/SCALE is to correct for extra space on image

  this.pixi.jarHeight = jarh * this.pixi.SCALE; // Create lid

  bodyDef.type = b2Body.b2_staticBody;
  bodyDef.position.x = WIDTH / 2;
  bodyDef.position.y = (HEIGHT - jarh) / 2 + 0.1;
  var lid = _box2d.lid = world.CreateBody(bodyDef);
  fixDef.shape = new b2PolygonShape();
  fixDef.shape.SetAsBox(WIDTH * 0.26, 0.2);
  lid.CreateFixture(fixDef);
  _box2d.lidFixture = lid.GetFixtureList(); //Actually returns first in linked list ("next" property), so this is OK
  //Reset

  bodyDef.position.x = WIDTH / 2;
  bodyDef.position.y = HEIGHT / 2;
  var listener = new Box2D.Dynamics.b2ContactListener();

  listener.BeginContact = function (contact) {
    //check if one of the fixtures is the lid
    var lidFixture, otherFixture;

    if (contact.GetFixtureA() === _box2d.lidFixture) {
      lidFixture = contact.GetFixtureA();
      otherFixture = contact.GetFixtureB();
    } else if (contact.GetFixtureB() === _box2d.lidFixture) {
      lidFixture = contact.GetFixtureB();
      otherFixture = contact.GetFixtureA();
    }

    if (!lidFixture) return;
    var lidBody = lidFixture.GetBody(),
        otherBody = otherFixture.GetBody(),
        numPoints = contact.GetManifold().m_pointCount,
        worldManifold = new Box2D.Collision.b2WorldManifold();
    contact.GetWorldManifold(worldManifold); //check if contact points are moving downward

    for (var i = 0; i < numPoints; i++) {
      var pointVel = otherBody.GetLinearVelocityFromWorldPoint(worldManifold.m_points[i]);
      if (pointVel.y < 0) return; //point is moving up, leave contact solid and exit
    } //no points are moving upward, contact should not be solid (allow passthrough)


    contact.SetEnabled(false);
  };

  listener.EndContact = function (contact) {
    //reset the default state of the contact in case it comes back for more
    contact.SetEnabled(true);
  }; // Empty implementations for unused methods.
  // listener.PreSolve = function(contact, oldManifold) { console.log('PreSolve',arguments) };
  // listener.PostSolve = function(contact, impulse) { console.log('PostSolve',arguments) };


  world.SetContactListener(listener);
  /**********************
   * Add body functions *
   **********************/

  _box2d.addCircle = function (x, y, r) {
    bodyDef.type = b2Body.b2_dynamicBody;
    bodyDef.position.x = x;
    bodyDef.position.y = y;
    var circle = world.CreateBody(bodyDef);
    fixDef.shape = new b2CircleShape(r);
    circle.CreateFixture(fixDef); //Reset def props

    bodyDef.position.x = 0;
    bodyDef.position.y = 0;
    fixDef.shape = new b2PolygonShape();
    return circle;
  };

  _box2d.addPolygon = function (x, y, vts) {
    bodyDef.type = b2Body.b2_dynamicBody;
    bodyDef.position.x = x;
    bodyDef.position.y = y;
    fixDef.shape = new b2PolygonShape();
    fixDef.shape.SetAsArray(vts);
    var poly = world.CreateBody(bodyDef);
    poly.CreateFixture(fixDef); //Reset

    bodyDef.position.x = 0;
    bodyDef.position.y = 0;
    fixDef.shape = new b2PolygonShape();
    return poly;
  };

  _box2d.addEllipse = function (x, y, a, b) {
    var q = 5,
        verts = [];
    bodyDef.type = b2Body.b2_dynamicBody;
    bodyDef.position.x = x;
    bodyDef.position.y = y;
    var ellipse = world.CreateBody(bodyDef);

    var thetaToX = function thetaToX(t, minus) {
      return (minus ? -1 : 1) * a * b / Math.sqrt(Math.pow(b, 2) + Math.pow(a, 2) * Math.pow(Math.tan(t), 2));
    };

    var radStep = Math.PI / (2 * (q + 1));
    verts.push(new b2Vec2(0, -b));

    for (var t = -1 * Math.PI / 2 + radStep; t < -1E-4; t += radStep) {
      var _x = thetaToX(t);

      verts.push(new b2Vec2(_x, _x * Math.tan(t)));
    }

    verts.push(new b2Vec2(a, 0));

    for (var _t = radStep; _t < Math.PI / 2 - 1E-4; _t += radStep) {
      var _x2 = thetaToX(_t);

      verts.push(new b2Vec2(_x2, _x2 * Math.tan(_t)));
    }

    verts.push(new b2Vec2(0, b));

    for (var _t2 = Math.PI / 2 + radStep; _t2 < Math.PI - 1E-4; _t2 += radStep) {
      var _x3 = thetaToX(_t2, true);

      verts.push(new b2Vec2(_x3, _x3 * Math.tan(_t2)));
    }

    verts.push(new b2Vec2(-a, 0));

    for (var _t3 = -1 * Math.PI + radStep; _t3 < -1 * Math.PI / 2 - 1E-4; _t3 += radStep) {
      var _x4 = thetaToX(_t3, true);

      verts.push(new b2Vec2(_x4, _x4 * Math.tan(_t3)));
    }

    fixDef.shape = new b2PolygonShape();
    var cutVerts = cutIntoPieSlicesOfMaxVerts(verts);
    cutVerts.forEach(function (vts, i, arr) {
      fixDef.shape.SetAsArray(vts);
      ellipse.CreateFixture(fixDef);
    }); //Reset

    bodyDef.position.x = 0;
    bodyDef.position.y = 0;
    fixDef.shape = new b2PolygonShape();
    return ellipse;
  };

  function cutIntoPieSlicesOfMaxVerts(vertices, max) {
    var b2Vec2 = Box2D.Common.Math.b2Vec2,
        cutVerts = [];
    max = max || 8;

    if (vertices.length > max) {
      var cut = [new b2Vec2(0, 0)],
          idx = 0,
          cutsNeeded = Math.ceil(vertices.length / (max - 2)),
          r = (vertices.length + cutsNeeded * 2) % max;
      r = r || max;

      while (cutVerts.length < cutsNeeded) {
        var numInCut = void 0;
        if (cutVerts.length == cutsNeeded - 2) numInCut = Math.ceil((max + r) / 2);else if (cutVerts.length == cutsNeeded - 1) numInCut = Math.floor((max + r) / 2);else numInCut = max;

        while (cut.length < numInCut && idx < vertices.length) {
          cut.push(vertices[idx++]);
        }

        if (idx >= vertices.length) cut.push(vertices[0]);
        cutVerts.push(cut);
        cut = [new b2Vec2(0, 0)];
        idx--;
      }
    } else cutVerts = [vertices];

    return cutVerts;
  }

  _box2d.addRect = function (x, y, w, h) {
    bodyDef.type = b2Body.b2_dynamicBody;
    bodyDef.position.x = x;
    bodyDef.position.y = y;
    fixDef.shape = new b2PolygonShape();
    fixDef.shape.SetAsBox(w / 2, h / 2);
    var rect = world.CreateBody(bodyDef);
    rect.CreateFixture(fixDef); //Reset

    bodyDef.position.x = 0;
    bodyDef.position.y = 0;
    fixDef.shape = new b2PolygonShape();
    return rect;
  };
  /**************
   * Debug Draw *
   **************/


  if (this.DEBUG && false) {
    //TODO disabled
    var debugView = document.createElement('canvas');
    debugView.className = 'video-statement-debug';
    debugView.setAttribute('width', pixi.WIDTH || 512);
    debugView.setAttribute('height', pixi.HEIGHT || 512);
    this.$el.append(debugView);
    debugView.addEventListener('contextmenu', function (e) {
      e.preventDefault();
      return false;
    });
    var b2DebugDraw = Box2D.Dynamics.b2DebugDraw;
    var debugDraw = new b2DebugDraw();
    debugDraw.SetSprite(debugView.getContext("2d"));
    debugDraw.SetDrawScale(SCALE);
    debugDraw.SetFillAlpha(0.3);
    debugDraw.SetLineThickness(1.0);
    debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
    world.SetDebugDraw(debugDraw);
  }
  /**********
   * Return *
   **********/


  return _box2d;
}
},{}],"src/setup/mouse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(config) {
  /*********
   * Setup *
   *********/
  // Vars
  var that = this;
  this.mouse = {}; // Event listeners

  function onMoveTouching(event) {
    var rect = that.pixi.app.view.getBoundingClientRect();

    if (event['changedTouches']) {
      var touch = event['changedTouches'][0];
      that.mouse.touchX = (touch.clientX - rect.left) / rect.width * (that.box2d.WIDTH || 512 / 40);
      that.mouse.touchY = (touch.clientY - rect.top) / rect.height * (that.box2d.HEIGHT || 640 / 40);
    } else {
      that.mouse.touchX = (event.clientX - rect.left) / rect.width * (that.box2d.WIDTH || 512 / 40);
      that.mouse.touchY = (event.clientY - rect.top) / rect.height * (that.box2d.HEIGHT || 640 / 40);
    }
  }

  document.addEventListener('mousedown', function (event) {
    that.mouse.isPointerDown = true;
    onMoveTouching(event);
    document.addEventListener('mousemove', onMoveTouching, true);
  }, true);
  document.addEventListener('mouseup', function (event) {
    document.removeEventListener('mousemove', onMoveTouching, true);
    that.mouse.isPointerDown = false;
    that.mouse.touchX = undefined;
    that.mouse.touchY = undefined;
  }, true);
  document.addEventListener('touchstart', function (event) {
    that.mouse.isPointerDown = true;
    onMoveTouching(event);
    document.addEventListener('touchmove', onMoveTouching, true);
  }, true);
  document.addEventListener('touchend', function (event) {
    document.removeEventListener('touchmove', onMoveTouching, true);
    that.mouse.isPointerDown = false;
    that.mouse.touchX = undefined;
    that.mouse.touchY = undefined;
  }, true);
}
},{}],"src/setup/howler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/*Howl.prototype.initPlayingEvent = function(intervalTime) {
  intervalTime = intervalTime ? intervalTime : 1000/60
  var self = this;
  self._onplaying = [];
  self.on('play', function (soundId) {
    self._onplayingInterval = setInterval(function () {
      self._emit('playing', soundId, [self.seek(soundId),self.duration(soundId)]);
    }, intervalTime);
  });
  self.on('end', function(){
    clearInterval(self._onplayingInterval);
  });
  self.on('pause', function(){
    clearInterval(self._onplayingInterval);
  });
  self.on('stop', function(){
    clearInterval(self._onplayingInterval);
  });
}*/
Howl.prototype.hasNext = function () {
  return this._next ? true : false;
};

Howl.prototype.getNext = function (n) {
  if (n === undefined || Number.isNaN(+n) || n < 1) n = 1;
  var result = false;

  if (this.hasNext()) {
    result = this._next, n--;

    while (n > 0 && result.hasNext()) {
      result = result._next;
      n--;
    }
  }

  return result;
};

Howl.prototype.hasPrev = function () {
  return this._prev ? true : false;
};

Howl.prototype.getPrev = function (n) {
  if (n === undefined || Number.isNaN(+n) || n < 1) n = 1;
  var result = false;

  if (this.hasPrev()) {
    result = this._prev, n--;

    while (n > 0 && result.hasPrev()) {
      result = result._prev;
      n--;
    }
  }

  return result;
};

Howl.prototype.getLast = function (n) {
  if (!this.hasNext()) return this;else return this.getNext(Infinity);
};

Howl.prototype.getFirst = function (n) {
  if (!this.hasPrev()) return this;else return this.getPrev(Infinity);
};

Howl.prototype.getIndex = function () {
  return this._index;
}; // Was needed since
// desktop => use html5 for better preload
// mobile => iOS volume breaks if html5, don't use... now removed


function isMobile() {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(window.navigator.userAgent);
}

function _default(config) {
  this.audio.music = new Howl({
    src: config.music || "./static/WA8/vbs/audio/music.mp3",
    // "//music.wixstatic.com/mp3/b29e13_181d749818af4a46b35d5db7ef245112.mp3",
    // "//music.wixstatic.com/mp3/b29e13_cfc1f0ad6c044412a30f728ddc687656.mp3",
    // "https://www.bensound.org/bensound-music/bensound-inspire.mp3",
    volume: parseFloat(config.musicVolume) || 0.04,
    //html5: !isMobile(), // Removed since seeking didn't work for HTML5
    preload: true
  });
  this.audio.musicInTime = Math.max(0, parseFloat(config.musicInTime)) || 0;
  this.audio.musicOutTime = parseFloat(config.musicOutTime) || Infinity; // _howler.music.initPlayingEvent()
  // _howler.music.on('playing', function(soundId, data){
  //   console.log('playing')
  // });
  // return audio;
}
},{}],"src/setup/speech.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(config) {
  var that = this,
      audio = this.audio;
  this.audio.speech = [];
  this.audio.speechVolume = config.speechVolume || 0.45;

  this.audio.queueSpeech = function (speech) {
    var obj = {};

    if (typeof speech === 'string') {
      if (speech.replace(/\s/g, '').substr(0, 6) === '<speak') {
        obj.ssml = speech;
        obj.text = speech.replace(/<[^>]*>/g, '').replace(/ +/g, ' ').replace('Life Sight', 'LifeSight');
      } else {
        obj.text = speech;
        obj.ssml = '<speak>' + speech.replace('LifeSight', 'Life Sight').replace(' 2019', ' 20 19').replace(' 2020', ' 20 20') + '</speak>';
      }
    } else obj = speech; //must pass ssml and/or text, index, and ID


    if (obj.url && !obj.howl) {
      obj.howl = new Howl({
        src: Array.isArray(obj.url) ? obj.url : [obj.url],
        volume: obj.volume || audio.speechVolume,
        preload: true
      }).on('loaderror', function (soundId) {
        console.error('speech load error', obj.id);
      });
    }

    delete obj.url;
    delete obj.volume;
    obj.index = obj.index === 0 ? 0 : obj.index || audio.speech.length;
    obj.id = obj.id || 'speech' + obj.index;
    audio.speech.push(obj);
    return obj;
  };

  var wavenetRequest = function wavenetRequest(ssml) {
    return gapi.client.request({
      'path': 'https://texttospeech.googleapis.com/v1/text:synthesize',
      'method': 'POST',
      'body': {
        input: {
          ssml: ssml
        },
        voice: {
          languageCode: config.gapi.languageCode || "en-GB",
          name: config.gapi.voice || "en-GB-Wavenet-A",
          ssmlGender: config.gapi.gender || "FEMALE"
        },
        audioConfig: {
          audioEncoding: "MP3",
          speakingRate: parseFloat(config.gapi.speakingRate) || 1,
          pitch: parseFloat(config.gapi.pitch) || 0,
          volumeGainDb: parseFloat(config.gapi.volumeGainDb) || 0,
          effectsProfileId: typeof config.gapi.effectsProfileId === 'string' && config.gapi.effectsProfileId ? [config.gapi.effectsProfileId] : config.gapi.effectsProfileId || ["headphone-class-device" //"handset-class-device"
          //"small-bluetooth-speaker-class-device"
          ] //sampleRateHertz: config.gapi.sampleRateHertz || undefined

        }
      }
    });
  };
  /**
   * Funcion to create Howler objects
   */


  this.audio.getWavenet = function () {
    return new Promise(function (resolve, reject) {
      var toLoad = audio.speech.filter(function (obj) {
        return !obj.howl;
      });
      audio.speechesToLoad = toLoad.length;
      if (!toLoad.length) return resolve(0);
      var gapiBatch = gapi.client.newBatch();
      toLoad.forEach(function (obj) {
        if (obj.ssml) gapiBatch.add(wavenetRequest(obj.ssml), {
          id: obj.id
        });else if (Array.isArray(obj.text)) gapiBatch.add(wavenetRequest('<speak>' + obj.text.join(' ') + '</speak>'), {
          id: obj.id
        });else gapiBatch.add(wavenetRequest('<speak>' + obj.text + '</speak>'), {
          id: obj.id
        });
      });
      gapiBatch.then(function (response) {
        var ids = Object.keys(response.result);
        ids.forEach(function (id) {
          var idx = audio.speech.findIndex(function (obj) {
            return obj.id === id;
          });

          if (idx > -1 && response.result[id].result.audioContent) {
            var dataSrc = 'data:audio/mp3;base64,' + response.result[id].result.audioContent;
            audio.speech[idx].howl = new Howl({
              src: [dataSrc],
              volume: config.speechVolume || 0.45,
              preload: true
            }).on('load', function (soundId) {
              audio.speechesLoaded++;
            }).on('loaderror', function (soundId) {
              console.error('getWavenet howl load error', id);
            }); // let snd      = document.createElement('audio');
            // snd.controls = 'controls';
            // snd.src      = src;
            // snd.type     = 'audio/mpeg';
            // document.body.appendChild(snd)
          } else if (that.DEBUG) {
            console.warn('SpeechError: No id?');
          }
        });
        resolve(audio.speechesToLoad);
      }, function (reason) {
        console.error('TTS Error: ' + reason.result.error.message);
        reject(reason.result.error);
      });
    });
  };

  audio.getSpeech = function () {
    audio.speechesLoaded = 0;
    if (that.DEBUG) console.log('Video Statement ' + that.id + ': fetching speech');
    return new Promise(function (resolve, reject) {
      var waitForGapi = function waitForGapi(timeout) {
        var timespent = 0;
        if (!timeout) timeout = 10 * 1000;
        return new Promise(function (resolveGapi, rejectGapi) {
          var waitForGapiInner = function waitForGapiInner() {
            if (audio.speech.gapi_loaded) return resolveGapi();else {
              timespent += 100;
              if (timeout && timeout > 0 && timespent >= timeout) return rejectGapi(new Error('Waiting for google API client to load timed out (' + Math.round(timeout / 100) / 10 + 'secs)'));else setTimeout(waitForGapiInner, 100);
            }
          };

          waitForGapiInner();
        });
      };

      waitForGapi().then(audio.getWavenet).then(function () {
        // Sort by index
        audio.speech = audio.speech.sort(function (a, b) {
          return a.index < b.index ? -1 : a.index > b.index ? 1 : 0;
        }); // Add event to automatically play next track if one has been set

        audio.speech.forEach(function (obj, i, arr) {
          arr[i].howl.on('end', function () {
            if (this.hasNext()) {
              //_next audio files are added in build.js
              audio.speech.currentlyPlaying = this.getNext();
              audio.speech.currentlyPlayingId = this.getNext().play();
            } else {
              audio.speech.currentlyPlaying = null;
              audio.speech.currentlyPlayingId = null;
            }
          });
        });

        function allSpeechesLoaded() {
          return new Promise(function (res, rej) {
            var waited = 0;

            (function waitForAllSpeechesToLoad() {
              if (audio.speechesLoaded == audio.speechesToLoad) return res(audio.speechesLoaded);else if (waited > 10000) return rej(audio.speechesLoaded);else {
                waited += 100;
                setTimeout(waitForAllSpeechesToLoad, 100);
              }
            })();
          });
        }

        allSpeechesLoaded().then(function (numLoaded) {
          if (that.DEBUG) console.log('Video Statement ' + that.id + ': speech loaded');
          resolve(numLoaded);
        }).catch(function (err) {
          console.error('Video Statement ' + that.id + ': waiting for speech to load timed out (10 sec)');
          reject(err);
        });
      }).catch(function (err) {
        reject(err);
      });
    });
  };

  audio.getById = function (id) {
    return audio.speech.find(function (obj) {
      return obj.id == id;
    });
  };

  audio.getIndexById = function (id) {
    return audio.speech.findIndex(function (obj) {
      return obj.id == id;
    });
  };

  audio.getByIndex = function (idx) {
    return audio.speech[idx];
  };

  audio.getHowlById = function (id) {
    return audio.speech.find(function (obj) {
      return obj.id == id;
    }).howl;
  };

  audio.getHowlByIndex = function (idx) {
    return audio.speech[idx].howl;
  };

  audio.getByTime = function (time) {
    return audio.speech.find(function (obj) {
      return obj.startTime <= time && obj.startTime + obj.howl.duration() > time;
    });
  };
}
},{}],"src/scenes/videoStart.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources,
      that = this;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT,
      videoTexture,
      videoControler,
      videoSprite; // resources.video.data.preload = 'auto';
  // resources.video.data.autoload = true;
  // resources.video.data.autoplay = false;

  /*var waitForVideo = function(timeout) {
      let timeSpent = 0
      if(!timeout) timeout = 30
      return new Promise(function (resolve, reject) {
          var waitForVideoInner = function(){
              if(!resources.video) return reject();
              if(resources.video.data && resources.video.data.readyState == 4){
                  return resolve();
              } else {
                  timespent += 100
                  if(timeout && timespent >= timeout) return reject(new Error('Waiting for video to load timed out ('+(Math.round(timeout/100)/10)+'secs)'))
                  else setTimeout(waitForVideoInner, 100);
              }
          }
          waitForVideoInner()
      });
  }*/

  videoTexture = PIXI.Texture.from(resources.video.data, {
    resourceOptions: {
      autoPlay: false
    }
  });
  videoControler = this.pixi.videoControler = videoTexture.baseTexture.resource.source;
  videoControler.muted = true;
  videoSprite = new PIXI.Sprite(videoTexture);
  videoSprite.name = 'videoSprite';
  var videoSize = ['cover', 'fit'].includes(typeof config.videoSize === 'string' ? config.videoSize.toLowerCase() : '') ? config.videoSize.toLowerCase() : 'cover',
      ar = app.screen.height / app.screen.width,
      vr = videoControler.videoHeight / videoControler.videoWidth;

  if (videoSize == 'fit') {
    // Fit to screen
    if (ar < vr) {
      videoSprite.height = app.screen.height;
      videoSprite.width = app.screen.height / vr;
      videoSprite.x = (app.screen.width - videoSprite.width) / 2;
      videoSprite.y = 0;
    } else {
      videoSprite.width = app.screen.width;
      videoSprite.height = app.screen.width * vr;
      videoSprite.x = 0;
      videoSprite.y = (app.screen.height - videoSprite.height) / 2;
    }
  } else {
    // Cover screen
    if (ar < vr) {
      videoSprite.width = app.screen.width;
      videoSprite.height = app.screen.width * vr;
      videoSprite.x = 0;
      videoSprite.y = (app.screen.height - videoSprite.height) / 2;
    } else {
      videoSprite.height = app.screen.height;
      videoSprite.width = app.screen.height / vr;
      videoSprite.x = (app.screen.width - videoSprite.width) / 2;
      videoSprite.y = 0;
    }
  } //videoSprite.visible = false;


  app.stage.addChild(videoSprite); // Safely add text since we know font is loaded

  var skyText = new PIXI.Text('My Sky Rewards', this.pixi.baseTextStyle);
  skyText.name = 'text';
  var textMetrics = PIXI.TextMetrics.measureText('My Sky Rewards', this.pixi.baseTextStyle);
  skyText.position.set((app.screen.width - textMetrics.width) / 2, app.screen.height - textMetrics.height * 2); //Create mask for text wipe

  var cnv = (0, _utils.createLinearGradient)(app.screen.width * 3, app.screen.height, {
    // These are the gradients stops, starting at the beginning (0.0) with white and ending with black at the end (1.0).
    0.45: 'white',
    0.55: 'black' // black color will make pixels transparent.

  }, 30),
      skyTextMask = new PIXI.Sprite(PIXI.Texture.from(cnv));
  skyTextMask.name = 'skyTextMask';
  skyTextMask.position.set(-2 * app.screen.width, 0);
  skyText.mask = skyTextMask;
  app.stage.addChild(skyTextMask, skyText);
  return {
    id: 'videoStart',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "videoStart"
      });
      tl.add(function () {
        videoControler.play(); //TODO allow to start any time?
      }).to(skyTextMask, 6, {
        x: 0
      }, "+=11");
      return tl;
    },
    audio: [{
      id: 'hello1',
      ssml: '<speak>Some intro <break time="2s"/></speak>',
      text: 'Hello'
    }, {
      id: 'hello2',
      ssml: '<speak>More speech here</speak>',
      text: 'Hello'
    }]
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/logoStart.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources,
      that = this;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT,
      logoSprite,
      subtitleText,
      subtitleTextMask; // Make logo

  logoSprite = new PIXI.Sprite(resources.logo.texture);
  logoSprite.name = 'logoSprite';
  logoSprite.anchor.set(0.5);
  logoSprite.visible = false;
  var logoSize = config.logoSize || [0.5, 'auto'];

  if (typeof logoSize == 'string') {
    logoSize = logoSize.toLowerCase();
    if (!['cover', 'fit'].includes(logoSize)) logoSize = [0.5, 'auto'];
  }

  if (!Array.isArray(logoSize) && typeof logoSize == 'number') logoSize = [logoSize, 'auto'];
  if (Array.isArray(logoSize) && !logoSize.length) logoSize = [logoSize, 'auto'];
  if (Array.isArray(logoSize) && logoSize.length < 2) logoSize.push('auto');
  var sr = app.screen.height / app.screen.width,
      lr = logoSprite.height / logoSprite.width;

  if (typeof logoSize == 'string') {
    if (logoSize == 'fit') {
      // Fit to screen
      if (sr < lr) {
        logoSprite.height = app.screen.height;
        logoSprite.width = app.screen.height / lr;
      } else {
        logoSprite.width = app.screen.width;
        logoSprite.height = app.screen.width * lr;
      }
    } else {
      // Cover screen
      if (sr < lr) {
        logoSprite.width = app.screen.width;
        logoSprite.height = app.screen.width * lr;
      } else {
        logoSprite.height = app.screen.height;
        logoSprite.width = app.screen.height / lr;
      }
    }

    logoSprite.x = app.screen.width / 2;
    logoSprite.y = app.screen.height / 2;
  } else {
    // logoSize is array
    var w, h;

    if (logoSize[0] === 'auto' && logoSize[1] === 'auto') {
      w = Math.min(0.5 * app.screen.width, logoSprite.width);
      h = w * lr;
    } else if (logoSize[0] === 'auto') {
      h = parseFloat(logoSize[1]);

      if (!h || h <= 0) {
        w = Math.min(0.5 * app.screen.width, logoSprite.width);
        h = w * lr;
      } else {
        if (h < 1) h = h * app.screen.height;
        w = h / lr;
      }
    } else {
      w = parseFloat(logoSize[0]);
      if (!w || w <= 0) Math.min(0.5 * app.screen.width, logoSprite.width);
      if (w < 1) w = w * app.screen.width;
      if (logoSize[1] == 'auto') h = w * lr;else h = parseFloat(logoSize[1]);
      if (!h || h <= 0) h = w * lr;
      if (h < 1) h = h * app.screen.height;
    }

    logoSprite.width = w;
    logoSprite.height = h;
    logoSprite.x = app.screen.width / 2;
    logoSprite.y = app.screen.height / 2;
  }

  app.stage.addChild(logoSprite); // Make subtitle

  if (config.logoSubtitle) {
    // Safely add text since we know font is loaded
    subtitleText = new PIXI.Text(config.logoSubtitle, this.pixi.baseTextStyle);
    subtitleText.name = 'logoSubtitle';
    var textMetrics = PIXI.TextMetrics.measureText(config.logoSubtitle, this.pixi.baseTextStyle),
        subtitlePos = config.logoSubtitlePosition === 0 ? 'bottom' : config.logoSubtitlePosition === 1 ? 'top' : (config.logoSubtitlePosition.toString() || 'bottom').toLowerCase(),
        subtitleY = (app.screen.height - logoSprite.height) / 4 > 1.5 * textMetrics.height ? (app.screen.height - logoSprite.height) / 4 : app.screen.height / 4;
    if (subtitlePos == 'top') subtitleText.position.set((app.screen.width - textMetrics.width) / 2, subtitleY - textMetrics.height / 2);else subtitleText.position.set((app.screen.width - textMetrics.width) / 2, app.screen.height - subtitleY - textMetrics.height / 2); //Create mask for text wipe

    var cnv = (0, _utils.createLinearGradient)(app.screen.width * 3, app.screen.height, {
      // These are the gradients stops, starting at the beginning (0.0) with white and ending with black at the end (1.0).
      0.4: 'white',
      0.6: 'black' // black color will make pixels transparent.

    });
    subtitleTextMask = new PIXI.Sprite(PIXI.Texture.from(cnv));
    subtitleTextMask.name = 'logoSubtitleMask';
    subtitleTextMask.position.set(-2 * app.screen.width, 0);
    subtitleText.mask = subtitleTextMask;
    app.stage.addChild(subtitleTextMask, subtitleText);
  } // Build speaker icon


  var speaker;

  if (config.showSpeaker || config.showSpeaker === undefined) {
    speaker = new PIXI.Container();
    var speakerFill = config.speakerColor ? colorStringToInt(config.speakerColor) : this.pixi.primaryColor,
        speakerSheet = resources.speakerSheet.spritesheet,
        animatedSpeakerSpriteMask = new PIXI.AnimatedSprite(Object.values(speakerSheet.textures)),
        speakerColor = new PIXI.Graphics();
    animatedSpeakerSpriteMask.animationSpeed = 0.05;
    animatedSpeakerSpriteMask.play();
    speakerColor.beginFill(speakerFill);
    speakerColor.drawRect(0, 0, animatedSpeakerSpriteMask.width, animatedSpeakerSpriteMask.height);
    speakerColor.endFill();
    speaker.addChild(speakerColor, animatedSpeakerSpriteMask);
    speakerColor.mask = animatedSpeakerSpriteMask;
    var scaleTo = WIDTH / 6 / speaker.width;
    speaker.scale.set(scaleTo);
    speaker.pivot.set(speaker.width / 2, speaker.height / 2);
    speaker.x = WIDTH / 16 + speaker.width / 2;
    speaker.y = -1 * speaker.height;
    app.stage.addChild(speaker);
  }

  return {
    id: 'logoStart',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "logoStart"
      }),
          origScaleX,
          origScaleY;

      if (config.logoScale || config.logoScale === undefined) {
        origScaleX = logoSprite.scale.x;
        origScaleY = logoSprite.scale.y;

        if (config.logoScale && Array.isArray(config.logoScale) && config.logoScale.length > 0) {
          logoSprite.scale.set((config.logoScale[0] ? Number(config.logoScale[0]) : 0.8) * origScaleX, (config.logoScale[0] ? Number(config.logoScale[0]) : 0.8) * origScaleY);
        } else {
          logoSprite.scale.set(0.8 * origScaleX, 0.8 * origScaleY);
        }

        tl.to(logoSprite, 10, {
          pixi: {
            scaleX: (config.logoScale && Array.isArray(config.logoScale) && config.logoScale.length > 1 ? Number(config.logoScale[1]) : 1.2) * origScaleX,
            scaleY: (config.logoScale && Array.isArray(config.logoScale) && config.logoScale.length > 1 ? Number(config.logoScale[1]) : 1.2) * origScaleY
          }
        }, 0);
      }

      if (config.logoSubtitle) {
        tl.to(subtitleTextMask, 6, {
          x: 0
        }, 2);
      }

      tl.to(config.logoSubtitle ? [subtitleText, logoSprite] : logoSprite, 2, {
        alpha: 0
      }, 8);
      logoSprite.visible = true;

      if (config.showSpeaker || config.showSpeaker === undefined) {
        tl.to(speaker, 2, {
          y: speaker.height / 2,
          ease: Back.easeOut
        }, 1.5);
        tl.to(speaker, 2, {
          y: -1 * speaker.height,
          ease: Back.easeIn
        }, 7);
      }

      return tl;
    },
    audio: []
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/intro.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources,
      that = this;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT; // Build coin

  var coinRadius = WIDTH / 4,
      //Array.isArray(config.introColor) ? config.introColor.map(str => colorStringToInt(str)) : colorStringToInt(config.introColor) ////TODO gradient fill not supported for graphics objects, would have to render gradient to canvas -> create texture from it -> draw with that texture (beginTextureFill?) -> then mask with icon
  coinColor = config.introColor ? (0, _utils.colorStringToInt)(config.introColor) : this.pixi.primaryColor,
      bg = this.pixi.backgroundColor || this.pixi.backgroundColor === 0 ? this.pixi.backgroundColor : 0xffffff;
  var coinGraphics = new PIXI.Graphics();
  coinGraphics.beginFill(coinColor, 1);
  coinGraphics.drawCircle(0, 0, coinRadius);
  coinGraphics.endFill();
  coinGraphics.lineStyle(coinRadius * 0.1, bg);
  coinGraphics.beginFill(coinColor, 1);
  coinGraphics.drawCircle(0, 0, coinRadius * 0.8);
  coinGraphics.endFill();
  var symStyle = new PIXI.TextStyle({
    fill: bg,
    fontSize: coinRadius / Math.pow(this.currency.symbol.length, 0.75)
  });
  var coinSym = new PIXI.Text(this.currency.symbol, symStyle);
  coinSym.anchor.set(0.5);
  var coin = new PIXI.Container();
  coin.addChild(coinGraphics, coinSym);
  coin.x = WIDTH / 2;
  coin.y = -HEIGHT / 2; // Build clock

  var clockFace = new PIXI.Graphics();
  clockFace.lineStyle(coinRadius * 0.15, coinColor);
  clockFace.drawCircle(0, 0, coinRadius * 0.925);
  clockFace.lineStyle(0);
  clockFace.beginFill(coinColor, 1);
  clockFace.drawCircle(0, 0, coinRadius * 0.1);
  clockFace.endFill();

  for (var i = 0; i < 12; i++) {
    clockFace.lineStyle(2, coinColor);
    clockFace.moveTo(coinRadius * 0.75 * Math.cos(i * 2 * Math.PI / 12), coinRadius * 0.75 * Math.sin(i * 2 * Math.PI / 12));
    clockFace.lineTo(coinRadius * 0.8 * Math.cos(i * 2 * Math.PI / 12), coinRadius * 0.8 * Math.sin(i * 2 * Math.PI / 12));
  }

  var hourHand = new PIXI.Graphics();
  hourHand.roundLine(0, 0, 0, -coinRadius * 0.4, coinRadius * 0.1, coinColor);
  var minuteHand = new PIXI.Graphics();
  minuteHand.roundLine(0, 0, 0, -coinRadius * 0.7, coinRadius * 0.1, coinColor);
  var d = new Date(),
      hr = (d.getHours() % 12 + d.getMinutes() / 60) * 2 * Math.PI / 12,
      mr = d.getMinutes() * 2 * Math.PI / 60;
  hourHand.rotation = hr;
  minuteHand.rotation = mr;
  var clock = new PIXI.Container();
  clock.addChild(clockFace, hourHand, minuteHand);
  clock.width = 0;
  clock.x = WIDTH / 2;
  clock.y = HEIGHT / 2;
  clock.visible = false;
  app.stage.addChild(coin, clock);
  return {
    id: 'intro',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "intro"
      });
      tl.to(coin, 2, {
        y: HEIGHT / 2,
        ease: Bounce.easeOut
      }).to(coin, 1.5, {
        width: 0,
        ease: Sine.easeInOut,
        yoyo: true,
        repeat: 2
      }, "+=1").to(clock, 1, {
        onStart: function onStart() {
          clock.visible = true;
        },
        width: 2 * coinRadius,
        ease: Sine.easeInOut
      }).to(minuteHand, 4, {
        rotation: -8 * 2 * Math.PI + mr,
        ease: Power1.easeIn
      }, "-=0.8").to(hourHand, 4, {
        rotation: -(8 / 12) * 2 * Math.PI + hr,
        ease: Power1.easeIn
      }, "-=4").to(clock, 1, {
        x: -1.5 * coinRadius,
        ease: Back.easeIn
      }, "-=1");
      return tl;
    },
    audio: [{
      id: 'intro1',
      text: 'Hi ' + this.user.forename + '. This is your Pension Dashboard.'
    }, {
      id: 'intro2',
      text: ['It contains all the key information about your', 'pension, right now.']
    }, {
      id: 'intro3',
      text: ['However, it\'s always good to take a look back', 'at how you got to where you are.']
    }]
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/tableStart.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  var _this = this;

  // Init vars
  config = config || {};
  var _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources,
      that = this;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT; // Build contents table

  var rowTexts = this.pixi.tableRowTexts = [],
      rowRects = this.pixi.tableRowRects = [];
  /*let headerTextStyle = new PIXI.TextStyle({fontFamily : ['Franklin-Gothic-Demi', 'Franklin Gothic Demi', 'Franklin Gothic Medium', 'Franklin Gothic', 'ITC Franklin Gothic', 'Arial', 'ArialMT', 'sans-serif'], fontSize: 20, fontWeight: '400', fill : 0xffffff, align : 'left'}),
      tableTextStyle = headerTextStyle.clone()
  tableTextStyle.fill = 0x575756*/

  var headerTextStyle = this.pixi.tableHeaderTextStyle = this.pixi.baseTextStyle.clone();
  if (config.tableHeaderFont && config.tableHeaderFont.length) headerTextStyle.fontFamily = config.tableHeaderFont;
  headerTextStyle.fill = config.tableHeaderColor ? (0, _utils.colorStringToInt)(config.tableHeaderColor) : 0xffffff;
  headerTextStyle.fontSize = config.tableHeaderFontSize ? Number(config.tableHeaderFontSize) : 20;
  var tableTextStyle = this.pixi.tableTextStyle = headerTextStyle.clone();
  if (config.tableRowFont && config.tableRowFont.length) tableTextStyle.fontFamily = config.tableRowFont;
  tableTextStyle.fill = config.tableRowColor ? (0, _utils.colorStringToInt)(config.tableRowColor) : 0x575756;
  tableTextStyle.fontSize = config.tableRowFontSize ? Number(config.tableRowFontSize) : 20;
  rowTexts.push(new PIXI.Text((0, _utils.getString)('startBalanceTable', that), headerTextStyle));
  if (this.data.transfers > 0) rowTexts.push(new PIXI.Text((0, _utils.getString)('transfersTable', that), tableTextStyle));
  if (this.data.withdrawals < 0) rowTexts.push(new PIXI.Text((0, _utils.getString)('withdrawalsTable', that), tableTextStyle));
  if (this.data.employeeContributions > 0) rowTexts.push(new PIXI.Text((0, _utils.getString)('employeeContributionsTable', that), tableTextStyle));
  if (this.data.employerContributions > 0) rowTexts.push(new PIXI.Text((0, _utils.getString)('employerContributionsTable', that), tableTextStyle));
  rowTexts.push(new PIXI.Text((0, _utils.getString)('investmentReturnTable', that), tableTextStyle));
  if (this.showCharges) rowTexts.push(new PIXI.Text((0, _utils.getString)('chargesTable', that), tableTextStyle));
  rowTexts.push(new PIXI.Text((0, _utils.getString)('endBalanceTable', that), headerTextStyle));
  var fullRowHeight = 6 * HEIGHT / 8 / rowTexts.length,
      rowHeight = fullRowHeight * 0.8;
  rowTexts.forEach(function (text, i) {
    text.visible = false;
    if (i == 0 || i == rowTexts.length - 1) rowRects.push(that.pixi.addRect(WIDTH / 2, HEIGHT / 8 + i * fullRowHeight + fullRowHeight / 2, 30 * WIDTH / 32, rowHeight, config.tableHeaderBg ? (0, _utils.colorStringToInt)(config.tableHeaderBg) : _this.pixi.primaryColor));else rowRects.push(that.pixi.addRect(WIDTH / 2, HEIGHT / 8 + i * fullRowHeight + fullRowHeight / 2, 30 * WIDTH / 32, rowHeight, config.tableRowBg ? (0, _utils.colorStringToInt)(config.tableRowBg) : _this.pixi.secondaryColor));
    text.position.set(WIDTH / 16, HEIGHT / 8 + i * fullRowHeight + fullRowHeight / 2 - text.height / 2);
    app.stage.addChild(text); //rowRects added to stage automatically in addRect
  });
  rowRects.forEach(function (rect) {
    return rect.visible = false;
  }); //this.pixi.table = {tableTextStyle, headerTextStyle, rowRects, rowTexts}

  return {
    id: 'tableStart',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "tableStart"
      });
      tl.from(rowRects[0], 1, {
        x: -WIDTH / 2
      });
      tl.from(rowTexts[0], 1, {
        x: -15 * WIDTH / 16
      }, "-=1");
      tl.from(rowRects[rowRects.length - 1], 1, {
        x: 3 * WIDTH / 2
      }, "-=1");
      tl.from(rowTexts[rowTexts.length - 1], 1, {
        x: WIDTH + WIDTH / 16
      }, "-=1");
      var midRects = rowRects.slice(1, rowRects.length - 1),
          midTexts = rowTexts.slice(1, rowTexts.length - 1);
      tl.staggerFrom(midTexts, 1, {
        x: -15 * WIDTH / 16,
        ease: Power2.easeOut
      }, 0.5);
      tl.staggerFrom(midRects, 1, {
        x: -WIDTH / 2,
        ease: Power2.easeOut
      }, 0.5, "-=" + (1 + 0.5 * (midTexts.length - 1)));
      tl.to(rowRects.concat(rowTexts), 1, {
        pixi: {
          alpha: 0
        },
        ease: Power2.easeOut
      }, "+=3");
      rowRects.concat(rowTexts).forEach(function (actor) {
        return actor.visible = true;
      }); //make visible now tl state has been set (prevents flash at start)

      return tl;
    },
    audio: [{
      id: 'tableStart1',
      text: ['This 2 minute video is personal to you, and will', 'walk you through what\'s happened to your Account', 'over the last tax year to ' + this.data.endDate.toFormattedString() + '.']
    }]
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/jarIn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources,
      that = this;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT; // Create Jar Sprite

  var jar = this.pixi.jar = new PIXI.Sprite(this.pixi.resources['jar'].texture);
  jar.name = 'jar';
  jar.visible = false;
  var sfac = 10 / (this.pixi.resources['jar'].data.naturalWidth / this.pixi.SCALE); // Scale to pixel size = ~10m wide in b2World

  jar.scale.set(sfac, sfac);
  jar.position.set((WIDTH - jar.width) / 2, (HEIGHT - jar.height) / 2); //TODO avoid hardcoding

  app.stage.addChildAt(jar, 0); // Init jarLabelStyle, jarFigureStyle, and jarFigureLabelStyle

  var jarLabelStyle = this.pixi.jarFigureStyle.clone();
  if (config.jarLabelColor || config.jarLabelColor === 0) jarLabelStyle.fill = (0, _utils.colorStringToInt)(config.jarLabelColor);
  if (config.jarLabelFont && config.jarLabelFont.length) jarLabelStyle.fontFamily = config.jarLabelFont;
  jarLabelStyle.fontSize = config.jarLabelFontSize ? Number(config.jarLabelFontSize) : 24;
  this.pixi.jarFigureStyle = jarLabelStyle.clone();
  if (config.jarFigureColor || config.jarFigureColor === 0) this.pixi.jarFigureStyle.fill = (0, _utils.colorStringToInt)(config.jarFigureColor);
  if (config.jarFigureFont && config.jarFigureFont.length) this.pixi.jarFigureStyle.fontFamily = config.jarFigureFont;
  this.pixi.jarFigureStyle.fontSize = config.jarFigureFontSize ? Number(config.jarFigureFontSize) : 48;
  this.pixi.jarFigureLabelStyle = this.pixi.jarFigureStyle.clone();
  if (config.jarFigureLabelColor || config.jarFigureLabelColor === 0) this.pixi.jarFigureLabelStyle.fill = (0, _utils.colorStringToInt)(config.jarFigureLabelColor);
  if (config.jarFigureLabelFont && config.jarFigureLabelFont.length) this.pixi.jarFigureLabelStyle.fontFamily = config.jarFigureLabelFont;
  this.pixi.jarFigureLabelStyle.fontSize = config.jarFigureLabelFontSize ? Number(config.jarFigureLabelFontSize) : 20; // Create the jar label

  var jarText = (0, _utils.getString)('labelJar', this),
      textMetrics = PIXI.TextMetrics.measureText(jarText, jarLabelStyle),
      // TODO parameterise
  labelHeight = textMetrics.height;
  var jarLabel = this.pixi.jarLabel = new PIXI.Text(jarText, jarLabelStyle);
  jarLabel.visible = false;
  jarLabel.anchor.set(0.5);
  jarLabel.position.set(WIDTH / 2, HEIGHT - labelHeight);
  app.stage.addChild(jarLabel);
  return {
    id: 'jarIn',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "jarIn"
      });
      tl.from(jar, 3, {
        y: -HEIGHT,
        ease: Power3.easeOut
      });
      tl.from(jarLabel, 3, {
        y: -1 * labelHeight,
        pixi: {
          alpha: 0
        },
        ease: Power3.easeOut
      }, "-=3");
      [jar, jarLabel].forEach(function (actor) {
        return actor.visible = true;
      }); //Can now make visible

      return tl;
    },
    audio: [{
      id: 'jarIn1',
      text: 'This jar represents your pension account.'
    }]
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/startBalanceIn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var that = this,
      _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT;
  var b2WIDTH = this.box2d.WIDTH,
      b2HEIGHT = this.box2d.HEIGHT; // Create ongoing balance figure

  var textMetrics = PIXI.TextMetrics.measureText(this.currency.symbol + '0', this.pixi.jarFigureStyle);
  var balanceFigure = this.pixi.balanceFigure = new PIXI.Text(this.currency.symbol + '0', this.pixi.jarFigureStyle);
  balanceFigure.visible = false;
  balanceFigure.anchor.set(0.5);
  balanceFigure.position.set(WIDTH / 2, textMetrics.height / 2); //balanceFigure.pivot = {x: textMetrics.width/2, y: textMetrics.height/2}
  //balanceFigure.alpha = 0

  app.stage.addChild(balanceFigure);

  this.pixi.setBalanceFigure = function (num) {
    var fig = Math.abs(num);
    that.pixi.balanceFigure.text = (num < 0 ? '-' : '') + that.currency.symbol + fig.toFixedCommas(); //that.pixi.balanceFigure.position.set(WIDTH/2, this.pixi.balanceFigure.y)
  }; // Create balance label (the start date)


  var balanceFigureLabel = this.pixi.makeFigureLabel(this.data.startDate.toFormattedString());
  balanceFigureLabel.visible = false;
  app.stage.addChild(balanceFigureLabel); // Create start balance coins

  this.pixi.pots = this.pixi.pots || {};
  this.pixi.pots.start = [];
  var numSquares = {
    num: 0
  },
      coinFill; // Init coin texture if present

  if (config.startBalanceImage && this.pixi.resources[config.startBalanceImage] && this.pixi.resources[config.startBalanceImage].texture) {
    coinFill = this.pixi.resources[config.startBalanceImage].texture;
  } else {
    coinFill = config.startBalanceColor ? (0, _utils.colorStringToInt)(config.startBalanceColor) : 0xf68121;
  } // Create speech


  var audioObjs = [];
  if (this.data.startBalance <= 0) audioObjs.push({
    id: 'startingBalanceIn1',
    text: 'As it was at ' + this.data.startDate.toFormattedString() + '.'
  });else audioObjs.push({
    id: 'startingBalanceIn1',
    text: ['Let\'s fill it up to show your balance', 'as it was at ' + this.data.startDate.toFormattedString() + '.']
  });
  return {
    id: 'startingBalanceIn',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "startingBalanceIn"
      });
      tl.from([that.pixi.balanceFigure, balanceFigureLabel], 2, {
        y: -HEIGHT / 8,
        pixi: {
          alpha: 0
        }
      });

      if (that.data.startBalance > 0) {
        tl.to(numSquares, 3, {
          num: Math.ceil(Math.abs(that.data.startBalance) / that.unit),
          ease: Power1.easeOut,
          onStart: function onStart() {
            that.pixi.app.renderer.plugins.interaction.autoPreventDefault = true;
          },
          onUpdate: function onUpdate(tween) {
            var shouldBe = Math.max(0, Math.round(tween.target.num));

            if (that.pixi.pots.start.length > shouldBe) {
              while (that.pixi.pots.start.length > shouldBe) {
                that.pixi.remove(that.pixi.pots.start[that.pixi.pots.start.length - 1]);
                that.pixi.pots.start.pop();
              }
            } else {
              while (that.pixi.pots.start.length < shouldBe) {
                var x = b2WIDTH / 2 + (Math.random() - 0.5) * b2WIDTH / 8,
                    y = Math.random() * -b2HEIGHT / 4,
                    r = 0.25; //+Math.pow(Math.random(),12)*0.5 //TODO parameterise?

                that.pixi.pots.start.push(that.pixi.addB2Circle(x, y, r, coinFill, 0, 'start')); //colors[Math.floor(Math.random()*colors.length)]))
              }
            }

            that.pixi.setBalanceFigure(Math.min(shouldBe * that.unit, that.data.startBalance));
          },
          onUpdateParams: ['{self}']
        }); //interactive icon

        if (that.pixi.interactive) {
          tl.to([that.pixi.interactive, that.pixi.interactiveText], 1, {
            pixi: {
              alpha: 1
            }
          }, 2);
          tl.to(that.pixi.interactive, 0.33, {
            x: that.pixi.interactive.x + 5,
            y: that.pixi.interactive.y - 5
          }, 3);
          tl.to(that.pixi.interactive, 0.33, {
            x: that.pixi.interactive.x - 5,
            y: that.pixi.interactive.y + 5
          }, 3.33);
          tl.to(that.pixi.interactive, 0.34, {
            x: that.pixi.interactive.x + 5,
            y: that.pixi.interactive.y - 5
          }, 3.66);
          tl.to(that.pixi.interactive, 0.33, {
            x: that.pixi.interactive.x - 5,
            y: that.pixi.interactive.y + 5
          }, 4);
          tl.to(that.pixi.interactive, 0.33, {
            x: that.pixi.interactive.x + 5,
            y: that.pixi.interactive.y - 5
          }, 4.33);
          tl.to(that.pixi.interactive, 0.34, {
            x: that.pixi.interactive.x - 5,
            y: that.pixi.interactive.y + 5
          }, 4.66);
          tl.to(that.pixi.interactive, 0.33, {
            x: that.pixi.interactive.x + 5,
            y: that.pixi.interactive.y - 5
          }, 5);
          tl.to(that.pixi.interactive, 0.33, {
            x: that.pixi.interactive.x - 5,
            y: that.pixi.interactive.y + 5
          }, 5.33);
          tl.to([that.pixi.interactive, that.pixi.interactiveText], 1, {
            pixi: {
              alpha: 0
            }
          }, 7);
        }
      }

      tl.to(that.pixi.balanceFigure, 1, {
        pixi: {
          scale: 1.2
        }
      });
      tl.to(that.pixi.balanceFigure, 1, {
        pixi: {
          scale: 1
        }
      });
      tl.to(balanceFigureLabel, 1, {
        pixi: {
          alpha: 0
        }
      }, "-=2");
      tl.to(that.pixi.balanceFigure, 1.75, {
        y: HEIGHT - (HEIGHT - that.pixi.jarHeight) / 2 + that.pixi.balanceFigure.height / 2,
        ease: Power1.easeOut
      }, "-=0.25");
      [balanceFigure, balanceFigureLabel].forEach(function (actor) {
        return actor.visible = true;
      }); //Make visible now tl state is set

      return tl;
    },
    audio: audioObjs
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/transfersIn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var that = this,
      _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT;
  var b2WIDTH = this.box2d.WIDTH,
      b2HEIGHT = this.box2d.HEIGHT; // Create figure and figure label

  var figure = this.pixi.makeFigure(this.data.bulkTransfers + this.data.transfers),
      figureLabel = this.pixi.makeFigureLabel(this.pixi.tooltipLookup('transfers'));
  figure.visible = figureLabel.visible = false;
  app.stage.addChild(figure, figureLabel); // Create transfers coins

  this.pixi.pots = this.pixi.pots || {};
  this.pixi.pots.transfers = [];
  var numSquares = {
    num: 0
  },
      coinFill; // Init coin texture if present

  if (config.transfersImage && this.pixi.resources[config.transfersImage] && this.pixi.resources[config.transfersImage].texture) {
    coinFill = this.pixi.resources[config.transfersImage].texture;
  } else {
    coinFill = config.transfersColor ? (0, _utils.colorStringToInt)(config.transfersColor) : 0xffb81c;
  }

  return {
    id: 'transfersIn',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "transfersIn"
      });
      tl.from([figure, figureLabel], 2, {
        y: -HEIGHT / 8,
        pixi: {
          alpha: 0
        }
      }); //t=0

      tl.to(numSquares, 3, {
        num: Math.ceil(Math.abs(that.data.bulkTransfers + that.data.transfers) / that.unit),
        ease: Power1.easeOut,
        onUpdate: function onUpdate(tween) {
          var shouldBe = Math.max(0, Math.round(tween.target.num));

          if (that.pixi.pots.transfers.length > shouldBe) {
            while (that.pixi.pots.transfers.length > shouldBe) {
              that.pixi.remove(that.pixi.pots.transfers.pop());
            }
          } else {
            while (that.pixi.pots.transfers.length < shouldBe) {
              var x = b2WIDTH / 2 + (Math.random() - 0.5) * b2WIDTH / 8,
                  y = Math.random() * -b2HEIGHT / 4,
                  r = 0.25; //+Math.pow(Math.random(),12)*0.5 //TODO parameterise?

              that.pixi.pots.transfers.push(that.pixi.addB2Circle(x, y, r, coinFill, 0, 'transfers'));
            }
          }

          that.pixi.setBalanceFigure(that.data.startBalance + Math.min(shouldBe * that.unit, that.data.bulkTransfers + that.data.transfers));
        },
        onUpdateParams: ['{self}']
      }, "+=1"); //t=3

      tl.to([figure, figureLabel], 1, {
        pixi: {
          alpha: 0
        }
      }, "-=1"); //t=5
      //interactive icon

      if (that.data.startBalance <= 0 && that.pixi.interactive) {
        tl.to([that.pixi.interactive, that.pixi.interactiveText], 1, {
          pixi: {
            alpha: 1
          }
        }, 2);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x + 5,
          y: that.pixi.interactive.y - 5
        }, 3);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x - 5,
          y: that.pixi.interactive.y + 5
        }, 3.33);
        tl.to(that.pixi.interactive, 0.34, {
          x: that.pixi.interactive.x + 5,
          y: that.pixi.interactive.y - 5
        }, 3.66);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x - 5,
          y: that.pixi.interactive.y + 5
        }, 4);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x + 5,
          y: that.pixi.interactive.y - 5
        }, 4.33);
        tl.to(that.pixi.interactive, 0.34, {
          x: that.pixi.interactive.x - 5,
          y: that.pixi.interactive.y + 5
        }, 4.66);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x + 5,
          y: that.pixi.interactive.y - 5
        }, 5);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x - 5,
          y: that.pixi.interactive.y + 5
        }, 5.33);
        tl.to([that.pixi.interactive, that.pixi.interactiveText], 1, {
          pixi: {
            alpha: 0
          }
        }, 7);
      }

      figure.visible = figureLabel.visible = true;
      return tl;
    },
    audio: [{
      id: 'transfersIn1',
      text: 'You transferred in ' + (0, _utils.niceRound)(that.data.bulkTransfers + that.data.transfers, true, that.currency.symbol) + ' during the year. Let\'s add that in ' + (that.data.startBalance < 1 ? 'first' : 'now') + '.'
    }]
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/withdrawalsOut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var that = this,
      _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT;
  var b2WIDTH = this.box2d.WIDTH,
      b2HEIGHT = this.box2d.HEIGHT; // Create figure and figure label

  var figure = this.pixi.makeFigure(this.data.withdrawals),
      figureLabel = this.pixi.makeFigureLabel(this.pixi.tooltipLookup('withdrawals'));
  figure.visible = figureLabel.visible = false;
  app.stage.addChild(figure, figureLabel); // Create pot to hold withdrawn coins

  this.pixi.pots = this.pixi.pots || {};
  this.pixi.pots.withdrawals = {};
  var tweenObj = {
    x: 0
  }; // Create speech

  var audioObjs = [];

  if (this.data.bulkTransfers + this.data.transfers > 0) {
    audioObjs.push({
      id: 'withdrawalsOut1',
      text: ['However, withdrawals of ' + (0, _utils.niceRound)(Math.abs(that.data.withdrawals), true, that.currency.symbol) + ' also occurred over the year,', 'so we\'ll take that out.']
    });
  } else {
    audioObjs.push({
      id: 'withdrawalsOut1',
      text: ['Withdrawals totaling ' + (0, _utils.niceRound)(Math.abs(that.data.withdrawals), true, that.currency.symbol) + ' were', 'made during the year. Let\'s take that out now.']
    });
  }

  return {
    id: 'withdrawalsOut',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "withdrawalsOut"
      });
      tl.from([figure, figureLabel], 2, {
        y: HEIGHT / 2,
        pixi: {
          alpha: 0
        }
      }); //t=0

      tl.to(tweenObj, 2, {
        x: 1,
        ease: Power1.easeOut,
        onStart: function onStart() {
          var n = Math.ceil(Math.abs(that.data.withdrawals) / that.unit);
          that.pixi.pots.withdrawals = that.pixi.gimme(n);
        },
        onUpdate: function onUpdate(tween) {
          Object.keys(that.pixi.pots.withdrawals).forEach(function (key) {
            that.pixi.pots.withdrawals[key].forEach(function (coin) {
              return coin.alpha = 1 - tween.target.x;
            });
          });
          that.pixi.setBalanceFigure(that.data.startBalance + that.data.bulkTransfers + that.data.transfers + (that.data.bulkTransfers + that.data.transfers <= 0 ? that.data.employeeContributions + that.data.employerContributions + that.data.investmentReturn + (that.showCharges ? 0 : that.data.charges) : 0) + Math.round(that.data.withdrawals * tween.target.x));
        },
        onUpdateParams: ['{self}'],
        onComplete: function onComplete() {
          var toRemove = [];
          Object.keys(that.pixi.pots.withdrawals).forEach(function (key) {
            toRemove = toRemove.concat(that.pixi.pots.withdrawals[key]);
          });
          that.box2d.toRemove = that.box2d.toRemove.concat(toRemove); // Removal handled in update step for stability

          that.pixi.pots.withdrawals = {};
          that.pixi.setBalanceFigure(that.data.startBalance + that.data.bulkTransfers + that.data.transfers + (that.data.bulkTransfers + that.data.transfers <= 0 ? that.data.employeeContributions + that.data.employerContributions + that.data.investmentReturn + (that.showCharges ? 0 : that.data.charges) : 0) + that.data.withdrawals);
        }
      }); //t=2

      tl.to([figure, figureLabel], 1, {
        pixi: {
          alpha: 0
        }
      }, "-=1"); //t=3

      figure.visible = figureLabel.visible = true;
      return tl;
    },
    audio: audioObjs
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/eeContsIn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var that = this,
      _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT;
  var b2WIDTH = this.box2d.WIDTH,
      b2HEIGHT = this.box2d.HEIGHT; // Create figure and figure label

  var figure = this.pixi.makeFigure(this.data.employeeContributions),
      figureLabel = this.pixi.makeFigureLabel(this.pixi.tooltipLookup('eeConts'));
  figure.visible = figureLabel.visible = false;
  app.stage.addChild(figure, figureLabel); // Create transfers coins

  this.pixi.pots = this.pixi.pots || {};
  this.pixi.pots.eeConts = [];
  var numSquares = {
    num: 0
  },
      coinFill; // Init coin texture if present

  if (config.employeeContsImage && this.pixi.resources[config.employeeContsImage] && this.pixi.resources[config.employeeContsImage].texture) {
    coinFill = this.pixi.resources[config.employeeContsImage].texture;
  } else {
    coinFill = config.employeeContsColor ? (0, _utils.colorStringToInt)(config.employeeContsColor) : 0x00c389;
  }

  var audioText = ['Over the course of the year, ' + that.user.forename + ', you contributed'];

  if (config.taxRelief || config.taxRelief === undefined) {
    audioText.push((0, _utils.niceRound)(that.data.employeeContributions, true, that.currency.symbol) + '. And don\'t forget, because you benefit from');
    audioText.push('tax relief on your contributions, the actual cost to you is lower than this.');
  } else audioText.push((0, _utils.niceRound)(that.data.employeeContributions, true, that.currency.symbol) + '.');

  return {
    id: 'eeContsIn',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "eeContsIn"
      });
      tl.from([figure, figureLabel], 2, {
        y: -HEIGHT / 8,
        pixi: {
          alpha: 0
        }
      }); //t=0

      tl.to(numSquares, 3, {
        num: Math.ceil(Math.abs(that.data.employeeContributions) / that.unit),
        ease: Power1.easeOut,
        onUpdate: function onUpdate(tween) {
          var shouldBe = Math.max(0, Math.round(tween.target.num));

          if (that.pixi.pots.eeConts.length > shouldBe) {
            while (that.pixi.pots.eeConts.length > shouldBe) {
              that.pixi.remove(that.pixi.pots.eeConts.pop());
            }
          } else {
            while (that.pixi.pots.eeConts.length < shouldBe) {
              var x = b2WIDTH / 2 + (Math.random() - 0.5) * b2WIDTH / 8,
                  y = Math.random() * -b2HEIGHT / 4,
                  r = 0.25; //+Math.pow(Math.random(),12)*0.5 //TODO parameterise?

              that.pixi.pots.eeConts.push(that.pixi.addB2Circle(x, y, r, coinFill, 0, 'eeConts'));
            }
          }

          that.pixi.setBalanceFigure(that.data.startBalance + that.data.bulkTransfers + that.data.transfers + (that.data.bulkTransfers + that.data.transfers > 0 ? that.data.withdrawals : 0) + Math.min(shouldBe * that.unit, that.data.employeeContributions));
        },
        onUpdateParams: ['{self}']
      }, "+=1"); //t=3

      tl.to([figure, figureLabel], 1, {
        pixi: {
          alpha: 0
        }
      }, "-=1"); //t=5
      //interactive icon

      if (that.data.startBalance + that.data.bulkTransfers + that.data.transfers <= 0 && that.pixi.interactive) {
        tl.to([that.pixi.interactive, that.pixi.interactiveText], 1, {
          pixi: {
            alpha: 1
          }
        }, 2);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x + 5,
          y: that.pixi.interactive.y - 5
        }, 3);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x - 5,
          y: that.pixi.interactive.y + 5
        }, 3.33);
        tl.to(that.pixi.interactive, 0.34, {
          x: that.pixi.interactive.x + 5,
          y: that.pixi.interactive.y - 5
        }, 3.66);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x - 5,
          y: that.pixi.interactive.y + 5
        }, 4);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x + 5,
          y: that.pixi.interactive.y - 5
        }, 4.33);
        tl.to(that.pixi.interactive, 0.34, {
          x: that.pixi.interactive.x - 5,
          y: that.pixi.interactive.y + 5
        }, 4.66);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x + 5,
          y: that.pixi.interactive.y - 5
        }, 5);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x - 5,
          y: that.pixi.interactive.y + 5
        }, 5.33);
        tl.to([that.pixi.interactive, that.pixi.interactiveText], 1, {
          pixi: {
            alpha: 0
          }
        }, 7);
      }

      figure.visible = figureLabel.visible = true;
      return tl;
    },
    audio: [{
      id: 'eeContsIn1',
      text: audioText
    }]
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/erContsIn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var that = this,
      _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT;
  var b2WIDTH = this.box2d.WIDTH,
      b2HEIGHT = this.box2d.HEIGHT; // Create figure and figure label

  var figure = this.pixi.makeFigure(this.data.employerContributions),
      figureLabel = this.pixi.makeFigureLabel(this.pixi.tooltipLookup('erConts'));
  figure.visible = figureLabel.visible = false;
  app.stage.addChild(figure, figureLabel); // Create transfers coins

  this.pixi.pots = this.pixi.pots || {};
  this.pixi.pots.erConts = [];
  var numSquares = {
    num: 0
  },
      coinFill; // Init coin texture if present

  if (config.employerContsImage && this.pixi.resources[config.employerContsImage] && this.pixi.resources[config.employerContsImage].texture) {
    coinFill = this.pixi.resources[config.employerContsImage].texture;
  } else {
    coinFill = config.employerContsColor ? (0, _utils.colorStringToInt)(config.employerContsColor) : 0x009fd2;
  } // Create speech


  var audioObjs = [];

  if (that.data.employeeContributions <= 0) {
    audioObjs.push({
      id: 'erContsIn1',
      text: ['It looks like this year you didn\'t contribute anything into your Pension Account.', 'However ' + (that.user.employer ? that.user.employer : 'your employer') + ' did contribute,', 'adding in ' + (0, _utils.niceRound)(that.data.employerContributions, true, that.currency.symbol) + ' over the year.'],
      ssml: '<speak>It looks like this year you didn\'t contribute anything into your Pension Account. However ' + (that.user.employer ? that.user.employer : 'your employer') + ' did con-tribute, adding in ' + (0, _utils.niceRound)(that.data.employerContributions, true, that.currency.symbol) + ' over the year.</speak>'
    });
  } else {
    audioObjs.push({
      id: 'erContsIn1',
      text: ['On top of this, ' + (that.user.employer ? that.user.employer : 'your employer') + ' also contributed into your pension account.', 'Adding in ' + (0, _utils.niceRound)(that.data.employerContributions, true, that.currency.symbol) + ' through the year.']
    });
  }

  return {
    id: 'erContsIn',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "erContsIn"
      });
      tl.from([figure, figureLabel], 2, {
        y: -HEIGHT / 8,
        pixi: {
          alpha: 0
        }
      }); //t=0

      tl.to(numSquares, 3, {
        num: Math.ceil(Math.abs(that.data.employerContributions) / that.unit),
        ease: Power1.easeOut,
        onUpdate: function onUpdate(tween) {
          var shouldBe = Math.max(0, Math.round(tween.target.num));

          if (that.pixi.pots.erConts.length > shouldBe) {
            while (that.pixi.pots.erConts.length > shouldBe) {
              that.pixi.remove(that.pixi.pots.erConts.pop());
            }
          } else {
            while (that.pixi.pots.erConts.length < shouldBe) {
              var x = b2WIDTH / 2 + (Math.random() - 0.5) * b2WIDTH / 8,
                  y = Math.random() * -b2HEIGHT / 4,
                  r = 0.25; //+Math.pow(Math.random(),12)*0.5 //TODO parameterise?

              that.pixi.pots.erConts.push(that.pixi.addB2Circle(x, y, r, coinFill, 0, 'erConts'));
            }
          }

          that.pixi.setBalanceFigure(that.data.startBalance + that.data.bulkTransfers + that.data.transfers + (that.data.bulkTransfers + that.data.transfers > 0 ? that.data.withdrawals : 0) + that.data.employeeContributions + Math.min(shouldBe * that.unit, that.data.employerContributions));
        },
        onUpdateParams: ['{self}']
      }, "+=1"); //t=3

      tl.to([figure, figureLabel], 1, {
        pixi: {
          alpha: 0
        }
      }, "-=1"); //t=5
      //interactive icon

      if (that.data.startBalance + that.data.bulkTransfers + that.data.transfers + that.data.employeeContributions <= 0 && that.pixi.interactive) {
        tl.to([that.pixi.interactive, that.pixi.interactiveText], 1, {
          pixi: {
            alpha: 1
          }
        }, 2);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x + 5,
          y: that.pixi.interactive.y - 5
        }, 3);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x - 5,
          y: that.pixi.interactive.y + 5
        }, 3.33);
        tl.to(that.pixi.interactive, 0.34, {
          x: that.pixi.interactive.x + 5,
          y: that.pixi.interactive.y - 5
        }, 3.66);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x - 5,
          y: that.pixi.interactive.y + 5
        }, 4);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x + 5,
          y: that.pixi.interactive.y - 5
        }, 4.33);
        tl.to(that.pixi.interactive, 0.34, {
          x: that.pixi.interactive.x - 5,
          y: that.pixi.interactive.y + 5
        }, 4.66);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x + 5,
          y: that.pixi.interactive.y - 5
        }, 5);
        tl.to(that.pixi.interactive, 0.33, {
          x: that.pixi.interactive.x - 5,
          y: that.pixi.interactive.y + 5
        }, 5.33);
        tl.to([that.pixi.interactive, that.pixi.interactiveText], 1, {
          pixi: {
            alpha: 0
          }
        }, 7);
      }

      figure.visible = figureLabel.visible = true;
      return tl;
    },
    audio: audioObjs
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/returnIn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var that = this,
      _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT;
  var b2WIDTH = this.box2d.WIDTH,
      b2HEIGHT = this.box2d.HEIGHT; // Create figure and figure label

  var figure = this.pixi.makeFigure(this.data.investmentReturn + (this.showCharges ? 0 : this.data.charges)),
      figureLabel = this.pixi.makeFigureLabel(this.pixi.tooltipLookup('investmentReturn'));
  figure.visible = figureLabel.visible = false;
  app.stage.addChild(figure, figureLabel); // Create transfers coins

  this.pixi.pots = this.pixi.pots || {};
  this.pixi.pots.investmentReturn = [];
  var numSquares = {
    num: 0
  },
      coinFill; // Init coin texture if present

  if (config.investmentReturnImage && this.pixi.resources[config.investmentReturnImage] && this.pixi.resources[config.investmentReturnImage].texture) {
    coinFill = this.pixi.resources[config.investmentReturnImage].texture;
  } else {
    coinFill = config.investmentReturnColor ? (0, _utils.colorStringToInt)(config.investmentReturnColor) : 0x702082;
  } // Create speech


  var audioObjs = [];

  if (this.data.employerContributions <= 0) {
    // Deferred
    audioObjs.push({
      id: 'returnIn1',
      text: ['Although you are no longer actively contributing to your account,', 'your account still grew by ' + (0, _utils.niceRound)(this.data.investmentReturn + (this.showCharges ? 0 : this.data.charges), true, this.currency.symbol) + ', thanks to positive investment returns.']
    });
  } else {
    audioObjs.push({
      id: 'returnIn1',
      text: 'Positive investment returns on your savings, also added to your account.'
    });
  }

  return {
    id: 'returnIn',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "returnIn"
      });
      tl.from([figure, figureLabel], 2, {
        y: -HEIGHT / 8,
        pixi: {
          alpha: 0
        }
      }); //t=0

      tl.to(numSquares, 3, {
        num: Math.ceil(Math.abs(that.data.investmentReturn + (that.showCharges ? 0 : that.data.charges)) / that.unit),
        ease: Power1.easeOut,
        onUpdate: function onUpdate(tween) {
          var shouldBe = Math.max(0, Math.round(tween.target.num));

          if (that.pixi.pots.investmentReturn.length > shouldBe) {
            while (that.pixi.pots.investmentReturn.length > shouldBe) {
              that.pixi.remove(that.pixi.pots.investmentReturn.pop());
            }
          } else {
            while (that.pixi.pots.investmentReturn.length < shouldBe) {
              var x = b2WIDTH / 2 + (Math.random() - 0.5) * b2WIDTH / 8,
                  y = Math.random() * -b2HEIGHT / 4,
                  r = 0.25; //+Math.pow(Math.random(),12)*0.5 //TODO parameterise?

              that.pixi.pots.investmentReturn.push(that.pixi.addB2Circle(x, y, r, coinFill, 0, 'investmentReturn'));
            }
          }

          that.pixi.setBalanceFigure(that.data.startBalance + that.data.bulkTransfers + that.data.transfers + (that.data.bulkTransfers + that.data.transfers > 0 ? that.data.withdrawals : 0) + that.data.employeeContributions + that.data.employerContributions + Math.min(shouldBe * that.unit, that.data.investmentReturn + (that.showCharges ? 0 : that.data.charges)));
        },
        onUpdateParams: ['{self}']
      }, "+=1"); //t=3

      tl.to([figure, figureLabel], 1, {
        pixi: {
          alpha: 0
        }
      }, "-=1"); //t=5

      figure.visible = figureLabel.visible = true;
      return tl;
    },
    audio: audioObjs
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/returnOut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var that = this,
      _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT;
  var b2WIDTH = this.box2d.WIDTH,
      b2HEIGHT = this.box2d.HEIGHT; // Create figure and figure label

  var figure = this.pixi.makeFigure(this.data.investmentReturn + (this.showCharges ? 0 : this.data.charges)),
      figureLabel = this.pixi.makeFigureLabel(this.pixi.tooltipLookup('investmentReturn'));
  figure.visible = figureLabel.visible = false;
  app.stage.addChild(figure, figureLabel); // Create pot to hold coins to remove

  this.pixi.pots = this.pixi.pots || {};
  this.pixi.pots.investmentReturn = {};
  var tweenObj = {
    x: 0
  };
  return {
    id: 'returnOut',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "returnOut"
      });
      tl.from([figure, figureLabel], 2, {
        y: HEIGHT / 2,
        pixi: {
          alpha: 0
        }
      }); //t=0

      tl.to(tweenObj, 2, {
        x: 1,
        ease: Power1.easeOut,
        onStart: function onStart() {
          var n = Math.ceil(Math.abs(that.data.investmentReturn + (that.showCharges ? 0 : that.data.charges)) / that.unit);
          that.pixi.pots.investmentReturn = that.pixi.gimme(n);
        },
        onUpdate: function onUpdate(tween) {
          Object.keys(that.pixi.pots.investmentReturn).forEach(function (key) {
            that.pixi.pots.investmentReturn[key].forEach(function (coin) {
              return coin.alpha = 1 - tween.target.x;
            });
          });
          that.pixi.setBalanceFigure(that.data.startBalance + that.data.bulkTransfers + that.data.transfers + (that.data.bulkTransfers + that.data.transfers > 0 ? that.data.withdrawals : 0) + that.data.employeeContributions + that.data.employerContributions + Math.round((that.data.investmentReturn + (that.showCharges ? 0 : that.data.charges)) * tween.target.x));
        },
        onUpdateParams: ['{self}'],
        onComplete: function onComplete() {
          var toRemove = [];
          Object.keys(that.pixi.pots.investmentReturn).forEach(function (key) {
            toRemove = toRemove.concat(that.pixi.pots.investmentReturn[key]);
          });
          that.box2d.toRemove = that.box2d.toRemove.concat(toRemove); // Removal handled in update step for stability

          that.pixi.pots.investmentReturn = {};
          that.pixi.setBalanceFigure(that.data.startBalance + that.data.bulkTransfers + that.data.transfers + (that.data.bulkTransfers + that.data.transfers > 0 ? that.data.withdrawals : 0) + that.data.employeeContributions + that.data.employerContributions + that.data.investmentReturn + (that.showCharges ? 0 : that.data.charges));
        }
      }); //t=2

      tl.to([figure, figureLabel], 1, {
        pixi: {
          alpha: 0
        }
      }, "-=1"); //t=3

      figure.visible = figureLabel.visible = true;
      return tl;
    },
    audio: [{
      id: 'returnOut1',
      text: ['Over the year, your investments have decreased in value,', 'reducing your pension account. But remember,', 'this is just a snapshot, and pension savings are', 'long term investments. Their value is expected to', 'go up, and down, over time.'],
      ssml: '<speak>Over the year, your investments have decreased in value, reducing your pension account. But remember, this is just a snapshot, and pension savings are long term investments. Their value is expected to go up. <emphasis level="strong">and down.</emphasis> Over time.</speak>'
    }]
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/chargesOut.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var that = this,
      _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT;
  var b2WIDTH = this.box2d.WIDTH,
      b2HEIGHT = this.box2d.HEIGHT; // Create figure and figure label

  var figure = this.pixi.makeFigure(this.data.charges),
      figureLabel = this.pixi.makeFigureLabel(this.pixi.tooltipLookup('charges'));
  figure.visible = figureLabel.visible = false;
  app.stage.addChild(figure, figureLabel); // Create pot to hold coins to remove

  this.pixi.pots = this.pixi.pots || {};
  this.pixi.pots.charges = {};
  var tweenObj = {
    x: 0
  };
  return {
    id: 'chargesOut',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "chargesOut"
      });
      tl.from([figure, figureLabel], 2, {
        y: HEIGHT / 2,
        pixi: {
          alpha: 0
        }
      }); //t=0

      tl.to(tweenObj, 2, {
        x: 1,
        ease: Power1.easeOut,
        onStart: function onStart() {
          var n = Math.ceil(Math.abs(that.data.charges) / that.unit);
          that.pixi.pots.charges = that.pixi.gimme(n, ["investmentReturn", "transfers", "start", "erConts", "eeConts"]);
        },
        onUpdate: function onUpdate(tween) {
          Object.keys(that.pixi.pots.charges).forEach(function (key) {
            that.pixi.pots.charges[key].forEach(function (coin) {
              return coin.alpha = 1 - tween.target.x;
            });
          });
          that.pixi.setBalanceFigure(that.data.startBalance + that.data.bulkTransfers + that.data.transfers + that.data.withdrawals + that.data.employeeContributions + that.data.employerContributions + that.data.investmentReturn + Math.round(that.data.charges * tween.target.x));
        },
        onUpdateParams: ['{self}'],
        onComplete: function onComplete() {
          var toRemove = [];
          Object.keys(that.pixi.pots.charges).forEach(function (key) {
            toRemove = toRemove.concat(that.pixi.pots.charges[key]);
          });
          that.box2d.toRemove = that.box2d.toRemove.concat(toRemove); // Removal handled in update step for stability

          that.pixi.pots.charges = {};
          that.pixi.setBalanceFigure(that.data.startBalance + that.data.bulkTransfers + that.data.transfers + that.data.withdrawals + that.data.employeeContributions + that.data.employerContributions + that.data.investmentReturn + that.data.charges);
        }
      }); //t=2

      tl.to([figure, figureLabel], 1, {
        pixi: {
          alpha: 0
        }
      }, "-=1"); //t=3

      figure.visible = figureLabel.visible = true;
      return tl;
    },
    audio: [{
      id: 'chargesOut1',
      text: 'Lastly, this represents the member fee that you paid to help manage your investments, and the running of your Account.'
    }]
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/endBalance.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources,
      that = this;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT; // Create end date figure label

  var figureLabel = this.pixi.balanceFigureLabelEnd = this.pixi.makeFigureLabel(this.data.endDate.toFormattedString());
  figureLabel.visible = false;
  app.stage.addChild(figureLabel); // Create audio

  var closingAudio = ['Meaning the closing balance on your Account,', 'as at ' + this.data.endDate.toFormattedString() + ', was ' + (0, _utils.niceRound)(this.data.endBalance, true, this.currency.symbol) + '.'];

  if (this.data.startBalance > 0 && this.data.endBalance - this.data.startBalance > 900) {
    closingAudio.push('That\'s ' + (0, _utils.niceRound)(this.data.endBalance - this.data.startBalance) + ' up on the year before.');
  }

  return {
    id: 'endBalance',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "endBalance"
      });
      tl.to(that.pixi.balanceFigure, 3, {
        y: that.pixi.balanceFigure.height / 2
      }); //t=0

      tl.to(that.pixi.jarLabel, 1, {
        pixi: {
          alpha: 0
        }
      }, "-=3"); //t=0

      tl.from(figureLabel, 2, {
        y: -HEIGHT / 8,
        pixi: {
          alpha: 0
        }
      }, "-=2"); //t=1

      tl.to(that.pixi.balanceFigure, 1, {
        pixi: {
          scale: 1.2
        }
      });
      tl.to(that.pixi.balanceFigure, 1, {
        pixi: {
          scale: 1
        }
      });
      tl.to({
        x: 0
      }, 2, {
        //dummy transition to delay
        x: 1
      });
      figureLabel.visible = true; //Can now make visible

      return tl;
    },
    audio: [{
      id: 'endBalance1',
      text: closingAudio
    }]
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/tableEnd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources,
      that = this;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT; //Create values

  var rowValues = this.pixi.tableRowValues = [];
  rowValues.push(new PIXI.Text('£' + this.data.startBalance.toFixedCommas(), this.pixi.tableHeaderTextStyle));
  if (this.data.bulkTransfers + this.data.transfers > 0) rowValues.push(new PIXI.Text('£' + (this.data.bulkTransfers + this.data.transfers).toFixedCommas(), this.pixi.tableTextStyle));
  if (this.data.withdrawals < 0) rowValues.push(new PIXI.Text("\u2212\xA3" + Math.abs(this.data.withdrawals).toFixedCommas(), this.pixi.tableTextStyle));
  if (this.data.employeeContributions > 0) rowValues.push(new PIXI.Text('£' + this.data.employeeContributions.toFixedCommas(), this.pixi.tableTextStyle));
  if (this.data.employerContributions > 0) rowValues.push(new PIXI.Text('£' + this.data.employerContributions.toFixedCommas(), this.pixi.tableTextStyle)); //TODO remove for deferreds

  rowValues.push(new PIXI.Text((this.data.investmentReturn + (this.showCharges ? 0 : this.data.charges) < 0 ? '–' : '') + '£' + Math.abs(this.data.investmentReturn + (this.showCharges ? 0 : this.data.charges)).toFixedCommas(), this.pixi.tableTextStyle));
  if (this.showCharges) rowValues.push(new PIXI.Text("\u2212\xA3" + Math.abs(this.data.charges).toFixedCommas(), this.pixi.tableTextStyle));
  rowValues.push(new PIXI.Text('£' + this.data.endBalance.toFixedCommas(), this.pixi.tableHeaderTextStyle));
  var fullRowHeight = 6 * HEIGHT / 8 / rowValues.length;
  rowValues.forEach(function (actor, i) {
    actor.alpha = 0;
    actor.position.set(15 * WIDTH / 16 - actor.width, HEIGHT / 8 + i * fullRowHeight + fullRowHeight / 2 - actor.height / 2);
    that.pixi.app.stage.addChild(actor);
  });
  return {
    id: 'tableEnd',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "tableEnd"
      });
      tl.to([that.pixi.balanceFigure, that.pixi.balanceFigureLabelEnd, that.pixi.jarLabel, that.pixi.jar, that.pixi.coinsContainer], 1, {
        pixi: {
          alpha: 0
        },
        onComplete: function onComplete() {
          that.pixi.tooltipOut();
        },
        ease: Power2.easeOut
      });
      tl.to(that.pixi.tableRowRects.concat(that.pixi.tableRowTexts).concat(that.pixi.tableRowValues), 1, {
        pixi: {
          alpha: 1
        },
        ease: Power2.easeOut
      }, "-=0.5").to(that.pixi.tableRowRects.concat(that.pixi.tableRowTexts).concat(that.pixi.tableRowValues), 1, {
        pixi: {
          alpha: 0
        },
        ease: Power2.easeOut
      }, "+=" + (4 + rowValues.length));
      return tl;
    },
    audio: [{
      id: 'tableEnd1',
      text: 'Here\'s that information again.'
    }]
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/beneficiaries.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources,
      that = this;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT;
  var fill = config.beneficiariesColor ? (0, _utils.colorStringToInt)(config.beneficiariesColor) : this.pixi.primaryColor; // Build sprites

  var person = new PIXI.Container(),
      personSpriteMask = new PIXI.Sprite(resources['beneficiaries'].texture),
      personColour = new PIXI.Graphics();
  personColour.beginFill(fill);
  personColour.drawRect(0, 0, personSpriteMask.width, personSpriteMask.height);
  personColour.endFill();
  person.addChild(personColour, personSpriteMask);
  personColour.mask = personSpriteMask;
  person.pivot.set(personSpriteMask.width / 2, personSpriteMask.height / 2);
  var scaleTo = WIDTH / 2 / personSpriteMask.width;
  person.scale.set(scaleTo);
  person.x = WIDTH / 2;
  person.y = HEIGHT + person.height / 2;
  person.alpha = 0;
  var hand = new PIXI.Container(),
      handSpriteMask = new PIXI.Sprite(resources['beneficiariesHand'].texture),
      handColour = new PIXI.Graphics();
  handColour.beginFill(fill);
  handColour.drawRect(0, 0, handSpriteMask.width, handSpriteMask.height);
  handColour.endFill();
  hand.addChild(handColour, handSpriteMask);
  handColour.mask = handSpriteMask;
  hand.pivot.set(handSpriteMask.width / 2, handSpriteMask.height / 2);
  scaleTo = WIDTH / 2 / handSpriteMask.width;
  hand.scale.set(0.5);
  hand.x = WIDTH / 2 - hand.width / 8;
  hand.y = HEIGHT + person.height + hand.height / 2;
  hand.alpha = 0;
  app.stage.addChild(person, hand);
  return {
    id: 'beneficiaries',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "beneficiaries"
      });
      tl.to(person, 4, {
        pixi: {
          y: (HEIGHT - person.height - hand.height) / 2 + person.height / 2,
          alpha: 1
        }
      }).to(hand, 4, {
        pixi: {
          y: HEIGHT - (HEIGHT - person.height - hand.height) / 2 - hand.height / 2,
          alpha: 1
        }
      }, "-=4").to(person, 2, {
        pixi: {
          y: "-=" + HEIGHT / 30
        },
        yoyo: true,
        repeat: 6,
        ease: Sine.easeOut
      }).to([person, hand], 2, {
        pixi: {
          alpha: 0
        }
      }, "-=2");
      return tl;
    },
    audio: [{
      id: 'beneficiaries1',
      text: ['Before we finish, we noticed that you\'re', 'yet to provide us with information on who', 'you\'d want to receive your pension savings if', 'anything were to happen to you. This is really', 'important and it will only take a minute to add this', 'to your Account. Please make sure you go to the', 'beneficiary nomination page to do so.']
    }]
  };
}
},{"../utils.js":"src/utils.js"}],"src/scenes/jarEnd.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _utils = require("../utils.js");

function _default(config) {
  // Init vars
  config = config || {};
  var _this$pixi = this.pixi,
      app = _this$pixi.app,
      resources = _this$pixi.resources,
      that = this;
  var WIDTH = this.pixi.WIDTH,
      HEIGHT = this.pixi.HEIGHT; // Create button

  var button = new PIXI.Container(),
      buttonBg = new PIXI.Graphics(),
      buttonTextStyle = this.pixi.baseTextStyle.clone();
  buttonTextStyle.fontSize = config.buttonFontSize ? parseInt(config.buttonFontSize) : 24;

  if (config.buttonFont) {
    if (Array.isArray(config.buttonFont)) {
      if (config.buttonFont.length) buttonTextStyle.fontFamily = config.buttonFont;
    } else buttonTextStyle.fontFamily = [config.buttonFont];
  }

  if (config.buttonTextColor) buttonTextStyle.fill = (0, _utils.colorStringToInt)(config.buttonTextColor);
  var buttonTextString = (0, _utils.getString)('button', this),
      buttonTextMetrics = PIXI.TextMetrics.measureText(buttonTextString, buttonTextStyle),
      buttonH = buttonTextMetrics.height * 1.5,
      buttonW = buttonTextMetrics.width + 30,
      buttonText = new PIXI.Text(buttonTextString, buttonTextStyle),
      buttonBgFill = config.buttonBgColor ? (0, _utils.colorStringToInt)(config.buttonBgColor) : this.pixi.primaryColor,
      buttonPos = config.buttonPosition && config.buttonPosition.toLowerCase && ['top', 'bottom'].includes(config.buttonPosition.toLowerCase()) ? config.buttonPosition.toLowerCase() : 'top';
  buttonBg.beginFill(buttonBgFill);
  buttonBg.drawRect(0, 0, buttonW, buttonH);
  buttonText.position.set(15, buttonTextMetrics.height * 0.25);
  button.addChild(buttonBg, buttonText);
  button.interactive = true;
  button.buttonMode = true;
  button.hitArea = new PIXI.Rectangle(0, 0, buttonW, buttonH);
  button.on('click', function (e) {
    console.log('Video Statement ' + that.id + ': Clicked benefit statement URL button');
    that.tracker.trackEvent('click-BenStat');
    that.tracker.finish(); // record as finishing the video

    if (that.user.benefitStatementUrl) window.open(that.user.benefitStatementUrl, '_blank');
  });
  button.on('touchend', function (e) {
    console.log('Video Statement ' + that.id + ': Clicked benefit statement URL button');
    that.tracker.trackEvent('click-BenStat');
    that.tracker.finish(); // record as finishing the video

    if (that.user.benefitStatementUrl) window.open(that.user.benefitStatementUrl, '_blank');
  });
  button.on('pointerover', function (e) {
    button.scale.x *= 1.05;
    button.scale.y *= 1.05;
  });
  button.on('pointerout', function (e) {
    button.scale.x *= 1 / 1.05;
    button.scale.y *= 1 / 1.05;
  });
  button.pivot.set(buttonW / 2, buttonH / 2);
  if (buttonPos == 'bottom') button.position.set(WIDTH / 2, HEIGHT + 1);else button.position.set(WIDTH / 2, -buttonH - 1); //button.cacheAsBitmap = true

  button.alpha = 0;
  app.stage.addChild(button);
  return {
    id: 'jarEnd',
    tl: function tl() {
      var tl = new TimelineLite({
        id: "jarEnd"
      });
      tl.to([that.pixi.jar, that.pixi.coinsContainer], 1, {
        pixi: {
          alpha: 1
        },
        ease: Power2.easeOut
      });

      if (buttonPos == 'bottom') {
        tl.to(button, 2, {
          y: 7 * HEIGHT / 8 + buttonH / 2,
          pixi: {
            alpha: 1
          },
          ease: Back.easeOut
        }, "+=4");
      } else {
        tl.to(button, 2, {
          y: HEIGHT / 8 - buttonH / 2,
          pixi: {
            alpha: 1
          },
          ease: Back.easeOut
        }, "+=4");
      }

      return tl;
    },
    audio: [{
      id: 'jarEnd1',
      text: ['Finally, this video is just a summary, so', 'it\'s important to read your full statement too.', 'You can do so by clicking here.', 'Thanks for taking the time to catch up on your savings.', 'We look forward to helping you save for another year.'],
      ssml: '<speak>Finally, this video is just a summary, so it\'s important to read your full statement too. You can do so by clicking here. Thanks for taking the time to catch up on your savings. We look forward to helping you save for another year.<break time="1" /></speak>'
    }]
  };
}
},{"../utils.js":"src/utils.js"}],"src/build.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _videoStart = _interopRequireDefault(require("./scenes/videoStart"));

var _logoStart = _interopRequireDefault(require("./scenes/logoStart"));

var _intro = _interopRequireDefault(require("./scenes/intro"));

var _tableStart = _interopRequireDefault(require("./scenes/tableStart"));

var _jarIn = _interopRequireDefault(require("./scenes/jarIn"));

var _startBalanceIn = _interopRequireDefault(require("./scenes/startBalanceIn"));

var _transfersIn = _interopRequireDefault(require("./scenes/transfersIn"));

var _withdrawalsOut = _interopRequireDefault(require("./scenes/withdrawalsOut"));

var _eeContsIn = _interopRequireDefault(require("./scenes/eeContsIn"));

var _erContsIn = _interopRequireDefault(require("./scenes/erContsIn"));

var _returnIn = _interopRequireDefault(require("./scenes/returnIn"));

var _returnOut = _interopRequireDefault(require("./scenes/returnOut"));

var _chargesOut = _interopRequireDefault(require("./scenes/chargesOut"));

var _endBalance = _interopRequireDefault(require("./scenes/endBalance"));

var _tableEnd = _interopRequireDefault(require("./scenes/tableEnd"));

var _beneficiaries = _interopRequireDefault(require("./scenes/beneficiaries"));

var _jarEnd = _interopRequireDefault(require("./scenes/jarEnd"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(config) {
  if (this.DEBUG) console.log('Video Statement ' + this.id + ': building scenes');
  var that = this,
      sceneDict = {
    videoStart: _videoStart.default,
    logoStart: _logoStart.default,
    intro: _intro.default,
    tableStart: _tableStart.default,
    jarIn: _jarIn.default,
    startBalanceIn: _startBalanceIn.default,
    transfersIn: _transfersIn.default,
    withdrawalsOut: _withdrawalsOut.default,
    eeContsIn: _eeContsIn.default,
    erContsIn: _erContsIn.default,
    returnIn: _returnIn.default,
    returnOut: _returnOut.default,
    chargesOut: _chargesOut.default,
    endBalance: _endBalance.default,
    tableEnd: _tableEnd.default,
    beneficiaries: _beneficiaries.default,
    jarEnd: _jarEnd.default
  },
      scenesToInclude = Object.keys(sceneDict),
      //all scenes except..
  scenes = [],
      sceneObjs = []; //... videoStart and chargesOut. These are disabled by default.

  scenesToInclude.splice(scenesToInclude.findIndex(function (scene) {
    return scene === 'videoStart';
  }), 1);
  scenesToInclude.splice(scenesToInclude.findIndex(function (scene) {
    return scene === 'chargesOut';
  }), 1); //['logoStart','intro','tableStart','jarIn','startingBalanceIn','transfersIn','withdrawalsOut','eeContsIn','erContsIn','returnIn','returnOut','closingBalance','tableEnd'],
  //Reduce list of all available scenes to just those enabled in config

  if (config.list && config.list.length) {
    scenesToInclude = config.list.filter(function (sceneName) {
      return Object.keys(sceneDict).map(function (n) {
        return n.toLowerCase();
      }).includes(sceneName.toLowerCase());
    });
  } else {
    if (config.enabled && config.enabled.length) {
      config.enabled.forEach(function (n) {
        if (Object.keys(sceneDict).map(function (n2) {
          return n2.toLowerCase();
        }).includes(n.toLowerCase())) scenesToInclude.push(n);
      });
    }

    if (config.disabled && config.disabled.length) {
      scenesToInclude = scenesToInclude.filter(function (n) {
        return !config.disabled.map(function (n2) {
          return n2.toLowerCase();
        }).includes(n.toLowerCase());
      });
    }
  }

  if (scenesToInclude.includes('chargesOut')) this.showCharges = true; //Remove scenes that are not applicable for this member

  if (this.data.bulkTransfers + this.data.transfers <= 0) {
    var ind = scenesToInclude.findIndex(function (scene) {
      return scene == 'transfersIn';
    });

    if (ind >= 0) {
      scenesToInclude.splice(ind, 1);
    }
  }

  if (!this.data.withdrawals) {
    var _ind = scenesToInclude.findIndex(function (scene) {
      return scene == 'withdrawalsOut';
    });

    if (_ind >= 0) {
      scenesToInclude.splice(_ind, 1);
    }
  }

  if (this.data.employeeContributions <= 0) {
    var _ind2 = scenesToInclude.findIndex(function (scene) {
      return scene == 'eeContsIn';
    });

    if (_ind2 >= 0) {
      scenesToInclude.splice(_ind2, 1);
    }
  }

  if (this.data.employerContributions <= 0) {
    var _ind3 = scenesToInclude.findIndex(function (scene) {
      return scene == 'erContsIn';
    });

    if (_ind3 >= 0) {
      scenesToInclude.splice(_ind3, 1);
    } //TODO add deferred specific scene in here?

  }

  if (this.data.investmentReturn + (this.showCharges ? 0 : this.data.charges) < 0) {
    var _ind4 = scenesToInclude.findIndex(function (scene) {
      return scene == 'returnIn';
    });

    if (_ind4 >= 0) {
      scenesToInclude.splice(_ind4, 1);
    }
  } else {
    var _ind5 = scenesToInclude.findIndex(function (scene) {
      return scene == 'returnOut';
    });

    if (_ind5 >= 0) {
      scenesToInclude.splice(_ind5, 1);
    }
  }

  if (this.user.beneficiaries || this.user.beneficiaries === undefined) {
    var _ind6 = scenesToInclude.findIndex(function (scene) {
      return scene == 'beneficiaries';
    });

    if (_ind6 >= 0) {
      scenesToInclude.splice(_ind6, 1);
    }
  } // Move position of withdrawals scene depending on if we also have a transfers scene


  if (scenesToInclude.includes('withdrawalsOut') && !scenesToInclude.includes('transfersIn')) {
    var ind1 = scenesToInclude.findIndex(function (scene) {
      return scene == 'withdrawalsOut';
    }),
        ind2 = scenesToInclude.findIndex(function (scene) {
      return scene == 'returnIn' || scene == 'returnOut';
    });

    if (ind1 >= 0 && ind2 >= 0) {
      scenesToInclude.splice(ind2, 0, scenesToInclude.splice(ind1, 1)[0]);
    }
  } // Done


  if (scenesToInclude.includes('chargesOut')) this.showCharges = true;
  scenes = scenesToInclude.map(function (n) {
    return sceneDict[n];
  }); // Go through each scene, queuing the speech needed and storing objects

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = scenes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var scene = _step.value;
      var sceneObj = scene.call(this, config);
      if (!sceneObj.audio) sceneObj.audio = [];

      for (var i = 0; i < sceneObj.audio.length; i++) {
        sceneObj.audio[i] = this.audio.queueSpeech(sceneObj.audio[i]);
      }

      sceneObjs.push(sceneObj); //if(this.DEBUG) console.log('Video Statement '+this.id+': built '+sceneObj.id)
    } // Now that all the speech has been queued, fetch it

  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return new Promise(function (resolve, reject) {
    that.audio.getSpeech().then(function (numLoaded) {
      var addedUpTo = 0; // Now that we have all the Howl objects and we know they are loaded

      if (that.DEBUG) console.log('Video Statement ' + that.id + ': building timeline');
      sceneObjs.forEach(function (sceneObj, ind) {
        // Get the timeline object
        that.timeline.add(sceneObj.id, addedUpTo);
        var tl = sceneObj.tl(); // Link the howl objects for this timeline, and add caption events

        tl.audio = sceneObj.audio;
        var audioBefore = 0;

        var _loop = function _loop(i, l) {
          tl.audio[i].startTime = tl.audio[i].howl['_start'] = addedUpTo + audioBefore;
          if (i !== l - 1) tl.audio[i].howl['_next'] = tl.audio[i + 1].howl;
          if (i !== 0) tl.audio[i].howl['_prev'] = tl.audio[i - 1].howl;

          if (Array.isArray(tl.audio[i].text)) {
            var charsToNow = 0,
                totalChars = tl.audio[i].text.join('').length;
            tl.audio[i].text.forEach(function (t, j) {
              tl.add(function () {
                that.setCC(tl.audio[i].text[j]);
              }, audioBefore + charsToNow / totalChars * tl.audio[i].howl.duration());
              charsToNow += t.length;
            });
          } else {
            tl.add(function () {
              that.setCC(tl.audio[i].text);
            }, audioBefore);
          }

          audioBefore += tl.audio[i].howl.duration();
        };

        for (var i = 0, l = tl.audio.length; i < l; i++) {
          _loop(i, l);
        }
        /*Add something to end of timeline to allow audio to finish if needed
        if(tl.duration() < audioBefore){ 
          let t = Math.ceil((audioBefore-tl.duration())*10)/10
          tl.to({x:0},t,{x:1})
        }*/
        // Add final caption event


        tl.add(function () {
          that.setCC('');
        }, audioBefore); // Add the scene to the master timeline

        that.timeline.add(tl, sceneObj.id);
        addedUpTo += tl.duration(); //let existingOnStart = tl.eventCallback("onStart")

        tl.eventCallback("onStart", function () {
          if (that.DEBUG) console.log('Video Statement ' + that.id + ': onStart', this.vars.id); //if(existingOnStart) existingOnStart()
          // Standard audio setup

          if (this.audio.length) {
            if (that.audio.speech.currentlyPlaying) {
              that.audio.speech.currentlyPlaying.stop();
              that.audio.speech.currentlyPlaying = null;
              that.audio.speech.currentlyPlayingId = null;
            }

            if (this.audio[0].howl) {
              that.audio.speech.currentlyPlaying = this.audio[0].howl;
              that.audio.speech.currentlyPlayingId = this.audio[0].howl.play();
            } else if (this.audio.length > 1 && this.audio[1].howl) {
              //fail safe, try playing the next one
              that.audio.speech.currentlyPlaying = this.audio[1].howl;
              that.audio.speech.currentlyPlayingId = this.audio[1].howl.play();
            }
          }
        });
      });
      sceneObjs = null;
      if (that.DEBUG) console.log('Video Statement ' + that.id + ': timeline built');
      resolve();
    });
  });
}
},{"./scenes/videoStart":"src/scenes/videoStart.js","./scenes/logoStart":"src/scenes/logoStart.js","./scenes/intro":"src/scenes/intro.js","./scenes/tableStart":"src/scenes/tableStart.js","./scenes/jarIn":"src/scenes/jarIn.js","./scenes/startBalanceIn":"src/scenes/startBalanceIn.js","./scenes/transfersIn":"src/scenes/transfersIn.js","./scenes/withdrawalsOut":"src/scenes/withdrawalsOut.js","./scenes/eeContsIn":"src/scenes/eeContsIn.js","./scenes/erContsIn":"src/scenes/erContsIn.js","./scenes/returnIn":"src/scenes/returnIn.js","./scenes/returnOut":"src/scenes/returnOut.js","./scenes/chargesOut":"src/scenes/chargesOut.js","./scenes/endBalance":"src/scenes/endBalance.js","./scenes/tableEnd":"src/scenes/tableEnd.js","./scenes/beneficiaries":"src/scenes/beneficiaries.js","./scenes/jarEnd":"src/scenes/jarEnd.js"}],"src/loop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {
  // rAF polyfill - https://gist.github.com/paulirish/1579671
  (function () {
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];

    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
      window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
    }

    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
      var currTime = new Date().getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = window.setTimeout(function () {
        callback(currTime + timeToCall);
      }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
      clearTimeout(id);
    };
  })();

  var that = this,
      frameTimes = [];

  this.box2d.doWorldStep = function (time) {
    if (!time) time = new Date().getTime();
    var lastFrameTime = frameTimes.length ? frameTimes[frameTimes.length - 1] : time - 1000 / 60;
    var dt = Math.max(Math.min((time - lastFrameTime) / 1000, 1 / 30), 1 / 60); //that.box2d.world.Step(dt, 12, 12);

    that.box2d.world.Step(dt / 2, 6, 6);
    that.box2d.world.Step(dt / 2, 6, 6);
    if (that.DEBUG) that.box2d.world.DrawDebugData();
    that.box2d.world.ClearForces();
  };

  function update(time) {
    //Aliases
    var world = this.box2d.world,
        app = this.pixi.app,
        MARGIN = this.pixi.MARGIN,
        SCALE = this.pixi.SCALE;
    if (!time) time = new Date().getTime(); // Check if mouse needs updating

    if (this.pixi.jar && this.pixi.jar.alpha > 0.5 && this.mouse.isPointerDown && !this.box2d.mouseJoint) {
      var dragBody = this.box2d.getBodyAt(this.mouse.touchX, this.mouse.touchY);

      if (dragBody) {
        dragBody.SetAwake(true);
        var jointDef = new Box2D.Dynamics.Joints.b2MouseJointDef();
        jointDef.bodyA = world.GetGroundBody();
        jointDef.bodyB = dragBody;
        jointDef.target.Set(this.mouse.touchX, this.mouse.touchY);
        jointDef.collideConnected = true;
        jointDef.maxForce = 1000;
        this.box2d.mouseJoint = world.CreateJoint(jointDef);
      }
    }

    if (this.box2d.mouseJoint) {
      if (this.pixi.jar.alpha > 0.5 && this.mouse.isPointerDown) this.box2d.mouseJoint.SetTarget(new Box2D.Common.Math.b2Vec2(this.mouse.touchX, this.mouse.touchY));else {
        world.DestroyJoint(this.box2d.mouseJoint);
        this.box2d.mouseJoint = null;
      }
    } // Check if any bodies need removing


    if (this.box2d.toRemove) {
      while (this.box2d.toRemove.length) {
        this.pixi.remove(this.box2d.toRemove.shift());
      }
    }

    if (!this.STOP) {
      // Update world
      this.box2d.doWorldStep(time);
    } //Update graphics
    //for (var i=0; i<app.stage.children.length; i++) { // Coins are added to a container of their own to ease fading out


    for (var i = 0; i < this.pixi.coinsContainer.children.length; i++) {
      var actor = this.pixi.coinsContainer.children[i]; //app.stage.children[i]

      if (!actor.body) continue;
      var bodyPos = actor.body.GetPosition();
      actor.rotation = actor.body.GetAngle();
      var marginOffsetX = actor.body.GetFixtureList().GetType() !== Box2D.Collision.Shapes.b2Shape.e_polygonShape ? 0 : MARGIN / 2 / (1 - MARGIN) * actor.geometry.graphicsData[0].shape.width;
      var marginOffsetY = actor.body.GetFixtureList().GetType() !== Box2D.Collision.Shapes.b2Shape.e_polygonShape ? 0 : MARGIN / 2 / (1 - MARGIN) * actor.geometry.graphicsData[0].shape.height;
      actor.position.set(bodyPos.x * SCALE + (marginOffsetX * Math.cos(actor.rotation) - marginOffsetY * Math.sin(actor.rotation)), bodyPos.y * SCALE + (marginOffsetX * Math.sin(actor.rotation) + marginOffsetY * Math.cos(actor.rotation)));
    }

    if (this.ABORT) {
      if (document.getElementById('fps')) document.getElementById('fps').innerHTML = "-- FPS";
      this.timeline.progress(0);
      VBS.$el.find('.anim-loading').hide();
      VBS.$el.find('.anim-play').show();
      VBS.music.stop();
      VBS.musicWasPlaying = false;
      if (this.speech.currentlyPlaying) this.speech.currentlyPlaying.stop();
      this.speech.currentlyPlayingId = null;
      this.speech.currentlyPlaying = null;
    } else {
      // FPS counter
      if (document.getElementById('fps')) {
        frameTimes.push(time);
        var gtOneSec;

        while (time - frameTimes[0] > 1000) {
          gtOneSec = frameTimes.shift();
        }

        if (gtOneSec) frameTimes.unshift(gtOneSec);
        if (frameTimes.length > 1) document.getElementById('fps').innerHTML = Math.round(1000 * frameTimes.length / (frameTimes[frameTimes.length - 1] - frameTimes[0])) + " FPS";
      } // Loop


      window.requestAnimationFrame(update.bind(this));
    }
  }

  window.requestAnimationFrame(update.bind(this));
}
},{}],"src/factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var utils = _interopRequireWildcard(require("./utils"));

var _gsap = _interopRequireDefault(require("./setup/gsap"));

var _matomo = _interopRequireDefault(require("./setup/matomo"));

var _pixi2 = _interopRequireDefault(require("./setup/pixi"));

var _box2d2 = _interopRequireDefault(require("./setup/box2d"));

var _mouse = _interopRequireDefault(require("./setup/mouse"));

var _howler = _interopRequireDefault(require("./setup/howler"));

var _speech2 = _interopRequireDefault(require("./setup/speech"));

var _build = _interopRequireDefault(require("./build.js"));

var _loop = _interopRequireDefault(require("./loop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _default() {
  // Constructor
  var VideoStatement = function VideoStatement(config) {
    if (!config) {
      console.error('ParameterError: must pass config object to instantiate a new VideoStatement');
      return false;
    }
    /*********************
     * Private variables *
     *********************/


    var _user,
        _data,
        _$el,
        _tracker,
        _timeline,
        _playing = false,
        _config = config,
        _pixi,
        _box2d,
        _audio = {},
        _speech,
        _currency = {},
        _behaviour,
        _DEBUG = !!(VideoStatement.debug || VideoStatement.DEBUG || config.debug || config.DEBUG);

    var videoControlerTimeChanged = false,
        videoControlerTimeChanger = null;
    /********************
     * Public variables *
     ********************/

    this.id = config.id === 0 ? config.id : config.id || VideoStatement.counter + 1;
    this.title = config.title || 'Video Statement ' + this.id;
    /******************************
     * Get/Create wrapper element *
     ******************************/

    var needToAppend = false;
    _$el = utils.getjQueryElement(config.wrap || config.el || config.$el);

    if (!_$el) {
      var $wrapSearch = $("[data-video-statement-wrap],.video-statement-wrap").filter(function (i, e) {
        return $(e).find('.video-statement-canvas').length == 0;
      });
      if ($wrapSearch.length > 0) _$el = $wrapSearch.eq(0);else {
        if (!utils.getjQueryElement(config.appendTo) && _DEBUG) console.warn('InputWarning: No valid wrapper or appendTo element provided, one will be created and appended to the `body`');
        _$el = $('<div class="video-statement-wrap" id="video-statement-wrap-' + this.id + '"></div>');
        needToAppend = true;
      }
    }

    _$el[0].videoStatement = this;
    if (!_$el.attr('id')) _$el.attr('id', 'video-statement-wrap-' + this.id);
    /**************************
     * Parse User & Data Info *
     **************************/
    // First, see if data was passed directly in config

    if (_typeof(config.user) === 'object' && _typeof(config.data) === 'object') this.$dataTable = 'config';else {
      this.$dataTable = utils.getjQueryElement(config.dataTable, false);
      if (this.$dataTable) this.$dataTable = this.$dataTable.filter(function () {
        return !$(this).attr('data-for-video-statement');
      });

      if (!this.$dataTable || this.$dataTable.length == 0) {
        // If there exists an unused table inside our wrapper, use that
        if (_$el.find('.video-statement-data-table').filter(function () {
          return !$(this).attr('data-for-video-statement');
        }).length > 0) {
          this.$dataTable = _$el.find('.video-statement-data-table').filter(function () {
            return !$(this).attr('data-for-video-statement');
          }).eq(0);
        } // Else if there exists an unused table anywhere, use that
        else if ($('.video-statement-data-table').filter(function () {
            return !$(this).attr('data-for-video-statement');
          }).length > 0) {
            if (_DEBUG) console.warn('InputWarning: Table with class `video-statement-data-table` was found outside the wrapper element');
            this.$dataTable = $('.video-statement-data-table').filter(function () {
              return !$(this).attr('data-for-video-statement');
            }).eq(0);
          } // Else if there exists any table inside our wrapper el
          else if (_$el.find('table').length > 0) {
              if (_DEBUG) console.warn('InputWarning: No table with class `video-statement-data-table` could be found, using a `table` element found inside the wrapper');
              this.$dataTable = _$el.find('table').eq(0);
            }
      } // If we can't find a datatable, fail


      if (!this.$dataTable) {
        console.error('InputError: No data table was found');
        return false;
      }
    }
    var parsedData = this.$dataTable === 'config' ? $.extend({}, config.user, config.data) : utils.parseTable(this.$dataTable);
    console.log(parsedData);

    if (!parsedData) {
      console.error('Error: Parsing data table failed');
      return false;
    }

    var validated = utils.checkUserData(parsedData, _DEBUG);

    if (!validated) {
      //console.error is in checkUserData
      return false;
    }

    _user = {
      schemeCode: validated.schemeCode,
      memberName: validated.memberName,
      forename: validated.forename,
      possessive: validated.possessive,
      employer: validated.employer,
      employerPossessive: validated.employerPossessive,
      category: validated.category,
      beneficiaries: validated.beneficiaries,
      benefitStatementUrl: validated.benefitStatementUrl,
      balance: validated.balance // TODO Today's balance - not currently used

    };

    if (!/\b[A-Z]/.test(_user.memberName)) {
      _user.memberName = _user.memberName.split(/\b/g).map(function (word) {
        return word[0].toUpperCase() + word.substring(1);
      }).join('').replace(/\bMc(\w)/, function (match, g) {
        return 'Mc' + g.toUpperCase();
      });
    }

    _user.forename = _user.forename || _user.memberName.split(' ')[0];
    if (!/\b[A-Z]/.test(_user.forename)) _user.forename = _user.forename[0].toUpperCase() + _user.forename.substring(1);
    _user.possessive = _user.possessive || _user.forename.replace(/[^\w]+$/g, '') + '\'' + (_user.forename[_user.forename.length - 1] == 's' ? '' : 's');
    _user.employer = _user.employer || 'Your employer';
    _user.employerPossessive = _user.employerPossessive || _user.employer.replace(/[^\w]+$/g, '') + '\'' + (_user.employer[_user.employer.length - 1] == 's' ? '' : 's');
    _data = {
      startDate: validated.startDate,
      endDate: validated.endDate,
      startBalance: validated.startBalance,
      bulkTransfers: validated.bulkTransfers,
      transfers: validated.transfers,
      withdrawals: validated.withdrawals,
      employeeContributions: validated.employeeContributions,
      employerContributions: validated.employerContributions,
      investmentReturn: validated.investmentReturn,
      charges: validated.charges,
      endBalance: validated.endBalance,
      benefitStatementUrl: validated.benefitStatementUrl
    }; // All validated so can append $el (if needed), increase counter, and mark table as used

    if (needToAppend) _$el.appendTo(config.appendTo && utils.getjQueryElement(config.appendTo) || document.body);
    VideoStatement.counter++;

    if (this.$dataTable !== 'config') {
      if (!this.$dataTable.attr('id')) this.$dataTable.attr('id', 'video-statement-data-table-' + this.id);
      if (!this.$dataTable.hasClass('video-statement-data-table')) this.$dataTable.addClass('video-statement-data-table');
      this.$dataTable.attr('data-for-video-statement', this.id);
    }
    /******************
     * Parse Currency *
     ******************/


    var currencies = {
      ALL: {
        name: "Albania Lek",
        symbol: "Lek"
      },
      AFN: {
        name: "Afghanistan Afghani",
        symbol: "\u060B"
      },
      ARS: {
        name: "Argentina Peso",
        symbol: "$"
      },
      AWG: {
        name: "Aruba Guilder",
        symbol: "\u0192"
      },
      AUD: {
        name: "Australia Dollar",
        symbol: "A$"
      },
      AZN: {
        name: "Azerbaijan Manat",
        symbol: "\u20BC"
      },
      BSD: {
        name: "Bahamas Dollar",
        symbol: "B$"
      },
      BBD: {
        name: "Barbados Dollar",
        symbol: "Bds$"
      },
      BYN: {
        name: "Belarus Ruble",
        symbol: "Br"
      },
      BZD: {
        name: "Belize Dollar",
        symbol: "BZ$"
      },
      BMD: {
        name: "Bermuda Dollar",
        symbol: "BD$"
      },
      BOB: {
        name: "Bolivia Bol\xEDviano",
        symbol: "$b"
      },
      BAM: {
        name: "Bosnia and Herzegovina Convertible Mark",
        symbol: "KM"
      },
      BWP: {
        name: "Botswana Pula",
        symbol: "P"
      },
      BGN: {
        name: "Bulgaria Lev",
        symbol: "\u043B\u0432"
      },
      BRL: {
        name: "Brazil Real",
        symbol: "R$"
      },
      BND: {
        name: "Brunei Darussalam Dollar",
        symbol: "B$"
      },
      KHR: {
        name: "Cambodia Riel",
        symbol: "\u17DB"
      },
      CAD: {
        name: "Canada Dollar",
        symbol: "Can$"
      },
      KYD: {
        name: "Cayman Islands Dollar",
        symbol: "CI$"
      },
      CLP: {
        name: "Chile Peso",
        symbol: "CLP$"
      },
      CNY: {
        name: "China Yuan Renminbi",
        symbol: "\xA5"
      },
      COP: {
        name: "Colombia Peso",
        symbol: "COL$"
      },
      CRC: {
        name: "Costa Rica Colon",
        symbol: "\u20A1"
      },
      HRK: {
        name: "Croatia Kuna",
        symbol: "kn"
      },
      CUP: {
        name: "Cuba Peso",
        symbol: "\u20B1"
      },
      CZK: {
        name: "Czech Republic Koruna",
        symbol: "K\u010D"
      },
      DKK: {
        name: "Denmark Krone",
        symbol: "kr"
      },
      DOP: {
        name: "Dominican Republic Peso",
        symbol: "RD$"
      },
      XCD: {
        name: "East Caribbean Dollar",
        symbol: "EC$"
      },
      EGP: {
        name: "Egypt Pound",
        symbol: "E\xA3"
      },
      SVC: {
        name: "El Salvador Colon",
        symbol: "\u20A1"
      },
      EUR: {
        name: "Euro",
        symbol: "\u20AC"
      },
      FKP: {
        name: "Falkland Islands (Malvinas) Pound",
        symbol: "FK\xA3"
      },
      FJD: {
        name: "Fiji Dollar",
        symbol: "FJ$"
      },
      GHS: {
        name: "Ghana Cedi",
        symbol: "\xA2"
      },
      GIP: {
        name: "Gibraltar Pound",
        symbol: "\xA3"
      },
      GTQ: {
        name: "Guatemala Quetzal",
        symbol: "Q"
      },
      GGP: {
        name: "Guernsey Pound",
        symbol: "\xA3"
      },
      GYD: {
        name: "Guyana Dollar",
        symbol: "GY$"
      },
      HNL: {
        name: "Honduras Lempira",
        symbol: "L"
      },
      HKD: {
        name: "Hong Kong Dollar",
        symbol: "HK$"
      },
      HUF: {
        name: "Hungary Forint",
        symbol: "Ft"
      },
      ISK: {
        name: "Iceland Krona",
        symbol: "kr"
      },
      INR: {
        name: "India Rupee",
        symbol: ""
      },
      IDR: {
        name: "Indonesia Rupiah",
        symbol: "Rp"
      },
      IRR: {
        name: "Iran Rial",
        symbol: "\uFDFC"
      },
      IMP: {
        name: "Isle of Man Pound",
        symbol: "\xA3"
      },
      ILS: {
        name: "Israel Shekel",
        symbol: "\u20AA"
      },
      JMD: {
        name: "Jamaica Dollar",
        symbol: "J$"
      },
      JPY: {
        name: "Japan Yen",
        symbol: "\xA5"
      },
      JEP: {
        name: "Jersey Pound",
        symbol: "\xA3"
      },
      KZT: {
        name: "Kazakhstan Tenge",
        symbol: "\u043B\u0432"
      },
      KPW: {
        name: "Korea (North) Won",
        symbol: "\u20A9"
      },
      KRW: {
        name: "Korea (South) Won",
        symbol: "\u20A9"
      },
      KGS: {
        name: "Kyrgyzstan Som",
        symbol: "\u043B\u0432"
      },
      LAK: {
        name: "Laos Kip",
        symbol: "\u20AD"
      },
      LBP: {
        name: "Lebanon Pound",
        symbol: "\xA3"
      },
      LRD: {
        name: "Liberia Dollar",
        symbol: "LD$"
      },
      MKD: {
        name: "Macedonia Denar",
        symbol: "\u0434\u0435\u043D"
      },
      MYR: {
        name: "Malaysia Ringgit",
        symbol: "RM"
      },
      MUR: {
        name: "Mauritius Rupee",
        symbol: "\u20A8"
      },
      MXN: {
        name: "Mexico Peso",
        symbol: "Mex$"
      },
      MNT: {
        name: "Mongolia Tughrik",
        symbol: "\u20AE"
      },
      MZN: {
        name: "Mozambique Metical",
        symbol: "MT"
      },
      NAD: {
        name: "Namibia Dollar",
        symbol: "N$"
      },
      NPR: {
        name: "Nepal Rupee",
        symbol: "\u20A8"
      },
      ANG: {
        name: "Netherlands Antilles Guilder",
        symbol: "\u0192"
      },
      NZD: {
        name: "New Zealand Dollar",
        symbol: "NZ$"
      },
      NIO: {
        name: "Nicaragua Cordoba",
        symbol: "C$"
      },
      NGN: {
        name: "Nigeria Naira",
        symbol: "\u20A6"
      },
      NOK: {
        name: "Norway Krone",
        symbol: "kr"
      },
      OMR: {
        name: "Oman Rial",
        symbol: "\uFDFC"
      },
      PKR: {
        name: "Pakistan Rupee",
        symbol: "\u20A8"
      },
      PAB: {
        name: "Panama Balboa",
        symbol: "B\/."
      },
      PYG: {
        name: "Paraguay Guarani",
        symbol: "Gs"
      },
      PEN: {
        name: "Peru Sol",
        symbol: "S\/."
      },
      PHP: {
        name: "Philippines Peso",
        symbol: "\u20B1"
      },
      PLN: {
        name: "Poland Zloty",
        symbol: "z\u0142"
      },
      QAR: {
        name: "Qatar Riyal",
        symbol: "\uFDFC"
      },
      RON: {
        name: "Romania Leu",
        symbol: "lei"
      },
      RUB: {
        name: "Russia Ruble",
        symbol: "\u20BD"
      },
      SHP: {
        name: "Saint Helena Pound",
        symbol: "\xA3"
      },
      SAR: {
        name: "Saudi Arabia Riyal",
        symbol: "\uFDFC"
      },
      EHP: {
        name: "Sahrawi peseta",
        symbol: "\u20A7"
      },
      RSD: {
        name: "Serbia Dinar",
        symbol: "\u0414\u0438\u043D."
      },
      SCR: {
        name: "Seychelles Rupee",
        symbol: "\u20A8"
      },
      SGD: {
        name: "Singapore Dollar",
        symbol: "S$"
      },
      SBD: {
        name: "Solomon Islands Dollar",
        symbol: "SI$"
      },
      SOS: {
        name: "Somalia Shilling",
        symbol: "S"
      },
      ZAR: {
        name: "South Africa Rand",
        symbol: "R"
      },
      LKR: {
        name: "Sri Lanka Rupee",
        symbol: "\u20A8"
      },
      SEK: {
        name: "Sweden Krona",
        symbol: "kr"
      },
      CHF: {
        name: "Switzerland Franc",
        symbol: "CHF"
      },
      SRD: {
        name: "Suriname Dollar",
        symbol: "Sr$"
      },
      SYP: {
        name: "Syria Pound",
        symbol: "\xA3S"
      },
      TWD: {
        name: "Taiwan New Dollar",
        symbol: "NT$"
      },
      THB: {
        name: "Thailand Baht",
        symbol: "\u0E3F"
      },
      TTD: {
        name: "Trinidad and Tobago Dollar",
        symbol: "TT$"
      },
      TRY: {
        name: "Turkey Lira",
        symbol: ""
      },
      TVD: {
        name: "Tuvalu Dollar",
        symbol: "$T"
      },
      UAH: {
        name: "Ukraine Hryvnia",
        symbol: "\u20B4"
      },
      GBP: {
        name: "United Kingdom Pound",
        symbol: "\xA3"
      },
      USD: {
        name: "United States Dollar",
        symbol: "$"
      },
      UYU: {
        name: "Uruguay Peso",
        symbol: "$U"
      },
      UZS: {
        name: "Uzbekistan Som",
        symbol: "\u043B\u0432"
      },
      VEF: {
        name: "Venezuela Bol\xEDvar",
        symbol: "Bs"
      },
      VND: {
        name: "Viet Nam Dong",
        symbol: "\u20AB"
      },
      YER: {
        name: "Yemen Rial",
        symbol: "\uFDFC"
      },
      ZWD: {
        name: "Zimbabwe Dollar",
        symbol: "Z$"
      }
    },
        fromSymbol = {
      "\xA3": "GBP",
      "\u20AC": "EUR",
      "$": "USD",
      "\xA2": "GHS",
      "\xA5": "JPY",
      "\u20A7": "EHP",
      "\u0192": "ANG"
    };

    if (config.currency) {
      config.currency = config.currency.toUpperCase().trim();

      if (!config.currencySymbol) {
        if (currencies[config.currency]) {
          _currency.code = config.currency;
          _currency.symbol = currencies[config.currency].symbol;
        } else if (fromSymbol[config.currency]) {
          _currency.symbol = config.currency;
          _currency.code = fromSymbol[config.currency];
        } else {
          _currency.code = config.currency;
          _currency.symbol = config.currency;
        }
      } else {
        _currency.code = config.currency;
        _currency.symbol = config.currencySymbol;
      }
    } else if (config.currencySymbol) {
      _currency.symbol = config.currencySymbol;
      if (fromSymbol[config.currencySymbol]) _currency.code = fromSymbol[config.currencySymbol];else _currency.code = "   ";
    } else {
      _currency.code = "GBP";
      _currency.symbol = "£"; //"\u00A4" "¤"
    }

    if (config.currencyName) _currency.name = config.currencyName;else if (_currency.code && currencies[_currency.code]) _currency.name = currencies[_currency.code].name;else if (_currency.symbol) _currency.name = _currency.symbol;else _currency.name = "Currency";
    /******************
     * Behaviour Vars *
     ******************/

    _behaviour = {
      "autoplay": !!config.autoplay,
      "pauseOnBlur": config.pauseOnBlur === undefined ? true : !!config.pauseOnBlur,
      "dim": config.dim === undefined ? true : !!config.dim,
      "dimInPoint": config.dimInPoint === undefined ? "tableStart" : Number.isFinite(+config.dimInPoint) ? parseFloat(config.dimInPoint) : config.dimInPoint,
      "dimOutPoint": config.dimOutPoint === undefined ? "onComplete" : Number.isFinite(+config.dimOutPoint) ? parseFloat(config.dimOutPoint) : config.dimOutPoint,
      "dimDuration": config.dimDuration === undefined ? 1 : Number.isFinite(+_behaviour.dimDuration) ? parseFloat(config.dimDuration) : 1
    };
    if (_behaviour.dimDuration > 10) _behaviour.dimDuration = _behaviour.dimDuration / 1000;
    /***********
     * Getters *
     ***********/

    var trackerSet = false; // only allowed to set tracker once

    Object.defineProperties(this, {
      "DEBUG": {
        "get": function get() {
          return _DEBUG;
        }
      },
      "user": {
        "get": function get() {
          return _user;
        }
      },
      "data": {
        "get": function get() {
          return _data;
        }
      },
      "$el": {
        "get": function get() {
          return _$el;
        }
      },
      "el": {
        "get": function get() {
          return _$el[0];
        }
      },
      "currency": {
        "get": function get() {
          return _currency;
        }
      },
      "tracker": {
        "set": function set(trkr) {
          if (!trackerSet) {
            trackerSet = true;
            _tracker = trkr;
          }
        },
        "get": function get() {
          return _tracker;
        }
      },
      "config": {
        "get": function get() {
          return _config;
        }
      },
      "timeline": {
        "get": function get() {
          return _timeline;
        }
      },
      "pixi": {
        "get": function get() {
          return _pixi;
        }
      },
      "box2d": {
        "get": function get() {
          return _box2d;
        }
      },
      "audio": {
        "get": function get() {
          return _audio;
        }
      },
      "speech": {
        "get": function get() {
          return _speech;
        }
      }
    });
    /*****************
     * Setup tracker *
     ******************/

    _tracker = _matomo.default.call(this, config.matomo || {});
    /**************
     * Setup GSAP *
     **************/

    _timeline = _gsap.default.call(this); //_audio not initiated until howlerSetup below but that's ok

    /****************
     * Setup Canvas *
     ****************/

    _pixi = _pixi2.default.call(this, config.pixi || {});
    /************************
     * Setup Physics Engine *
     ************************/

    _box2d = _box2d2.default.call(this, config.box2d || {});
    /**************
     * UI & Audio *
     **************/

    var that = this;

    _mouse.default.call(this, config.mouse || {});

    _howler.default.call(this, config.audio || {}); // Init controls


    if (!_$el.find('.video-statement-controls').length) {
      //_$el.append('<div class="video-statement-controls"><div class="video-statement-play">P</div><div class="video-statement-progress-wrap"><div class="video-statement-progress"></div></div><div class="video-statement-cc-button">CC</div></div>')
      _$el.append('<table class="video-statement-controls"><tr><td class="video-statement-pause-wrap"><button class="video-statement-pause play">&nbsp;</button></td><td class="video-statement-time">0:00</td><td><div class="video-statement-progress-wrap"><div class="video-statement-progress"></div></div></td><td class="video-statement-cc-button-wrap"><button class="video-statement-cc-button" title="Turn captions on">CC</button></td></tr></table>');
    }

    this.updateProgress = function (seconds, d) {
      if (seconds === undefined) seconds = that.timeline.time();
      var m1 = Math.floor(seconds / 60),
          s1 = Math.floor(seconds - m1 * 60);
      if (!d) d = this.timeline.duration();
      var m2 = Math.floor(d / 60),
          s2 = Math.floor(d - m2 * 60);
      s1 = s1 < 10 ? '0' + s1 : s1;
      s2 = s2 < 10 ? '0' + s2 : s2;

      if (Math.max(m1, m2) >= 10) {
        m1 = m1 < 10 ? '0' + m1 : m1;
        m2 = m2 < 10 ? '0' + m2 : m2;
      }

      this.$el.find('.video-statement-time').html([m1, ':', s1, ' / ', m2, ':', s2].join(''));
      this.$el.find('.video-statement-progress').css('width', Math.round(1000 * (seconds / d)) / 10 + "%");
    }; // added in gsap.js


    this.$el.find('.video-statement-pause').on('click', function () {
      that.toggle();
    }); // Init captions

    if (!_$el.find('.video-statement-cc').length) {
      _$el.append('<div class="video-statement-cc-wrap"><span class="video-statement-cc"></span></div>');
    }

    this.$cc = _$el.find('.video-statement-cc').eq(0);
    this.$ccWrap = this.$cc.parent();
    this.$ccWrap.css('display', 'none');

    this.setCC = function (text) {
      if (!this.ccOn) return;

      if (text) {
        this.$cc.text(text);
        this.$ccWrap.css('display', 'block');
      } else {
        this.$cc.text('');
        this.$ccWrap.css('display', 'none');
      }
    };

    this.ccOn = config.audio && config.audio.ccOn !== undefined ? !!config.audio.ccOn : true;
    this.$el.find('.video-statement-cc-button').on('click', function () {
      if (that.ccOn) {
        that.setCC('');
        that.ccOn = false;
        $(this).css('color', '').attr('title', 'Turn captions on');
      } else {
        that.ccOn = true;
        $(this).css('color', '#fff').attr('title', 'Turn captions off');
      }
    });

    if (this.ccOn) {
      this.$el.find('.video-statement-cc-button').css('color', '#fff').attr('title', 'Turn captions off');
    } // dim events add after build


    this.unit = (0, utils.calculateUnit)(this.data);
    gapi.load('client', {
      callback: function callback() {
        // Handle gapi.client initialization.
        gapi.client.init({
          'apiKey': that.config["\x61\x75\x64\x69\x6f"]["\x67\x61\x70\x69"]["\x6b"] //'discoveryDocs': ['https://texttospeech.googleapis.com/$discovery/rest?version=v1']

        }).then(function () {
          that.audio.speech.gapi_loaded = true;
        });
      },
      onerror: function onerror() {
        // Handle loading error.
        console.error('gapi.client failed to load!'); //that.ABORT = true;
      },
      timeout: 5000,
      // 5 seconds.
      ontimeout: function ontimeout() {
        // Handle timeout.
        console.error('gapi.client could not load in a timely manner!'); //that.ABORT = true;
      }
    });

    _speech2.default.call(this, config.audio);

    _audio.speechesLoaded = -1;

    if (_behaviour.pauseOnBlur) {
      window.addEventListener('blur', function () {
        that.pause(true);
      }, false);
    }
    /***********************
     * Present play button *
     ***********************/


    function presentPlay() {
      if (!_pixi.assetsLoaded) setTimeout(presentPlay, 100);else if (!_pixi.webfontLoaded) {
        _pixi.showLoading();

        setTimeout(presentPlay, 100);
      } else {
        _pixi.hideLoading();

        _pixi.play.visible = true; // TODO Add first scene here?

        if (_behaviour.autoplay) setTimeout(function () {
          that.play();
        }, 100);
      }
    }

    presentPlay();
    /**********************
     * Privileged methods *
     **********************/

    this.play = function () {
      var _this = this;

      // Fail safe
      if (this.ABORT) {
        alert('This feature isn\'t currently available - check back soon');

        _tracker.trackEvent('Play-error');

        return false;
      }

      if (this.isFinished()) return this.restart();

      function doPlay() {
        // Check dim
        var tt = _timeline.time();

        if (_behaviour.dim && tt >= _behaviour.dimInPoint && (_behaviour.dimOutPoint < 0 ? tt < Math.max(_timeline.duration() + _behaviour.dimOutPoint, 0) : tt < _behaviour.dimOutPoint)) VideoStatement.dimIn(_$el, _behaviour.dimDuration); // Check for video scene

        if (_pixi.videoControler) {
          var labels = _timeline.getLabelsArray(),
              vs = labels.find(function (l) {
            return l.name == 'videoStart';
          });

          if (vs) {
            //video scene is present
            var idx = labels.findIndex(function (l) {
              return l.name == 'videoStart';
            }),
                end = Math.min(vs.time + _pixi.videoControler.duration, idx == labels.length - 1 ? Infinity : labels[idx + 1].time);

            if (tt >= vs.time && tt < end) {
              // In video scene
              if (Math.abs(_pixi.videoControler.currentTime - Math.min(tt - vs.time, _pixi.videoControler.duration)) >= 0.1) {
                // Timing is off, set manually
                var _videoControlerTimeChanged = false,
                    _videoControlerTimeChanger = function _videoControlerTimeChanger() {
                  if (!_videoControlerTimeChanged) {
                    _videoControlerTimeChanged = true;
                    this.removeEventListener('canplay', _videoControlerTimeChanger);
                    this.currentTime = Math.min(tt - vs.time, _pixi.videoControler.duration - 0.05);
                  }
                };

                _pixi.videoControler.addEventListener('canplay', _videoControlerTimeChanger); //TODO check this actually works? Will it always fire?

              }

              _pixi.videoControler.play();
            }
          }
        } // Start timeline going, record play, and play music from right point


        if (tt < 0.1) _timeline.restart();else _timeline.play();

        _tracker.play();

        if (_audio.music && tt > _audio.musicInTime + 0.01 && tt < (_audio.musicOutTime < 0 ? _timeline.duration() : 0) + _audio.musicOutTime) {
          if (!_audio.musicId) _audio.musicId = _audio.music.play();else _audio.music.play(_audio.musicId);

          _audio.music.seek(tt - (_config.audio.musicInTime || 0), _audio.musicId);
        } // Carry on speech "howl" from where it was paused


        if (_audio.speech.currentlyPlaying && _audio.speech.currentlyPlayingId && (_audio.speech.currentlyPlayingTime || _audio.speech.currentlyPlayingTime === 0)) {
          _audio.speech.currentlyPlaying.seek(_audio.speech.currentlyPlayingTime, _audio.speech.currentlyPlayingId);

          _audio.speech.currentlyPlaying.play(_audio.speech.currentlyPlayingId);
        }

        _pixi.play.visible = false;
        if (_pixi.play.$el) _pixi.play.$el.attr('aria-pressed', 'true');
        that.wasPlaying = true;
        that.$el.find('.video-statement-pause').removeClass('play');
      } // End: doPlay
      // For first play: fetch Google MP3 files and build timeline


      if (_audio.speechesLoaded < 0) {
        if (this.DEBUG) console.log('Video Statement ' + this.id + ': clicked play for first time');
        _pixi.play.visible = false;
        that.$el.find('.video-statement-pause').removeClass('play');

        _pixi.showLoading();

        _build.default.call(this, config.scenes).then(function () {
          // Add music in event
          _timeline.add(function () {
            if (!_audio.musicId) _audio.musicId = _audio.music.play();else _audio.music.play(_audio.musicId);

            _audio.music.seek(0, _audio.musicId);
          }, _audio.musicInTime); // Add music out event if needed


          if (_audio.musicOutTime < _timeline.duration()) {
            _timeline.add(function () {
              _audio.music.stop(_audio.musicId);
            }, (_audio.musicOutTime < 0 ? _timeline.duration() : 0) + _audio.musicOutTime);
          } // Add dim events


          if (_behaviour.dim) {
            if (_behaviour.dimInPoint || _behaviour.dimInPoint === 0) {
              if (!Number.isFinite(+_behaviour.dimInPoint)) {
                if (_behaviour.dimInPoint == "onStart") _behaviour.dimInPoint = 0;else if (_timeline.getLabelTime(_behaviour.dimInPoint) >= 0) _behaviour.dimInPoint = _timeline.getLabelTime(_behaviour.dimInPoint);else if (_timeline.getLabelTime('tableStart') >= 0) _behaviour.dimInPoint = _timeline.getLabelTime('tableStart');else _behaviour.dimInPoint = 5;
              }

              _timeline.add(function () {
                VideoStatement.dimIn(_$el, _behaviour.dimDuration);
              }, _behaviour.dimInPoint);
            }

            if (_behaviour.dimOutPoint) {
              if (!Number.isFinite(+_behaviour.dimInPoint)) {
                if (_behaviour.dimOutPoint == "onComplete") _behaviour.dimOutPoint = _timeline.duration() + 1;else if (_timeline.getLabelTime(_behaviour.dimOutPoint) >= 0) _behaviour.dimOutPoint = _timeline.getLabelTime(_behaviour.dimOutPoint);else _behaviour.dimOutPoint = _timeline.duration() + 1;
              } else if (_behaviour.dimOutPoint < 0) _behaviour.dimOutPoint = _timeline.duration() + _behaviour.dimOutPoint;

              if (_behaviour.dimOutPoint < _timeline.duration()) //Only add if we need to, it will dim out on the end anyway
                _timeline.add(function () {
                  VideoStatement.dimOut(_$el, _behaviour.dimDuration);
                }, _behaviour.dimOutPoint);
            }
          }

          _tracker.setMediaTotalLengthInSeconds(_timeline.duration()); // Set tracker, now we know


          _pixi.hideLoading();

          if (_this.DEBUG) console.log('Video Statement ' + _this.id + ': scenes built, playing');
          doPlay();
        }); // Start Box2d world step


        _loop.default.call(this);
      } else {
        if (this.DEBUG) console.log('Video Statement ' + this.id + ': clicked play');
        doPlay();
      } // if(_audio.music.state() == 'loaded'){
      //   doPlay()
      // } else{
      //   _pixi.showLoading()
      //   var waitedForMusic = 0;
      //   var waitForMusic = function(){
      //     if(_audio.music.state() == 'loaded'){
      //       _pixi.hideLoading()
      //       doPlay()
      //     } else {
      //       waitedForMusic += 100;
      //       if(waitedForMusic < 3000)
      //         setTimeout(waitForMusic, 100);
      //       else {
      //         if(_DEBUG) console.error('music failed to load, continuing without')
      //         _pixi.hideLoading()
      //         doPlay();
      //       }
      //     }
      //   }
      //   waitForMusic()
      // }

    };

    this.pause = function (isBlur) {
      if (this.DEBUG) console.log('Video Statement ' + this.id + ': paused'); //if(_timeline.isActive())

      if (_audio.musicId) _audio.music.stop(_audio.musicId); //Use stop instead of pause because pause doesn't work in IE...
      //_audio.music.stop() // TODO sometimes the above stop fails if the page has been left for along time before getting to the end of the video... consider just calling stop without providing an ID?
      // Check for video scene

      if (_pixi.videoControler) _pixi.videoControler.pause();

      _timeline.pause();

      _tracker.pause();

      VideoStatement.dimOut(_$el, _behaviour.dimDuration);

      if (_audio.speech.currentlyPlaying) {
        _audio.speech.currentlyPlaying.pause();

        _audio.speech.currentlyPlayingTime = _audio.speech.currentlyPlaying.seek(_audio.speech.currentlyPlayingId);
      }

      if (true || !isBlur) this.wasPlaying = false; // was originally for keeping wasPlaying true on the blur pauses to allow automatic resume, but causes problem with iPhone

      if (_pixi.play) {
        _pixi.play.visible = true;
        that.$el.find('.video-statement-pause').addClass('play');
        if (_pixi.play.$el) _pixi.play.$el.attr('aria-pressed', 'false');
      }
    };

    this.isPlaying = function () {
      return _timeline.isActive();
    };

    this.isFinished = function () {
      return _timeline.duration() > 0 && !this.isPlaying() && _timeline.time() >= _timeline.duration() - 0.1;
    };

    this.toggle = function () {
      if (this.isPlaying()) this.pause();else this.play();
    };

    this.reset = function () {
      var _this2 = this;

      // Reset balance figure
      this.pixi.setBalanceFigure && this.pixi.setBalanceFigure(0);
      this.pixi.tooltipOut(); // Remove all existing coins

      this.pixi.pots && Object.keys(this.pixi.pots).forEach(function (key) {
        var pot = _this2.pixi.pots[key];

        while (pot.length) {
          that.pixi.remove(pot.pop());
        }
      });
    };

    this.restart = function () {
      // Do reset
      this.reset();
      _pixi.play.visible = false;
      this.$el.find('.video-statement-pause').removeClass('play');
      if (_audio.speech.currentlyPlaying) _audio.speech.currentlyPlaying.stop();
      _audio.speech.currentlyPlaying = null;
      _audio.speech.currentlyPlayingId = null;

      _timeline.restart();

      _tracker.trackEvent('Replay');

      _tracker.seekStart();

      _tracker.setMediaProgressInSeconds(0); //_tracker.setMediaTotalLengthInSeconds(_timeline.duration());


      _tracker.seekFinish();

      this.wasPlaying = true;
    };
  };
  /******************
   * Public Methods *
   ******************/
  //VideoStatement.prototype.something = function(){ ... }

  /***************************
   * Static Vars and Methods *
   ***************************/
  //VideoStatement.DEBUG = false; TODO global debug setting?


  VideoStatement.counter = 0;

  VideoStatement.dimIn = function ($el, duration) {
    var $dimmer = $('.video-statement-dimmer').eq(0);

    if (!$dimmer.length) {
      $dimmer = $('<div class="video-statement-dimmer" style="opacity:0;display:none;"></div>');
      $('body').append($dimmer);
    }

    if ($el) $el.css({
      'zIndex': 99
    });
    duration = (duration < 10 ? duration * 1000 : duration) || 500;
    $dimmer.css({
      display: 'block'
    });
    $dimmer.animate({
      opacity: 1
    }, duration, function () {// Animation complete.
    });
  };

  VideoStatement.dimOut = function ($el, duration) {
    var $dimmer = $('.video-statement-dimmer');
    if (!$dimmer.length) return;
    duration = (duration < 10 ? duration * 1000 : duration) || 500;
    $dimmer.animate({
      opacity: 0
    }, duration, function () {
      // Animation complete.
      $dimmer.css({
        display: 'none'
      });
      if ($el) $el.css({
        'zIndex': null
      });
    });
  };

  return VideoStatement;
}
},{"./utils":"src/utils.js","./setup/gsap":"src/setup/gsap.js","./setup/matomo":"src/setup/matomo.js","./setup/pixi":"src/setup/pixi.js","./setup/box2d":"src/setup/box2d.js","./setup/mouse":"src/setup/mouse.js","./setup/howler":"src/setup/howler.js","./setup/speech":"src/setup/speech.js","./build.js":"src/build.js","./loop":"src/loop.js"}],"VideoStatement.js":[function(require,module,exports) {
"use strict";

require("core-js/stable");

require("regenerator-runtime/runtime");

var _factory = _interopRequireDefault(require("./src/factory"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//import "@babel/polyfill";
(function (window, document, $, undefined) {
  window.VideoStatement = (0, _factory.default)();
})(window, window.document, window.jQuery);
},{"core-js/stable":"node_modules/core-js/stable/index.js","regenerator-runtime/runtime":"node_modules/regenerator-runtime/runtime.js","./src/factory":"src/factory.js"}]},{},["VideoStatement.js"], null)
//# sourceMappingURL=/VideoStatement.js.map